name: 'Run and Record Tests'
description: 'Run integration tests and handle recording/artifact upload'

inputs:
  test-types:
    description: 'JSON array of test types to run'
    required: true
  stack-config:
    description: 'Stack configuration to use'
    required: true
  provider:
    description: 'Provider to use for tests'
    required: true
  inference-mode:
    description: 'Inference mode (record or replay)'
    required: true
  run-vision-tests:
    description: 'Whether to run vision tests'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Check Storage and Memory Available Before Tests
      if: ${{ always() }}
      shell: bash
      run: |
        free -h
        df -h

    - name: Run Llama Stack Server
      if: ${{ contains(inputs.stack-config, 'server:') }}
      shell: bash
      run: |
        # Run this so pytest in a loop doesn't start-stop servers in a loop
        echo "Starting Llama Stack Server"
        nohup uv run llama stack run ci-tests --image-type venv > server.log 2>&1 &

        echo "Waiting for Llama Stack Server to start"
        for i in {1..30}; do
          if curl -s http://localhost:8321/v1/health | grep -q "OK"; then
            echo "Llama Stack Server started"
            exit 0
          fi
          sleep 1
        done

        echo "Llama Stack Server failed to start"
        cat server.log
        exit 1

    - name: Run Integration Tests
      env:
        LLAMA_STACK_CLIENT_TIMEOUT: "300"
      shell: bash
      run: |
        stack_config="${{ inputs.stack-config }}"
        EXCLUDE_TESTS="builtin_tool or safety_with_image or code_interpreter or test_rag"

        export LLAMA_STACK_TEST_INFERENCE_MODE="${{ inputs.inference-mode }}"

        # Configure provider-specific settings
        if [ "${{ inputs.provider }}" == "ollama" ]; then
          export OLLAMA_URL="http://0.0.0.0:11434"
          export TEXT_MODEL="ollama/llama3.2:3b-instruct-fp16"
          export SAFETY_MODEL="ollama/llama-guard3:1b"
          EXTRA_PARAMS="--safety-shield=llama-guard"
        else
          export VLLM_URL="http://localhost:8000/v1"
          export TEXT_MODEL="vllm/meta-llama/Llama-3.2-1B-Instruct"
          EXTRA_PARAMS=""
          EXCLUDE_TESTS="${EXCLUDE_TESTS} or test_inference_store_tool_calls"
        fi

        if [ "${{ inputs.run-vision-tests }}" == "true" ]; then
          export LLAMA_STACK_TEST_RECORDING_DIR="tests/integration/recordings/vision"
          if uv run pytest -s -v tests/integration/inference/test_vision_inference.py --stack-config=${stack_config} \
            -k "not( ${EXCLUDE_TESTS} )" \
            --vision-model=ollama/llama3.2-vision:11b \
            --embedding-model=sentence-transformers/all-MiniLM-L6-v2 \
            --color=yes ${EXTRA_PARAMS} \
            --capture=tee-sys | tee pytest-${{ inputs.inference-mode }}-vision.log; then
            echo "✅ Tests completed for vision"
          else
            echo "❌ Tests failed for vision"
            exit 1
          fi

          exit 0
        fi

        # Run non-vision tests
        export LLAMA_STACK_TEST_RECORDING_DIR="tests/integration/recordings"
        TEST_TYPES='${{ inputs.test-types }}'
        echo "Test types to run: $TEST_TYPES"

        for test_type in $(echo "$TEST_TYPES" | jq -r '.[]'); do
          # if provider is vllm, exclude the following tests: (safety, post_training, tool_runtime)
          if [ "${{ inputs.provider }}" == "vllm" ]; then
            if [ "$test_type" == "safety" ] || [ "$test_type" == "post_training" ] || [ "$test_type" == "tool_runtime" ]; then
              continue
            fi
          fi

          echo "=== Running tests for: $test_type ==="

          if uv run pytest -s -v tests/integration/$test_type --stack-config=${stack_config} \
            -k "not( ${EXCLUDE_TESTS} )" \
            --text-model=$TEXT_MODEL \
            --embedding-model=sentence-transformers/all-MiniLM-L6-v2 \
            --color=yes ${EXTRA_PARAMS} \
            --capture=tee-sys | tee pytest-${{ inputs.inference-mode }}-$test_type.log; then
            echo "✅ Tests completed for $test_type"
          else
            echo "❌ Tests failed for $test_type"
            exit 1
          fi
        done

    - name: Check Storage and Memory Available After Tests
      if: ${{ always() }}
      shell: bash
      run: |
        free -h
        df -h

    - name: Commit and push recordings
      if: ${{ inputs.inference-mode == 'record' }}
      shell: bash
      run: |
        echo "Checking for recording changes"
        git status --porcelain tests/integration/recordings/

        if [[ -n $(git status --porcelain tests/integration/recordings/) ]]; then
          echo "New recordings detected, committing and pushing"
          git add tests/integration/recordings/

          if [ "${{ inputs.run-vision-tests }}" == "true" ]; then
            git commit -m "Recordings update from CI (vision)"
          else
            git commit -m "Recordings update from CI"
          fi

          git fetch origin ${{ github.event.pull_request.head.ref }}
          git rebase origin/${{ github.event.pull_request.head.ref }}
          git push origin HEAD:${{ github.event.pull_request.head.ref }}
          fi
        else
          echo "No recording changes"
        fi

    - name: Write inference logs to file
      if: ${{ always() }}
      shell: bash
      run: |
        sudo docker logs ollama > ollama-${{ inputs.inference-mode }}.log || true

    - name: Upload logs
      if: ${{ always() }}
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ inputs.inference-mode }}-logs-${{ github.run_id }}-${{ github.run_attempt || '' }}-${{ inputs.provider }}
        path: |
          *.log
        retention-days: 1 