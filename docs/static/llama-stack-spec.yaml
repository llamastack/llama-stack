openapi: 3.1.0
info:
  title: Llama Stack API
  description: A comprehensive API for building and deploying AI applications
  version: 1.0.0
servers:
- url: https://api.llamastack.com
  description: Production server
- url: https://staging-api.llamastack.com
  description: Staging server
paths:
  /v1/batches:
    get:
      tags:
      - V1
      summary: List Batches
      description: Query endpoint for proper schema generation.
      operationId: list_batches_v1_batches_get
      parameters:
      - name: after
        in: query
        required: false
        schema:
          type: string
          title: After
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      responses:
        '200':
          description: A list of batch objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBatchesResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Create Batch
      description: Query endpoint for proper schema generation.
      operationId: create_batch_v1_batches_post
      parameters:
      - name: input_file_id
        in: query
        required: false
        schema:
          type: string
          title: Input File Id
      - name: endpoint
        in: query
        required: false
        schema:
          type: string
          title: Endpoint
      - name: completion_window
        in: query
        required: false
        schema:
          type: string
          title: Completion Window
      - name: metadata
        in: query
        required: false
        schema:
          type: string
          title: Metadata
      - name: idempotency_key
        in: query
        required: false
        schema:
          type: string
          title: Idempotency Key
      responses:
        '200':
          description: The created batch object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/batches/{batch_id}:
    get:
      tags:
      - V1
      summary: Retrieve Batch
      description: Query endpoint for proper schema generation.
      operationId: retrieve_batch_v1_batches__batch_id__get
      parameters:
      - name: batch_id
        in: path
        required: true
        schema:
          type: string
          title: Batch Id
      responses:
        '200':
          description: The batch object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/batches/{batch_id}/cancel:
    post:
      tags:
      - V1
      summary: Cancel Batch
      description: Query endpoint for proper schema generation.
      operationId: cancel_batch_v1_batches__batch_id__cancel_post
      parameters:
      - name: batch_id
        in: path
        required: true
        schema:
          type: string
          title: Batch Id
      responses:
        '200':
          description: The updated batch object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/chat/completions:
    get:
      tags:
      - V1
      summary: List Chat Completions
      description: Query endpoint for proper schema generation.
      operationId: list_chat_completions_v1_chat_completions_get
      parameters:
      - name: after
        in: query
        required: false
        schema:
          type: string
          title: After
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      - name: model
        in: query
        required: false
        schema:
          type: string
          title: Model
      - name: order
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Order'
          default: desc
      responses:
        '200':
          description: A ListOpenAIChatCompletionResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOpenAIChatCompletionResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Chat Completion
      description: Typed endpoint for proper schema generation.
      operationId: openai_chat_completion_v1_chat_completions_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAIChatCompletionRequestWithExtraBody'
      responses:
        '200':
          description: An OpenAIChatCompletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIChatCompletion'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/chat/completions/{completion_id}:
    get:
      tags:
      - V1
      summary: Get Chat Completion
      description: Query endpoint for proper schema generation.
      operationId: get_chat_completion_v1_chat_completions__completion_id__get
      parameters:
      - name: completion_id
        in: path
        required: true
        schema:
          type: string
          title: Completion Id
      responses:
        '200':
          description: A OpenAICompletionWithInputMessages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAICompletionWithInputMessages'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/completions:
    post:
      tags:
      - V1
      summary: Openai Completion
      description: Typed endpoint for proper schema generation.
      operationId: openai_completion_v1_completions_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAICompletionRequestWithExtraBody'
        required: true
      responses:
        '200':
          description: An OpenAICompletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAICompletion'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/conversations:
    post:
      tags:
      - V1
      summary: Create Conversation
      description: Query endpoint for proper schema generation.
      operationId: create_conversation_v1_conversations_post
      parameters:
      - name: metadata
        in: query
        required: false
        schema:
          type: string
          title: Metadata
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseMessage'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
              - $ref: '#/components/schemas/OpenAIResponseInputFunctionToolCallOutput'
              - $ref: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
              - $ref: '#/components/schemas/OpenAIResponseMCPApprovalResponse'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
              discriminator:
                propertyName: type
                mapping:
                  message: '#/components/schemas/OpenAIResponseMessage'
                  web_search_call: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
                  file_search_call: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
                  function_call: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
                  function_call_output: '#/components/schemas/OpenAIResponseInputFunctionToolCallOutput'
                  mcp_approval_request: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
                  mcp_approval_response: '#/components/schemas/OpenAIResponseMCPApprovalResponse'
                  mcp_call: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
                  mcp_list_tools: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
              title: Items
      responses:
        '200':
          description: The created conversation object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/conversations/{conversation_id}:
    delete:
      tags:
      - V1
      summary: Openai Delete Conversation
      description: Query endpoint for proper schema generation.
      operationId: openai_delete_conversation_v1_conversations__conversation_id__delete
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
          title: Conversation Id
      responses:
        '200':
          description: The deleted conversation resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDeletedResource'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Conversation
      description: Query endpoint for proper schema generation.
      operationId: get_conversation_v1_conversations__conversation_id__get
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
          title: Conversation Id
      responses:
        '200':
          description: The conversation object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Update Conversation
      description: Query endpoint for proper schema generation.
      operationId: update_conversation_v1_conversations__conversation_id__post
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
          title: Conversation Id
      - name: metadata
        in: query
        required: false
        schema:
          type: string
          title: Metadata
      responses:
        '200':
          description: The updated conversation object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/conversations/{conversation_id}/items:
    get:
      tags:
      - V1
      summary: List Items
      description: Query endpoint for proper schema generation.
      operationId: list_items_v1_conversations__conversation_id__items_get
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
          title: Conversation Id
      - name: after
        in: query
        required: false
        schema:
          type: string
          title: After
      - name: include
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ConversationItemInclude'
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          type: string
          title: Order
      responses:
        '200':
          description: List of conversation items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationItemList'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Add Items
      description: Query endpoint for proper schema generation.
      operationId: add_items_v1_conversations__conversation_id__items_post
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
          title: Conversation Id
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
              - $ref: '#/components/schemas/OpenAIResponseMessage'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
              - $ref: '#/components/schemas/OpenAIResponseInputFunctionToolCallOutput'
              - $ref: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
              - $ref: '#/components/schemas/OpenAIResponseMCPApprovalResponse'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
              title: Items
      responses:
        '200':
          description: List of created items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationItemList'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/conversations/{conversation_id}/items/{item_id}:
    delete:
      tags:
      - V1
      summary: Openai Delete Conversation Item
      description: Query endpoint for proper schema generation.
      operationId: openai_delete_conversation_item_v1_conversations__conversation_id__items__item_id__delete
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
          title: Conversation Id
      - name: item_id
        in: path
        required: true
        schema:
          type: string
          title: Item Id
      responses:
        '200':
          description: The deleted item resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationItemDeletedResource'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Retrieve
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: retrieve_v1_conversations__conversation_id__items__item_id__get
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: The conversation item.
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/embeddings:
    post:
      tags:
      - V1
      summary: Openai Embeddings
      description: Typed endpoint for proper schema generation.
      operationId: openai_embeddings_v1_embeddings_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAIEmbeddingsRequestWithExtraBody'
        required: true
      responses:
        '200':
          description: An OpenAIEmbeddingsResponse containing the embeddings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIEmbeddingsResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/files:
    get:
      tags:
      - V1
      summary: Openai List Files
      description: Query endpoint for proper schema generation.
      operationId: openai_list_files_v1_files_get
      parameters:
      - name: after
        in: query
        required: false
        schema:
          type: string
          title: After
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 10000
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Order'
          default: desc
      - name: purpose
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/OpenAIFilePurpose'
      responses:
        '200':
          description: An ListOpenAIFileResponse containing the list of files.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOpenAIFileResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Upload File
      description: Response-only endpoint for proper schema generation.
      operationId: openai_upload_file_v1_files_post
      responses:
        '200':
          description: An OpenAIFileObject representing the uploaded file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFileObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/files/{file_id}:
    delete:
      tags:
      - V1
      summary: Openai Delete File
      description: Query endpoint for proper schema generation.
      operationId: openai_delete_file_v1_files__file_id__delete
      parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          title: File Id
      responses:
        '200':
          description: An OpenAIFileDeleteResponse indicating successful deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFileDeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Openai Retrieve File
      description: Query endpoint for proper schema generation.
      operationId: openai_retrieve_file_v1_files__file_id__get
      parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          title: File Id
      responses:
        '200':
          description: An OpenAIFileObject containing file information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFileObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/files/{file_id}/content:
    get:
      tags:
      - V1
      summary: Openai Retrieve File Content
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: openai_retrieve_file_content_v1_files__file_id__content_get
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: The raw file content as a binary response.
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/health:
    get:
      tags:
      - V1
      summary: Health
      description: Response-only endpoint for proper schema generation.
      operationId: health_v1_health_get
      responses:
        '200':
          description: Health information indicating if the service is operational.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthInfo'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/inspect/routes:
    get:
      tags:
      - V1
      summary: List Routes
      description: Response-only endpoint for proper schema generation.
      operationId: list_routes_v1_inspect_routes_get
      responses:
        '200':
          description: Response containing information about all available routes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoutesResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/models:
    get:
      tags:
      - V1
      summary: List Models
      description: Response-only endpoint for proper schema generation.
      operationId: list_models_v1_models_get
      responses:
        '200':
          description: A ListModelsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Register Model
      description: Query endpoint for proper schema generation.
      operationId: register_model_v1_models_post
      parameters:
      - name: model_id
        in: query
        required: false
        schema:
          type: string
          title: Model Id
      - name: provider_model_id
        in: query
        required: false
        schema:
          type: string
          title: Provider Model Id
      - name: provider_id
        in: query
        required: false
        schema:
          type: string
          title: Provider Id
      - name: metadata
        in: query
        required: false
        schema:
          type: string
          title: Metadata
      - name: model_type
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ModelType'
      responses:
        '200':
          description: A Model.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/models/{model_id}:
    delete:
      tags:
      - V1
      summary: Unregister Model
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: unregister_model_v1_models__model_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Model
      description: Query endpoint for proper schema generation.
      operationId: get_model_v1_models__model_id__get
      parameters:
      - name: model_id
        in: path
        required: true
        schema:
          type: string
          title: Model Id
      responses:
        '200':
          description: A Model.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/moderations:
    post:
      tags:
      - V1
      summary: Run Moderation
      description: Query endpoint for proper schema generation.
      operationId: run_moderation_v1_moderations_post
      parameters:
      - name: input
        in: query
        required: false
        schema:
          type: string
          title: Input
      - name: model
        in: query
        required: false
        schema:
          type: string
          title: Model
      responses:
        '200':
          description: A moderation object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerationObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/prompts:
    get:
      tags:
      - V1
      summary: List Prompts
      description: Response-only endpoint for proper schema generation.
      operationId: list_prompts_v1_prompts_get
      responses:
        '200':
          description: A ListPromptsResponse containing all prompts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPromptsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Create Prompt
      description: Query endpoint for proper schema generation.
      operationId: create_prompt_v1_prompts_post
      parameters:
      - name: prompt
        in: query
        required: false
        schema:
          type: string
          title: Prompt
      - name: variables
        in: query
        required: false
        schema:
          type: string
          title: Variables
      responses:
        '200':
          description: The created Prompt resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/prompts/{prompt_id}:
    delete:
      tags:
      - V1
      summary: Delete Prompt
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: delete_prompt_v1_prompts__prompt_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Prompt
      description: Query endpoint for proper schema generation.
      operationId: get_prompt_v1_prompts__prompt_id__get
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
          title: Prompt Id
      - name: version
        in: query
        required: false
        schema:
          type: integer
          title: Version
      responses:
        '200':
          description: A Prompt resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Update Prompt
      description: Query endpoint for proper schema generation.
      operationId: update_prompt_v1_prompts__prompt_id__post
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
          title: Prompt Id
      - name: prompt
        in: query
        required: false
        schema:
          type: string
          title: Prompt
      - name: version
        in: query
        required: false
        schema:
          type: integer
          title: Version
      - name: variables
        in: query
        required: false
        schema:
          type: string
          title: Variables
      - name: set_as_default
        in: query
        required: false
        schema:
          type: boolean
          default: true
          title: Set As Default
      responses:
        '200':
          description: The updated Prompt resource with incremented version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/prompts/{prompt_id}/set-default-version:
    post:
      tags:
      - V1
      summary: Set Default Version
      description: Query endpoint for proper schema generation.
      operationId: set_default_version_v1_prompts__prompt_id__set_default_version_post
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
          title: Prompt Id
      - name: version
        in: query
        required: false
        schema:
          type: integer
          title: Version
      responses:
        '200':
          description: The prompt with the specified version now set as default.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/prompts/{prompt_id}/versions:
    get:
      tags:
      - V1
      summary: List Prompt Versions
      description: Query endpoint for proper schema generation.
      operationId: list_prompt_versions_v1_prompts__prompt_id__versions_get
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
          title: Prompt Id
      responses:
        '200':
          description: A ListPromptsResponse containing all versions of the prompt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPromptsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/providers:
    get:
      tags:
      - V1
      summary: List Providers
      description: Response-only endpoint for proper schema generation.
      operationId: list_providers_v1_providers_get
      responses:
        '200':
          description: A ListProvidersResponse containing information about all providers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProvidersResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/providers/{provider_id}:
    get:
      tags:
      - V1
      summary: Inspect Provider
      description: Query endpoint for proper schema generation.
      operationId: inspect_provider_v1_providers__provider_id__get
      parameters:
      - name: provider_id
        in: path
        required: true
        schema:
          type: string
          title: Provider Id
      responses:
        '200':
          description: A ProviderInfo object containing the provider's details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderInfo'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/responses:
    get:
      tags:
      - V1
      summary: List Openai Responses
      description: Query endpoint for proper schema generation.
      operationId: list_openai_responses_v1_responses_get
      parameters:
      - name: after
        in: query
        required: false
        schema:
          type: string
          title: After
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 50
          title: Limit
      - name: model
        in: query
        required: false
        schema:
          type: string
          title: Model
      - name: order
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Order'
          default: desc
      responses:
        '200':
          description: A ListOpenAIResponseObject.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOpenAIResponseObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Create Openai Response
      description: Query endpoint for proper schema generation.
      operationId: create_openai_response_v1_responses_post
      parameters:
      - name: input
        in: query
        required: false
        schema:
          type: string
          title: Input
      - name: model
        in: query
        required: false
        schema:
          type: string
          title: Model
      - name: instructions
        in: query
        required: false
        schema:
          type: string
          title: Instructions
      - name: previous_response_id
        in: query
        required: false
        schema:
          type: string
          title: Previous Response Id
      - name: conversation
        in: query
        required: false
        schema:
          type: string
          title: Conversation
      - name: store
        in: query
        required: false
        schema:
          type: boolean
          default: true
          title: Store
      - name: stream
        in: query
        required: false
        schema:
          type: boolean
          default: false
          title: Stream
      - name: temperature
        in: query
        required: false
        schema:
          type: number
          title: Temperature
      - name: include
        in: query
        required: false
        schema:
          type: string
          title: Include
      - name: max_infer_iters
        in: query
        required: false
        schema:
          type: integer
          default: 10
          title: Max Infer Iters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_create_openai_response_v1_responses_post'
      responses:
        '200':
          description: An OpenAIResponseObject.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIResponseObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/responses/{response_id}:
    delete:
      tags:
      - V1
      summary: Delete Openai Response
      description: Query endpoint for proper schema generation.
      operationId: delete_openai_response_v1_responses__response_id__delete
      parameters:
      - name: response_id
        in: path
        required: true
        schema:
          type: string
          title: Response Id
      responses:
        '200':
          description: An OpenAIDeleteResponseObject
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIDeleteResponseObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Openai Response
      description: Query endpoint for proper schema generation.
      operationId: get_openai_response_v1_responses__response_id__get
      parameters:
      - name: response_id
        in: path
        required: true
        schema:
          type: string
          title: Response Id
      responses:
        '200':
          description: An OpenAIResponseObject.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIResponseObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/responses/{response_id}/input_items:
    get:
      tags:
      - V1
      summary: List Openai Response Input Items
      description: Query endpoint for proper schema generation.
      operationId: list_openai_response_input_items_v1_responses__response_id__input_items_get
      parameters:
      - name: response_id
        in: path
        required: true
        schema:
          type: string
          title: Response Id
      - name: after
        in: query
        required: false
        schema:
          type: string
          title: After
      - name: before
        in: query
        required: false
        schema:
          type: string
          title: Before
      - name: include
        in: query
        required: false
        schema:
          type: string
          title: Include
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Order'
          default: desc
      responses:
        '200':
          description: An ListOpenAIResponseInputItem.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOpenAIResponseInputItem'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/safety/run-shield:
    post:
      tags:
      - V1
      summary: Run Shield
      description: Query endpoint for proper schema generation.
      operationId: run_shield_v1_safety_run_shield_post
      parameters:
      - name: shield_id
        in: query
        required: false
        schema:
          type: string
          title: Shield Id
      - name: params
        in: query
        required: false
        schema:
          type: string
          title: Params
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
              - $ref: '#/components/schemas/OpenAIUserMessageParam-Input'
              - $ref: '#/components/schemas/OpenAISystemMessageParam'
              - $ref: '#/components/schemas/OpenAIAssistantMessageParam-Input'
              - $ref: '#/components/schemas/OpenAIToolMessageParam'
              - $ref: '#/components/schemas/OpenAIDeveloperMessageParam'
              title: Messages
      responses:
        '200':
          description: A RunShieldResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunShieldResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/scoring-functions:
    get:
      tags:
      - V1
      summary: List Scoring Functions
      description: Response-only endpoint for proper schema generation.
      operationId: list_scoring_functions_v1_scoring_functions_get
      responses:
        '200':
          description: A ListScoringFunctionsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListScoringFunctionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Register Scoring Function
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: register_scoring_function_v1_scoring_functions_post
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/scoring-functions/{scoring_fn_id}:
    delete:
      tags:
      - V1
      summary: Unregister Scoring Function
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: unregister_scoring_function_v1_scoring_functions__scoring_fn_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Scoring Function
      description: Query endpoint for proper schema generation.
      operationId: get_scoring_function_v1_scoring_functions__scoring_fn_id__get
      parameters:
      - name: scoring_fn_id
        in: path
        required: true
        schema:
          type: string
          title: Scoring Fn Id
      responses:
        '200':
          description: A ScoringFn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoringFn'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/scoring/score:
    post:
      tags:
      - V1
      summary: Score
      description: Query endpoint for proper schema generation.
      operationId: score_v1_scoring_score_post
      parameters:
      - name: input_rows
        in: query
        required: false
        schema:
          type: string
          title: Input Rows
      - name: scoring_functions
        in: query
        required: false
        schema:
          type: string
          title: Scoring Functions
      responses:
        '200':
          description: A ScoreResponse object containing rows and aggregated results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/scoring/score-batch:
    post:
      tags:
      - V1
      summary: Score Batch
      description: Query endpoint for proper schema generation.
      operationId: score_batch_v1_scoring_score_batch_post
      parameters:
      - name: dataset_id
        in: query
        required: false
        schema:
          type: string
          title: Dataset Id
      - name: scoring_functions
        in: query
        required: false
        schema:
          type: string
          title: Scoring Functions
      - name: save_results_dataset
        in: query
        required: false
        schema:
          type: boolean
          default: false
          title: Save Results Dataset
      responses:
        '200':
          description: A ScoreBatchResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreBatchResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/shields:
    get:
      tags:
      - V1
      summary: List Shields
      description: Response-only endpoint for proper schema generation.
      operationId: list_shields_v1_shields_get
      responses:
        '200':
          description: A ListShieldsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListShieldsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Register Shield
      description: Query endpoint for proper schema generation.
      operationId: register_shield_v1_shields_post
      parameters:
      - name: shield_id
        in: query
        required: false
        schema:
          type: string
          title: Shield Id
      - name: provider_shield_id
        in: query
        required: false
        schema:
          type: string
          title: Provider Shield Id
      - name: provider_id
        in: query
        required: false
        schema:
          type: string
          title: Provider Id
      - name: params
        in: query
        required: false
        schema:
          type: string
          title: Params
      responses:
        '200':
          description: A Shield.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shield'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/shields/{identifier}:
    delete:
      tags:
      - V1
      summary: Unregister Shield
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: unregister_shield_v1_shields__identifier__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Shield
      description: Query endpoint for proper schema generation.
      operationId: get_shield_v1_shields__identifier__get
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          type: string
          title: Identifier
      responses:
        '200':
          description: A Shield.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shield'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/tool-runtime/invoke:
    post:
      tags:
      - V1
      summary: Invoke Tool
      description: Query endpoint for proper schema generation.
      operationId: invoke_tool_v1_tool_runtime_invoke_post
      parameters:
      - name: tool_name
        in: query
        required: false
        schema:
          type: string
          title: Tool Name
      - name: kwargs
        in: query
        required: false
        schema:
          type: string
          title: Kwargs
      responses:
        '200':
          description: A ToolInvocationResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolInvocationResult'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/tool-runtime/list-tools:
    get:
      tags:
      - V1
      summary: List Runtime Tools
      description: Query endpoint for proper schema generation.
      operationId: list_runtime_tools_v1_tool_runtime_list_tools_get
      parameters:
      - name: tool_group_id
        in: query
        required: false
        schema:
          type: string
          title: Tool Group Id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/URL'
      responses:
        '200':
          description: A ListToolDefsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolDefsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/tool-runtime/rag-tool/insert:
    post:
      tags:
      - V1
      summary: Rag Tool.Insert
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: rag_tool_insert_v1_tool_runtime_rag_tool_insert_post
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/tool-runtime/rag-tool/query:
    post:
      tags:
      - V1
      summary: Rag Tool.Query
      description: Query endpoint for proper schema generation.
      operationId: rag_tool_query_v1_tool_runtime_rag_tool_query_post
      parameters:
      - name: content
        in: query
        required: false
        schema:
          type: string
          title: Content
      - name: vector_store_ids
        in: query
        required: false
        schema:
          type: string
          title: Vector Store Ids
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RAGQueryConfig'
      responses:
        '200':
          description: RAGQueryResult containing the retrieved content and metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RAGQueryResult'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/toolgroups:
    get:
      tags:
      - V1
      summary: List Tool Groups
      description: Response-only endpoint for proper schema generation.
      operationId: list_tool_groups_v1_toolgroups_get
      responses:
        '200':
          description: A ListToolGroupsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolGroupsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Register Tool Group
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: register_tool_group_v1_toolgroups_post
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/toolgroups/{toolgroup_id}:
    delete:
      tags:
      - V1
      summary: Unregister Toolgroup
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: unregister_toolgroup_v1_toolgroups__toolgroup_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Tool Group
      description: Query endpoint for proper schema generation.
      operationId: get_tool_group_v1_toolgroups__toolgroup_id__get
      parameters:
      - name: toolgroup_id
        in: path
        required: true
        schema:
          type: string
          title: Toolgroup Id
      responses:
        '200':
          description: A ToolGroup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolGroup'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/tools:
    get:
      tags:
      - V1
      summary: List Tools
      description: Query endpoint for proper schema generation.
      operationId: list_tools_v1_tools_get
      parameters:
      - name: toolgroup_id
        in: query
        required: false
        schema:
          type: string
          title: Toolgroup Id
      responses:
        '200':
          description: A ListToolDefsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolDefsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/tools/{tool_name}:
    get:
      tags:
      - V1
      summary: Get Tool
      description: Query endpoint for proper schema generation.
      operationId: get_tool_v1_tools__tool_name__get
      parameters:
      - name: tool_name
        in: path
        required: true
        schema:
          type: string
          title: Tool Name
      responses:
        '200':
          description: A ToolDef.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDef'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector-io/insert:
    post:
      tags:
      - V1
      summary: Insert Chunks
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: insert_chunks_v1_vector_io_insert_post
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector-io/query:
    post:
      tags:
      - V1
      summary: Query Chunks
      description: Query endpoint for proper schema generation.
      operationId: query_chunks_v1_vector_io_query_post
      parameters:
      - name: vector_store_id
        in: query
        required: false
        schema:
          type: string
          title: Vector Store Id
      - name: query
        in: query
        required: false
        schema:
          type: string
          title: Query
      - name: params
        in: query
        required: false
        schema:
          type: string
          title: Params
      responses:
        '200':
          description: A QueryChunksResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryChunksResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores:
    get:
      tags:
      - V1
      summary: Openai List Vector Stores
      description: Query endpoint for proper schema generation.
      operationId: openai_list_vector_stores_v1_vector_stores_get
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          type: string
          default: desc
          title: Order
      - name: after
        in: query
        required: false
        schema:
          type: string
          title: After
      - name: before
        in: query
        required: false
        schema:
          type: string
          title: Before
      responses:
        '200':
          description: A VectorStoreListResponse containing the list of vector stores.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreListResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Create Vector Store
      description: Typed endpoint for proper schema generation.
      operationId: openai_create_vector_store_v1_vector_stores_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAICreateVectorStoreRequestWithExtraBody'
      responses:
        '200':
          description: A VectorStoreObject representing the created vector store.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}:
    delete:
      tags:
      - V1
      summary: Openai Delete Vector Store
      description: Query endpoint for proper schema generation.
      operationId: openai_delete_vector_store_v1_vector_stores__vector_store_id__delete
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      responses:
        '200':
          description: A VectorStoreDeleteResponse indicating the deletion status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreDeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Openai Retrieve Vector Store
      description: Query endpoint for proper schema generation.
      operationId: openai_retrieve_vector_store_v1_vector_stores__vector_store_id__get
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      responses:
        '200':
          description: A VectorStoreObject representing the vector store.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Update Vector Store
      description: Query endpoint for proper schema generation.
      operationId: openai_update_vector_store_v1_vector_stores__vector_store_id__post
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      - name: name
        in: query
        required: false
        schema:
          type: string
          title: Name
      - name: expires_after
        in: query
        required: false
        schema:
          type: string
          title: Expires After
      - name: metadata
        in: query
        required: false
        schema:
          type: string
          title: Metadata
      responses:
        '200':
          description: A VectorStoreObject representing the updated vector store.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}/file_batches:
    post:
      tags:
      - V1
      summary: Openai Create Vector Store File Batch
      description: Typed endpoint for proper schema generation.
      operationId: openai_create_vector_store_file_batch_v1_vector_stores__vector_store_id__file_batches_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAICreateVectorStoreFileBatchRequestWithExtraBody'
        required: true
      responses:
        '200':
          description: A VectorStoreFileBatchObject representing the created file
            batch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileBatchObject'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/vector_stores/{vector_store_id}/file_batches/{batch_id}:
    get:
      tags:
      - V1
      summary: Openai Retrieve Vector Store File Batch
      description: Query endpoint for proper schema generation.
      operationId: openai_retrieve_vector_store_file_batch_v1_vector_stores__vector_store_id__file_batches__batch_id__get
      parameters:
      - name: batch_id
        in: path
        required: true
        schema:
          type: string
          title: Batch Id
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      responses:
        '200':
          description: A VectorStoreFileBatchObject representing the file batch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileBatchObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel:
    post:
      tags:
      - V1
      summary: Openai Cancel Vector Store File Batch
      description: Query endpoint for proper schema generation.
      operationId: openai_cancel_vector_store_file_batch_v1_vector_stores__vector_store_id__file_batches__batch_id__cancel_post
      parameters:
      - name: batch_id
        in: path
        required: true
        schema:
          type: string
          title: Batch Id
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      responses:
        '200':
          description: A VectorStoreFileBatchObject representing the cancelled file
            batch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileBatchObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}/file_batches/{batch_id}/files:
    get:
      tags:
      - V1
      summary: Openai List Files In Vector Store File Batch
      description: Query endpoint for proper schema generation.
      operationId: openai_list_files_in_vector_store_file_batch_v1_vector_stores__vector_store_id__file_batches__batch_id__files_get
      parameters:
      - name: batch_id
        in: path
        required: true
        schema:
          type: string
          title: Batch Id
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      - name: after
        in: query
        required: false
        schema:
          type: string
          title: After
      - name: before
        in: query
        required: false
        schema:
          type: string
          title: Before
      - name: filter
        in: query
        required: false
        schema:
          type: string
          title: Filter
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          type: string
          default: desc
          title: Order
      responses:
        '200':
          description: A VectorStoreFilesListInBatchResponse containing the list of
            files in the batch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFilesListInBatchResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}/files:
    get:
      tags:
      - V1
      summary: Openai List Files In Vector Store
      description: Query endpoint for proper schema generation.
      operationId: openai_list_files_in_vector_store_v1_vector_stores__vector_store_id__files_get
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          type: string
          default: desc
          title: Order
      - name: after
        in: query
        required: false
        schema:
          type: string
          title: After
      - name: before
        in: query
        required: false
        schema:
          type: string
          title: Before
      - name: filter
        in: query
        required: false
        schema:
          type: string
          title: Filter
      responses:
        '200':
          description: A VectorStoreListFilesResponse containing the list of files.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreListFilesResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Attach File To Vector Store
      description: Query endpoint for proper schema generation.
      operationId: openai_attach_file_to_vector_store_v1_vector_stores__vector_store_id__files_post
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      - name: file_id
        in: query
        required: false
        schema:
          type: string
          title: File Id
      - name: attributes
        in: query
        required: false
        schema:
          type: string
          title: Attributes
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
              - $ref: '#/components/schemas/VectorStoreChunkingStrategyAuto'
              - $ref: '#/components/schemas/VectorStoreChunkingStrategyStatic'
              title: Chunking Strategy
      responses:
        '200':
          description: A VectorStoreFileObject representing the attached file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}/files/{file_id}:
    delete:
      tags:
      - V1
      summary: Openai Delete Vector Store File
      description: Query endpoint for proper schema generation.
      operationId: openai_delete_vector_store_file_v1_vector_stores__vector_store_id__files__file_id__delete
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          title: File Id
      responses:
        '200':
          description: A VectorStoreFileDeleteResponse indicating the deletion status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileDeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Openai Retrieve Vector Store File
      description: Query endpoint for proper schema generation.
      operationId: openai_retrieve_vector_store_file_v1_vector_stores__vector_store_id__files__file_id__get
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          title: File Id
      responses:
        '200':
          description: A VectorStoreFileObject representing the file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Update Vector Store File
      description: Query endpoint for proper schema generation.
      operationId: openai_update_vector_store_file_v1_vector_stores__vector_store_id__files__file_id__post
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          title: File Id
      - name: attributes
        in: query
        required: false
        schema:
          type: string
          title: Attributes
      responses:
        '200':
          description: A VectorStoreFileObject representing the updated file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}/files/{file_id}/content:
    get:
      tags:
      - V1
      summary: Openai Retrieve Vector Store File Contents
      description: Query endpoint for proper schema generation.
      operationId: openai_retrieve_vector_store_file_contents_v1_vector_stores__vector_store_id__files__file_id__content_get
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          title: File Id
      responses:
        '200':
          description: A list of InterleavedContent representing the file contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileContentsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}/search:
    post:
      tags:
      - V1
      summary: Openai Search Vector Store
      description: Query endpoint for proper schema generation.
      operationId: openai_search_vector_store_v1_vector_stores__vector_store_id__search_post
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      - name: query
        in: query
        required: false
        schema:
          type: string
          title: Query
      - name: filters
        in: query
        required: false
        schema:
          type: string
          title: Filters
      - name: max_num_results
        in: query
        required: false
        schema:
          type: integer
          default: 10
          title: Max Num Results
      - name: rewrite_query
        in: query
        required: false
        schema:
          type: boolean
          default: false
          title: Rewrite Query
      - name: search_mode
        in: query
        required: false
        schema:
          type: string
          default: vector
          title: Search Mode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRankingOptions'
      responses:
        '200':
          description: A VectorStoreSearchResponse containing the search results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreSearchResponsePage'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/version:
    get:
      tags:
      - V1
      summary: Version
      description: Response-only endpoint for proper schema generation.
      operationId: version_v1_version_get
      responses:
        '200':
          description: Version information containing the service version number.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
components:
  schemas:
    AgentTurnInputType:
      properties:
        type:
          type: string
          const: agent_turn_input
          title: Type
          default: agent_turn_input
      type: object
      title: AgentTurnInputType
      description: 'Parameter type for agent turn input.


        :param type: Discriminator type. Always "agent_turn_input"'
    AggregationFunctionType:
      type: string
      enum:
      - average
      - weighted_average
      - median
      - categorical_count
      - accuracy
      title: AggregationFunctionType
      description: 'Types of aggregation functions for scoring results.

        :cvar average: Calculate the arithmetic mean of scores

        :cvar weighted_average: Calculate a weighted average of scores

        :cvar median: Calculate the median value of scores

        :cvar categorical_count: Count occurrences of categorical values

        :cvar accuracy: Calculate accuracy as the proportion of correct answers'
    AllowedToolsFilter:
      properties:
        tool_names:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Tool Names
      type: object
      title: AllowedToolsFilter
      description: 'Filter configuration for restricting which MCP tools can be used.


        :param tool_names: (Optional) List of specific tool names that are allowed'
    ApprovalFilter:
      properties:
        always:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Always
        never:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Never
      type: object
      title: ApprovalFilter
      description: 'Filter configuration for MCP tool approval requirements.


        :param always: (Optional) List of tool names that always require approval

        :param never: (Optional) List of tool names that never require approval'
    ArrayType:
      properties:
        type:
          type: string
          const: array
          title: Type
          default: array
      type: object
      title: ArrayType
      description: 'Parameter type for array values.


        :param type: Discriminator type. Always "array"'
    BasicScoringFnParams:
      properties:
        type:
          type: string
          const: basic
          title: Type
          default: basic
        aggregation_functions:
          items:
            $ref: '#/components/schemas/AggregationFunctionType'
          type: array
          title: Aggregation Functions
          description: Aggregation functions to apply to the scores of each row
      type: object
      title: BasicScoringFnParams
      description: 'Parameters for basic scoring function configuration.

        :param type: The type of scoring function parameters, always basic

        :param aggregation_functions: Aggregation functions to apply to the scores
        of each row'
    Body_create_openai_response_v1_responses_post:
      properties:
        prompt:
          $ref: '#/components/schemas/OpenAIResponsePrompt'
        text:
          $ref: '#/components/schemas/OpenAIResponseText'
        tools:
          anyOf:
          - $ref: '#/components/schemas/OpenAIResponseInputToolWebSearch'
          - $ref: '#/components/schemas/OpenAIResponseInputToolFileSearch'
          - $ref: '#/components/schemas/OpenAIResponseInputToolFunction'
          - $ref: '#/components/schemas/OpenAIResponseInputToolMCP'
          title: Tools
      type: object
      title: Body_create_openai_response_v1_responses_post
    BooleanType:
      properties:
        type:
          type: string
          const: boolean
          title: Type
          default: boolean
      type: object
      title: BooleanType
      description: 'Parameter type for boolean values.


        :param type: Discriminator type. Always "boolean"'
    ChatCompletionInputType:
      properties:
        type:
          type: string
          const: chat_completion_input
          title: Type
          default: chat_completion_input
      type: object
      title: ChatCompletionInputType
      description: 'Parameter type for chat completion input.


        :param type: Discriminator type. Always "chat_completion_input"'
    CompletionInputType:
      properties:
        type:
          type: string
          const: completion_input
          title: Type
          default: completion_input
      type: object
      title: CompletionInputType
      description: 'Parameter type for completion input.


        :param type: Discriminator type. Always "completion_input"'
    ConversationItemInclude:
      type: string
      enum:
      - web_search_call.action.sources
      - code_interpreter_call.outputs
      - computer_call_output.output.image_url
      - file_search_call.results
      - message.input_image.image_url
      - message.output_text.logprobs
      - reasoning.encrypted_content
      title: ConversationItemInclude
      description: Specify additional output data to include in the model response.
    DefaultRAGQueryGeneratorConfig:
      properties:
        type:
          type: string
          const: default
          title: Type
          default: default
        separator:
          type: string
          title: Separator
          default: ' '
      type: object
      title: DefaultRAGQueryGeneratorConfig
      description: 'Configuration for the default RAG query generator.


        :param type: Type of query generator, always ''default''

        :param separator: String separator used to join query terms'
    HealthInfo:
      properties:
        status:
          $ref: '#/components/schemas/HealthStatus'
      type: object
      required:
      - status
      title: HealthInfo
      description: 'Health status information for the service.


        :param status: Current health status of the service'
    HealthStatus:
      type: string
      enum:
      - OK
      - Error
      - Not Implemented
      title: HealthStatus
    JsonType:
      properties:
        type:
          type: string
          const: json
          title: Type
          default: json
      type: object
      title: JsonType
      description: 'Parameter type for JSON values.


        :param type: Discriminator type. Always "json"'
    LLMAsJudgeScoringFnParams:
      properties:
        type:
          type: string
          const: llm_as_judge
          title: Type
          default: llm_as_judge
        judge_model:
          type: string
          title: Judge Model
        prompt_template:
          anyOf:
          - type: string
          - type: 'null'
          title: Prompt Template
        judge_score_regexes:
          items:
            type: string
          type: array
          title: Judge Score Regexes
          description: Regexes to extract the answer from generated response
        aggregation_functions:
          items:
            $ref: '#/components/schemas/AggregationFunctionType'
          type: array
          title: Aggregation Functions
          description: Aggregation functions to apply to the scores of each row
      type: object
      required:
      - judge_model
      title: LLMAsJudgeScoringFnParams
      description: 'Parameters for LLM-as-judge scoring function configuration.

        :param type: The type of scoring function parameters, always llm_as_judge

        :param judge_model: Identifier of the LLM model to use as a judge for scoring

        :param prompt_template: (Optional) Custom prompt template for the judge model

        :param judge_score_regexes: Regexes to extract the answer from generated response

        :param aggregation_functions: Aggregation functions to apply to the scores
        of each row'
    LLMRAGQueryGeneratorConfig:
      properties:
        type:
          type: string
          const: llm
          title: Type
          default: llm
        model:
          type: string
          title: Model
        template:
          type: string
          title: Template
      type: object
      required:
      - model
      - template
      title: LLMRAGQueryGeneratorConfig
      description: 'Configuration for the LLM-based RAG query generator.


        :param type: Type of query generator, always ''llm''

        :param model: Name of the language model to use for query generation

        :param template: Template string for formatting the query generation prompt'
    ListModelsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Model'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListModelsResponse
    ListPromptsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Prompt'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListPromptsResponse
      description: Response model to list prompts.
    ListProvidersResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ProviderInfo'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListProvidersResponse
      description: 'Response containing a list of all available providers.


        :param data: List of provider information objects'
    ListRoutesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/RouteInfo'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListRoutesResponse
      description: 'Response containing a list of all available API routes.


        :param data: List of available route information objects'
    ListScoringFunctionsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ScoringFn-Output'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListScoringFunctionsResponse
    ListShieldsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Shield'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListShieldsResponse
    ListToolGroupsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ToolGroup'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListToolGroupsResponse
      description: 'Response containing a list of tool groups.


        :param data: List of tool groups'
    MCPListToolsTool:
      properties:
        input_schema:
          additionalProperties: true
          type: object
          title: Input Schema
        name:
          type: string
          title: Name
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
      type: object
      required:
      - input_schema
      - name
      title: MCPListToolsTool
      description: 'Tool definition returned by MCP list tools operation.


        :param input_schema: JSON schema defining the tool''s input parameters

        :param name: Name of the tool

        :param description: (Optional) Description of what the tool does'
    Model:
      properties:
        identifier:
          type: string
          title: Identifier
          description: Unique identifier for this resource in llama stack
        provider_resource_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Provider Resource Id
          description: Unique identifier for this resource in the provider
        provider_id:
          type: string
          title: Provider Id
          description: ID of the provider that owns this resource
        type:
          type: string
          const: model
          title: Type
          default: model
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
          description: Any additional metadata for this model
        model_type:
          $ref: '#/components/schemas/ModelType'
          default: llm
      type: object
      required:
      - identifier
      - provider_id
      title: Model
      description: 'A model resource representing an AI model registered in Llama
        Stack.


        :param type: The resource type, always ''model'' for model resources

        :param model_type: The type of model (LLM or embedding model)

        :param metadata: Any additional metadata for this model

        :param identifier: Unique identifier for this resource in llama stack

        :param provider_resource_id: Unique identifier for this resource in the provider

        :param provider_id: ID of the provider that owns this resource'
    ModelType:
      type: string
      enum:
      - llm
      - embedding
      - rerank
      title: ModelType
      description: 'Enumeration of supported model types in Llama Stack.

        :cvar llm: Large language model for text generation and completion

        :cvar embedding: Embedding model for converting text to vector representations

        :cvar rerank: Reranking model for reordering documents based on their relevance
        to a query'
    NumberType:
      properties:
        type:
          type: string
          const: number
          title: Type
          default: number
      type: object
      title: NumberType
      description: 'Parameter type for numeric values.


        :param type: Discriminator type. Always "number"'
    ObjectType:
      properties:
        type:
          type: string
          const: object
          title: Type
          default: object
      type: object
      title: ObjectType
      description: 'Parameter type for object values.


        :param type: Discriminator type. Always "object"'
    OpenAIAssistantMessageParam-Input:
      properties:
        role:
          type: string
          const: assistant
          title: Role
          default: assistant
        content:
          anyOf:
          - type: string
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          - type: 'null'
          title: Content
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
        tool_calls:
          anyOf:
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionToolCall'
            type: array
          - type: 'null'
          title: Tool Calls
      type: object
      title: OpenAIAssistantMessageParam
      description: 'A message containing the model''s (assistant) response in an OpenAI-compatible
        chat completion request.


        :param role: Must be "assistant" to identify this as the model''s response

        :param content: The content of the model''s response

        :param name: (Optional) The name of the assistant message participant.

        :param tool_calls: List of tool calls. Each tool call is an OpenAIChatCompletionToolCall
        object.'
    OpenAIAssistantMessageParam-Output:
      properties:
        role:
          type: string
          const: assistant
          title: Role
          default: assistant
        content:
          anyOf:
          - type: string
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          - type: 'null'
          title: Content
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
        tool_calls:
          anyOf:
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionToolCall'
            type: array
          - type: 'null'
          title: Tool Calls
      type: object
      title: OpenAIAssistantMessageParam
      description: 'A message containing the model''s (assistant) response in an OpenAI-compatible
        chat completion request.


        :param role: Must be "assistant" to identify this as the model''s response

        :param content: The content of the model''s response

        :param name: (Optional) The name of the assistant message participant.

        :param tool_calls: List of tool calls. Each tool call is an OpenAIChatCompletionToolCall
        object.'
    OpenAIChatCompletion:
      properties:
        id:
          type: string
          title: Id
        choices:
          items:
            $ref: '#/components/schemas/OpenAIChoice-Output'
          type: array
          title: Choices
        object:
          type: string
          const: chat.completion
          title: Object
          default: chat.completion
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        usage:
          anyOf:
          - $ref: '#/components/schemas/OpenAIChatCompletionUsage'
          - type: 'null'
      type: object
      required:
      - id
      - choices
      - created
      - model
      title: OpenAIChatCompletion
      description: 'Response from an OpenAI-compatible chat completion request.


        :param id: The ID of the chat completion

        :param choices: List of choices

        :param object: The object type, which will be "chat.completion"

        :param created: The Unix timestamp in seconds when the chat completion was
        created

        :param model: The model that was used to generate the chat completion

        :param usage: Token usage information for the completion'
    OpenAIChatCompletionContentPartImageParam:
      properties:
        type:
          type: string
          const: image_url
          title: Type
          default: image_url
        image_url:
          $ref: '#/components/schemas/OpenAIImageURL'
      type: object
      required:
      - image_url
      title: OpenAIChatCompletionContentPartImageParam
      description: 'Image content part for OpenAI-compatible chat completion messages.


        :param type: Must be "image_url" to identify this as image content

        :param image_url: Image URL specification and processing details'
    OpenAIChatCompletionContentPartTextParam:
      properties:
        type:
          type: string
          const: text
          title: Type
          default: text
        text:
          type: string
          title: Text
      type: object
      required:
      - text
      title: OpenAIChatCompletionContentPartTextParam
      description: 'Text content part for OpenAI-compatible chat completion messages.


        :param type: Must be "text" to identify this as text content

        :param text: The text content of the message'
    OpenAIChatCompletionRequestWithExtraBody:
      properties:
        model:
          type: string
          title: Model
        messages:
          items:
            oneOf:
            - $ref: '#/components/schemas/OpenAIUserMessageParam-Input'
            - $ref: '#/components/schemas/OpenAISystemMessageParam'
            - $ref: '#/components/schemas/OpenAIAssistantMessageParam-Input'
            - $ref: '#/components/schemas/OpenAIToolMessageParam'
            - $ref: '#/components/schemas/OpenAIDeveloperMessageParam'
            discriminator:
              propertyName: role
              mapping:
                assistant: '#/components/schemas/OpenAIAssistantMessageParam-Input'
                developer: '#/components/schemas/OpenAIDeveloperMessageParam'
                system: '#/components/schemas/OpenAISystemMessageParam'
                tool: '#/components/schemas/OpenAIToolMessageParam'
                user: '#/components/schemas/OpenAIUserMessageParam-Input'
          type: array
          minItems: 1
          title: Messages
        frequency_penalty:
          anyOf:
          - type: number
          - type: 'null'
          title: Frequency Penalty
        function_call:
          anyOf:
          - type: string
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Function Call
        functions:
          anyOf:
          - items:
              additionalProperties: true
              type: object
            type: array
          - type: 'null'
          title: Functions
        logit_bias:
          anyOf:
          - additionalProperties:
              type: number
            type: object
          - type: 'null'
          title: Logit Bias
        logprobs:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Logprobs
        max_completion_tokens:
          anyOf:
          - type: integer
          - type: 'null'
          title: Max Completion Tokens
        max_tokens:
          anyOf:
          - type: integer
          - type: 'null'
          title: Max Tokens
        n:
          anyOf:
          - type: integer
          - type: 'null'
          title: N
        parallel_tool_calls:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Parallel Tool Calls
        presence_penalty:
          anyOf:
          - type: number
          - type: 'null'
          title: Presence Penalty
        response_format:
          anyOf:
          - oneOf:
            - $ref: '#/components/schemas/OpenAIResponseFormatText'
            - $ref: '#/components/schemas/OpenAIResponseFormatJSONSchema'
            - $ref: '#/components/schemas/OpenAIResponseFormatJSONObject'
            discriminator:
              propertyName: type
              mapping:
                json_object: '#/components/schemas/OpenAIResponseFormatJSONObject'
                json_schema: '#/components/schemas/OpenAIResponseFormatJSONSchema'
                text: '#/components/schemas/OpenAIResponseFormatText'
          - type: 'null'
          title: Response Format
        seed:
          anyOf:
          - type: integer
          - type: 'null'
          title: Seed
        stop:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          - type: 'null'
          title: Stop
        stream:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Stream
        stream_options:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Stream Options
        temperature:
          anyOf:
          - type: number
          - type: 'null'
          title: Temperature
        tool_choice:
          anyOf:
          - type: string
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Tool Choice
        tools:
          anyOf:
          - items:
              additionalProperties: true
              type: object
            type: array
          - type: 'null'
          title: Tools
        top_logprobs:
          anyOf:
          - type: integer
          - type: 'null'
          title: Top Logprobs
        top_p:
          anyOf:
          - type: number
          - type: 'null'
          title: Top P
        user:
          anyOf:
          - type: string
          - type: 'null'
          title: User
      additionalProperties: true
      type: object
      required:
      - model
      - messages
      title: OpenAIChatCompletionRequestWithExtraBody
      description: 'Request parameters for OpenAI-compatible chat completion endpoint.


        :param model: The identifier of the model to use. The model must be registered
        with Llama Stack and available via the /models endpoint.

        :param messages: List of messages in the conversation.

        :param frequency_penalty: (Optional) The penalty for repeated tokens.

        :param function_call: (Optional) The function call to use.

        :param functions: (Optional) List of functions to use.

        :param logit_bias: (Optional) The logit bias to use.

        :param logprobs: (Optional) The log probabilities to use.

        :param max_completion_tokens: (Optional) The maximum number of tokens to generate.

        :param max_tokens: (Optional) The maximum number of tokens to generate.

        :param n: (Optional) The number of completions to generate.

        :param parallel_tool_calls: (Optional) Whether to parallelize tool calls.

        :param presence_penalty: (Optional) The penalty for repeated tokens.

        :param response_format: (Optional) The response format to use.

        :param seed: (Optional) The seed to use.

        :param stop: (Optional) The stop tokens to use.

        :param stream: (Optional) Whether to stream the response.

        :param stream_options: (Optional) The stream options to use.

        :param temperature: (Optional) The temperature to use.

        :param tool_choice: (Optional) The tool choice to use.

        :param tools: (Optional) The tools to use.

        :param top_logprobs: (Optional) The top log probabilities to use.

        :param top_p: (Optional) The top p to use.

        :param user: (Optional) The user to use.'
    OpenAIChatCompletionToolCall:
      properties:
        index:
          anyOf:
          - type: integer
          - type: 'null'
          title: Index
        id:
          anyOf:
          - type: string
          - type: 'null'
          title: Id
        type:
          type: string
          const: function
          title: Type
          default: function
        function:
          anyOf:
          - $ref: '#/components/schemas/OpenAIChatCompletionToolCallFunction'
          - type: 'null'
      type: object
      title: OpenAIChatCompletionToolCall
      description: 'Tool call specification for OpenAI-compatible chat completion
        responses.


        :param index: (Optional) Index of the tool call in the list

        :param id: (Optional) Unique identifier for the tool call

        :param type: Must be "function" to identify this as a function call

        :param function: (Optional) Function call details'
    OpenAIChatCompletionToolCallFunction:
      properties:
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
        arguments:
          anyOf:
          - type: string
          - type: 'null'
          title: Arguments
      type: object
      title: OpenAIChatCompletionToolCallFunction
      description: 'Function call details for OpenAI-compatible tool calls.


        :param name: (Optional) Name of the function to call

        :param arguments: (Optional) Arguments to pass to the function as a JSON string'
    OpenAIChatCompletionUsage:
      properties:
        prompt_tokens:
          type: integer
          title: Prompt Tokens
        completion_tokens:
          type: integer
          title: Completion Tokens
        total_tokens:
          type: integer
          title: Total Tokens
        prompt_tokens_details:
          anyOf:
          - $ref: '#/components/schemas/OpenAIChatCompletionUsagePromptTokensDetails'
          - type: 'null'
        completion_tokens_details:
          anyOf:
          - $ref: '#/components/schemas/OpenAIChatCompletionUsageCompletionTokensDetails'
          - type: 'null'
      type: object
      required:
      - prompt_tokens
      - completion_tokens
      - total_tokens
      title: OpenAIChatCompletionUsage
      description: 'Usage information for OpenAI chat completion.


        :param prompt_tokens: Number of tokens in the prompt

        :param completion_tokens: Number of tokens in the completion

        :param total_tokens: Total tokens used (prompt + completion)

        :param input_tokens_details: Detailed breakdown of input token usage

        :param output_tokens_details: Detailed breakdown of output token usage'
    OpenAIChatCompletionUsageCompletionTokensDetails:
      properties:
        reasoning_tokens:
          anyOf:
          - type: integer
          - type: 'null'
          title: Reasoning Tokens
      type: object
      title: OpenAIChatCompletionUsageCompletionTokensDetails
      description: 'Token details for output tokens in OpenAI chat completion usage.


        :param reasoning_tokens: Number of tokens used for reasoning (o1/o3 models)'
    OpenAIChatCompletionUsagePromptTokensDetails:
      properties:
        cached_tokens:
          anyOf:
          - type: integer
          - type: 'null'
          title: Cached Tokens
      type: object
      title: OpenAIChatCompletionUsagePromptTokensDetails
      description: 'Token details for prompt tokens in OpenAI chat completion usage.


        :param cached_tokens: Number of tokens retrieved from cache'
    OpenAIChoice-Output:
      properties:
        message:
          oneOf:
          - $ref: '#/components/schemas/OpenAIUserMessageParam-Output'
          - $ref: '#/components/schemas/OpenAISystemMessageParam'
          - $ref: '#/components/schemas/OpenAIAssistantMessageParam-Output'
          - $ref: '#/components/schemas/OpenAIToolMessageParam'
          - $ref: '#/components/schemas/OpenAIDeveloperMessageParam'
          title: Message
          discriminator:
            propertyName: role
            mapping:
              assistant: '#/components/schemas/OpenAIAssistantMessageParam-Output'
              developer: '#/components/schemas/OpenAIDeveloperMessageParam'
              system: '#/components/schemas/OpenAISystemMessageParam'
              tool: '#/components/schemas/OpenAIToolMessageParam'
              user: '#/components/schemas/OpenAIUserMessageParam-Output'
        finish_reason:
          type: string
          title: Finish Reason
        index:
          type: integer
          title: Index
        logprobs:
          anyOf:
          - $ref: '#/components/schemas/OpenAIChoiceLogprobs-Output'
          - type: 'null'
      type: object
      required:
      - message
      - finish_reason
      - index
      title: OpenAIChoice
      description: 'A choice from an OpenAI-compatible chat completion response.


        :param message: The message from the model

        :param finish_reason: The reason the model stopped generating

        :param index: The index of the choice

        :param logprobs: (Optional) The log probabilities for the tokens in the message'
    OpenAIChoiceLogprobs-Output:
      properties:
        content:
          anyOf:
          - items:
              $ref: '#/components/schemas/OpenAITokenLogProb'
            type: array
          - type: 'null'
          title: Content
        refusal:
          anyOf:
          - items:
              $ref: '#/components/schemas/OpenAITokenLogProb'
            type: array
          - type: 'null'
          title: Refusal
      type: object
      title: OpenAIChoiceLogprobs
      description: 'The log probabilities for the tokens in the message from an OpenAI-compatible
        chat completion response.


        :param content: (Optional) The log probabilities for the tokens in the message

        :param refusal: (Optional) The log probabilities for the tokens in the message'
    OpenAICompletion:
      properties:
        id:
          type: string
          title: Id
        choices:
          items:
            $ref: '#/components/schemas/OpenAICompletionChoice-Output'
          type: array
          title: Choices
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        object:
          type: string
          const: text_completion
          title: Object
          default: text_completion
      type: object
      required:
      - id
      - choices
      - created
      - model
      title: OpenAICompletion
      description: 'Response from an OpenAI-compatible completion request.


        :id: The ID of the completion

        :choices: List of choices

        :created: The Unix timestamp in seconds when the completion was created

        :model: The model that was used to generate the completion

        :object: The object type, which will be "text_completion"'
    OpenAICompletionChoice-Output:
      properties:
        finish_reason:
          type: string
          title: Finish Reason
        text:
          type: string
          title: Text
        index:
          type: integer
          title: Index
        logprobs:
          anyOf:
          - $ref: '#/components/schemas/OpenAIChoiceLogprobs-Output'
          - type: 'null'
      type: object
      required:
      - finish_reason
      - text
      - index
      title: OpenAICompletionChoice
      description: 'A choice from an OpenAI-compatible completion response.


        :finish_reason: The reason the model stopped generating

        :text: The text of the choice

        :index: The index of the choice

        :logprobs: (Optional) The log probabilities for the tokens in the choice'
    OpenAICompletionRequestWithExtraBody:
      properties:
        model:
          type: string
          title: Model
        prompt:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          - items:
              type: integer
            type: array
          - items:
              items:
                type: integer
              type: array
            type: array
          title: Prompt
        best_of:
          anyOf:
          - type: integer
          - type: 'null'
          title: Best Of
        echo:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Echo
        frequency_penalty:
          anyOf:
          - type: number
          - type: 'null'
          title: Frequency Penalty
        logit_bias:
          anyOf:
          - additionalProperties:
              type: number
            type: object
          - type: 'null'
          title: Logit Bias
        logprobs:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Logprobs
        max_tokens:
          anyOf:
          - type: integer
          - type: 'null'
          title: Max Tokens
        n:
          anyOf:
          - type: integer
          - type: 'null'
          title: N
        presence_penalty:
          anyOf:
          - type: number
          - type: 'null'
          title: Presence Penalty
        seed:
          anyOf:
          - type: integer
          - type: 'null'
          title: Seed
        stop:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          - type: 'null'
          title: Stop
        stream:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Stream
        stream_options:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Stream Options
        temperature:
          anyOf:
          - type: number
          - type: 'null'
          title: Temperature
        top_p:
          anyOf:
          - type: number
          - type: 'null'
          title: Top P
        user:
          anyOf:
          - type: string
          - type: 'null'
          title: User
        suffix:
          anyOf:
          - type: string
          - type: 'null'
          title: Suffix
      additionalProperties: true
      type: object
      required:
      - model
      - prompt
      title: OpenAICompletionRequestWithExtraBody
      description: 'Request parameters for OpenAI-compatible completion endpoint.


        :param model: The identifier of the model to use. The model must be registered
        with Llama Stack and available via the /models endpoint.

        :param prompt: The prompt to generate a completion for.

        :param best_of: (Optional) The number of completions to generate.

        :param echo: (Optional) Whether to echo the prompt.

        :param frequency_penalty: (Optional) The penalty for repeated tokens.

        :param logit_bias: (Optional) The logit bias to use.

        :param logprobs: (Optional) The log probabilities to use.

        :param max_tokens: (Optional) The maximum number of tokens to generate.

        :param n: (Optional) The number of completions to generate.

        :param presence_penalty: (Optional) The penalty for repeated tokens.

        :param seed: (Optional) The seed to use.

        :param stop: (Optional) The stop tokens to use.

        :param stream: (Optional) Whether to stream the response.

        :param stream_options: (Optional) The stream options to use.

        :param temperature: (Optional) The temperature to use.

        :param top_p: (Optional) The top p to use.

        :param user: (Optional) The user to use.

        :param suffix: (Optional) The suffix that should be appended to the completion.'
    OpenAICreateVectorStoreFileBatchRequestWithExtraBody:
      properties:
        file_ids:
          items:
            type: string
          type: array
          title: File Ids
        attributes:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Attributes
        chunking_strategy:
          anyOf:
          - oneOf:
            - $ref: '#/components/schemas/VectorStoreChunkingStrategyAuto'
            - $ref: '#/components/schemas/VectorStoreChunkingStrategyStatic'
            discriminator:
              propertyName: type
              mapping:
                auto: '#/components/schemas/VectorStoreChunkingStrategyAuto'
                static: '#/components/schemas/VectorStoreChunkingStrategyStatic'
          - type: 'null'
          title: Chunking Strategy
      additionalProperties: true
      type: object
      required:
      - file_ids
      title: OpenAICreateVectorStoreFileBatchRequestWithExtraBody
      description: 'Request to create a vector store file batch with extra_body support.


        :param file_ids: A list of File IDs that the vector store should use

        :param attributes: (Optional) Key-value attributes to store with the files

        :param chunking_strategy: (Optional) The chunking strategy used to chunk the
        file(s). Defaults to auto'
    OpenAICreateVectorStoreRequestWithExtraBody:
      properties:
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
        file_ids:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: File Ids
        expires_after:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Expires After
        chunking_strategy:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Chunking Strategy
        metadata:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Metadata
      additionalProperties: true
      type: object
      title: OpenAICreateVectorStoreRequestWithExtraBody
      description: 'Request to create a vector store with extra_body support.


        :param name: (Optional) A name for the vector store

        :param file_ids: List of file IDs to include in the vector store

        :param expires_after: (Optional) Expiration policy for the vector store

        :param chunking_strategy: (Optional) Strategy for splitting files into chunks

        :param metadata: Set of key-value pairs that can be attached to the vector
        store'
    OpenAIDeveloperMessageParam:
      properties:
        role:
          type: string
          const: developer
          title: Role
          default: developer
        content:
          anyOf:
          - type: string
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
      type: object
      required:
      - content
      title: OpenAIDeveloperMessageParam
      description: 'A message from the developer in an OpenAI-compatible chat completion
        request.


        :param role: Must be "developer" to identify this as a developer message

        :param content: The content of the developer message

        :param name: (Optional) The name of the developer message participant.'
    OpenAIEmbeddingData:
      properties:
        object:
          type: string
          const: embedding
          title: Object
          default: embedding
        embedding:
          anyOf:
          - items:
              type: number
            type: array
          - type: string
          title: Embedding
        index:
          type: integer
          title: Index
      type: object
      required:
      - embedding
      - index
      title: OpenAIEmbeddingData
      description: 'A single embedding data object from an OpenAI-compatible embeddings
        response.


        :param object: The object type, which will be "embedding"

        :param embedding: The embedding vector as a list of floats (when encoding_format="float")
        or as a base64-encoded string (when encoding_format="base64")

        :param index: The index of the embedding in the input list'
    OpenAIEmbeddingUsage:
      properties:
        prompt_tokens:
          type: integer
          title: Prompt Tokens
        total_tokens:
          type: integer
          title: Total Tokens
      type: object
      required:
      - prompt_tokens
      - total_tokens
      title: OpenAIEmbeddingUsage
      description: 'Usage information for an OpenAI-compatible embeddings response.


        :param prompt_tokens: The number of tokens in the input

        :param total_tokens: The total number of tokens used'
    OpenAIEmbeddingsRequestWithExtraBody:
      properties:
        model:
          type: string
          title: Model
        input:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          title: Input
        encoding_format:
          anyOf:
          - type: string
          - type: 'null'
          title: Encoding Format
          default: float
        dimensions:
          anyOf:
          - type: integer
          - type: 'null'
          title: Dimensions
        user:
          anyOf:
          - type: string
          - type: 'null'
          title: User
      additionalProperties: true
      type: object
      required:
      - model
      - input
      title: OpenAIEmbeddingsRequestWithExtraBody
      description: 'Request parameters for OpenAI-compatible embeddings endpoint.


        :param model: The identifier of the model to use. The model must be an embedding
        model registered with Llama Stack and available via the /models endpoint.

        :param input: Input text to embed, encoded as a string or array of strings.
        To embed multiple inputs in a single request, pass an array of strings.

        :param encoding_format: (Optional) The format to return the embeddings in.
        Can be either "float" or "base64". Defaults to "float".

        :param dimensions: (Optional) The number of dimensions the resulting output
        embeddings should have. Only supported in text-embedding-3 and later models.

        :param user: (Optional) A unique identifier representing your end-user, which
        can help OpenAI to monitor and detect abuse.'
    OpenAIEmbeddingsResponse:
      properties:
        object:
          type: string
          const: list
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/OpenAIEmbeddingData'
          type: array
          title: Data
        model:
          type: string
          title: Model
        usage:
          $ref: '#/components/schemas/OpenAIEmbeddingUsage'
      type: object
      required:
      - data
      - model
      - usage
      title: OpenAIEmbeddingsResponse
      description: 'Response from an OpenAI-compatible embeddings request.


        :param object: The object type, which will be "list"

        :param data: List of embedding data objects

        :param model: The model that was used to generate the embeddings

        :param usage: Usage information'
    OpenAIFile:
      properties:
        type:
          type: string
          const: file
          title: Type
          default: file
        file:
          $ref: '#/components/schemas/OpenAIFileFile'
      type: object
      required:
      - file
      title: OpenAIFile
    OpenAIFileFile:
      properties:
        file_data:
          anyOf:
          - type: string
          - type: 'null'
          title: File Data
        file_id:
          anyOf:
          - type: string
          - type: 'null'
          title: File Id
        filename:
          anyOf:
          - type: string
          - type: 'null'
          title: Filename
      type: object
      title: OpenAIFileFile
    OpenAIFileObject:
      properties:
        object:
          type: string
          const: file
          title: Object
          default: file
        id:
          type: string
          title: Id
        bytes:
          type: integer
          title: Bytes
        created_at:
          type: integer
          title: Created At
        expires_at:
          type: integer
          title: Expires At
        filename:
          type: string
          title: Filename
        purpose:
          $ref: '#/components/schemas/OpenAIFilePurpose'
      type: object
      required:
      - id
      - bytes
      - created_at
      - expires_at
      - filename
      - purpose
      title: OpenAIFileObject
      description: 'OpenAI File object as defined in the OpenAI Files API.


        :param object: The object type, which is always "file"

        :param id: The file identifier, which can be referenced in the API endpoints

        :param bytes: The size of the file, in bytes

        :param created_at: The Unix timestamp (in seconds) for when the file was created

        :param expires_at: The Unix timestamp (in seconds) for when the file expires

        :param filename: The name of the file

        :param purpose: The intended purpose of the file'
    OpenAIFilePurpose:
      type: string
      enum:
      - assistants
      - batch
      title: OpenAIFilePurpose
      description: Valid purpose values for OpenAI Files API.
    OpenAIImageURL:
      properties:
        url:
          type: string
          title: Url
        detail:
          anyOf:
          - type: string
          - type: 'null'
          title: Detail
      type: object
      required:
      - url
      title: OpenAIImageURL
      description: 'Image URL specification for OpenAI-compatible chat completion
        messages.


        :param url: URL of the image to include in the message

        :param detail: (Optional) Level of detail for image processing. Can be "low",
        "high", or "auto"'
    OpenAIJSONSchema:
      properties:
        name:
          type: string
          title: Name
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        strict:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Strict
        schema:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Schema
      type: object
      title: OpenAIJSONSchema
      description: 'JSON schema specification for OpenAI-compatible structured response
        format.


        :param name: Name of the schema

        :param description: (Optional) Description of the schema

        :param strict: (Optional) Whether to enforce strict adherence to the schema

        :param schema: (Optional) The JSON schema definition'
    OpenAIResponseAnnotationCitation:
      properties:
        type:
          type: string
          const: url_citation
          title: Type
          default: url_citation
        end_index:
          type: integer
          title: End Index
        start_index:
          type: integer
          title: Start Index
        title:
          type: string
          title: Title
        url:
          type: string
          title: Url
      type: object
      required:
      - end_index
      - start_index
      - title
      - url
      title: OpenAIResponseAnnotationCitation
      description: 'URL citation annotation for referencing external web resources.


        :param type: Annotation type identifier, always "url_citation"

        :param end_index: End position of the citation span in the content

        :param start_index: Start position of the citation span in the content

        :param title: Title of the referenced web resource

        :param url: URL of the referenced web resource'
    OpenAIResponseAnnotationContainerFileCitation:
      properties:
        type:
          type: string
          const: container_file_citation
          title: Type
          default: container_file_citation
        container_id:
          type: string
          title: Container Id
        end_index:
          type: integer
          title: End Index
        file_id:
          type: string
          title: File Id
        filename:
          type: string
          title: Filename
        start_index:
          type: integer
          title: Start Index
      type: object
      required:
      - container_id
      - end_index
      - file_id
      - filename
      - start_index
      title: OpenAIResponseAnnotationContainerFileCitation
    OpenAIResponseAnnotationFileCitation:
      properties:
        type:
          type: string
          const: file_citation
          title: Type
          default: file_citation
        file_id:
          type: string
          title: File Id
        filename:
          type: string
          title: Filename
        index:
          type: integer
          title: Index
      type: object
      required:
      - file_id
      - filename
      - index
      title: OpenAIResponseAnnotationFileCitation
      description: 'File citation annotation for referencing specific files in response
        content.


        :param type: Annotation type identifier, always "file_citation"

        :param file_id: Unique identifier of the referenced file

        :param filename: Name of the referenced file

        :param index: Position index of the citation within the content'
    OpenAIResponseAnnotationFilePath:
      properties:
        type:
          type: string
          const: file_path
          title: Type
          default: file_path
        file_id:
          type: string
          title: File Id
        index:
          type: integer
          title: Index
      type: object
      required:
      - file_id
      - index
      title: OpenAIResponseAnnotationFilePath
    OpenAIResponseContentPartRefusal:
      properties:
        type:
          type: string
          const: refusal
          title: Type
          default: refusal
        refusal:
          type: string
          title: Refusal
      type: object
      required:
      - refusal
      title: OpenAIResponseContentPartRefusal
      description: 'Refusal content within a streamed response part.


        :param type: Content part type identifier, always "refusal"

        :param refusal: Refusal text supplied by the model'
    OpenAIResponseFormatJSONObject:
      properties:
        type:
          type: string
          const: json_object
          title: Type
          default: json_object
      type: object
      title: OpenAIResponseFormatJSONObject
      description: 'JSON object response format for OpenAI-compatible chat completion
        requests.


        :param type: Must be "json_object" to indicate generic JSON object response
        format'
    OpenAIResponseFormatJSONSchema:
      properties:
        type:
          type: string
          const: json_schema
          title: Type
          default: json_schema
        json_schema:
          $ref: '#/components/schemas/OpenAIJSONSchema'
      type: object
      required:
      - json_schema
      title: OpenAIResponseFormatJSONSchema
      description: 'JSON schema response format for OpenAI-compatible chat completion
        requests.


        :param type: Must be "json_schema" to indicate structured JSON response format

        :param json_schema: The JSON schema specification for the response'
    OpenAIResponseFormatText:
      properties:
        type:
          type: string
          const: text
          title: Type
          default: text
      type: object
      title: OpenAIResponseFormatText
      description: 'Text response format for OpenAI-compatible chat completion requests.


        :param type: Must be "text" to indicate plain text response format'
    OpenAIResponseInputFunctionToolCallOutput:
      properties:
        call_id:
          type: string
          title: Call Id
        output:
          type: string
          title: Output
        type:
          type: string
          const: function_call_output
          title: Type
          default: function_call_output
        id:
          anyOf:
          - type: string
          - type: 'null'
          title: Id
        status:
          anyOf:
          - type: string
          - type: 'null'
          title: Status
      type: object
      required:
      - call_id
      - output
      title: OpenAIResponseInputFunctionToolCallOutput
      description: This represents the output of a function call that gets passed
        back to the model.
    OpenAIResponseInputMessageContentFile:
      properties:
        type:
          type: string
          const: input_file
          title: Type
          default: input_file
        file_data:
          anyOf:
          - type: string
          - type: 'null'
          title: File Data
        file_id:
          anyOf:
          - type: string
          - type: 'null'
          title: File Id
        file_url:
          anyOf:
          - type: string
          - type: 'null'
          title: File Url
        filename:
          anyOf:
          - type: string
          - type: 'null'
          title: Filename
      type: object
      title: OpenAIResponseInputMessageContentFile
      description: 'File content for input messages in OpenAI response format.


        :param type: The type of the input item. Always `input_file`.

        :param file_data: The data of the file to be sent to the model.

        :param file_id: (Optional) The ID of the file to be sent to the model.

        :param file_url: The URL of the file to be sent to the model.

        :param filename: The name of the file to be sent to the model.'
    OpenAIResponseInputMessageContentImage:
      properties:
        detail:
          anyOf:
          - type: string
            const: low
          - type: string
            const: high
          - type: string
            const: auto
          title: Detail
          default: auto
        type:
          type: string
          const: input_image
          title: Type
          default: input_image
        file_id:
          anyOf:
          - type: string
          - type: 'null'
          title: File Id
        image_url:
          anyOf:
          - type: string
          - type: 'null'
          title: Image Url
      type: object
      title: OpenAIResponseInputMessageContentImage
      description: 'Image content for input messages in OpenAI response format.


        :param detail: Level of detail for image processing, can be "low", "high",
        or "auto"

        :param type: Content type identifier, always "input_image"

        :param file_id: (Optional) The ID of the file to be sent to the model.

        :param image_url: (Optional) URL of the image content'
    OpenAIResponseInputMessageContentText:
      properties:
        text:
          type: string
          title: Text
        type:
          type: string
          const: input_text
          title: Type
          default: input_text
      type: object
      required:
      - text
      title: OpenAIResponseInputMessageContentText
      description: 'Text content for input messages in OpenAI response format.


        :param text: The text content of the input message

        :param type: Content type identifier, always "input_text"'
    OpenAIResponseInputToolFileSearch:
      properties:
        type:
          type: string
          const: file_search
          title: Type
          default: file_search
        vector_store_ids:
          items:
            type: string
          type: array
          title: Vector Store Ids
        filters:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Filters
        max_num_results:
          anyOf:
          - type: integer
            maximum: 50.0
            minimum: 1.0
          - type: 'null'
          title: Max Num Results
          default: 10
        ranking_options:
          anyOf:
          - $ref: '#/components/schemas/SearchRankingOptions'
          - type: 'null'
      type: object
      required:
      - vector_store_ids
      title: OpenAIResponseInputToolFileSearch
      description: 'File search tool configuration for OpenAI response inputs.


        :param type: Tool type identifier, always "file_search"

        :param vector_store_ids: List of vector store identifiers to search within

        :param filters: (Optional) Additional filters to apply to the search

        :param max_num_results: (Optional) Maximum number of search results to return
        (1-50)

        :param ranking_options: (Optional) Options for ranking and scoring search
        results'
    OpenAIResponseInputToolFunction:
      properties:
        type:
          type: string
          const: function
          title: Type
          default: function
        name:
          type: string
          title: Name
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        parameters:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Parameters
        strict:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Strict
      type: object
      required:
      - name
      - parameters
      title: OpenAIResponseInputToolFunction
      description: 'Function tool configuration for OpenAI response inputs.


        :param type: Tool type identifier, always "function"

        :param name: Name of the function that can be called

        :param description: (Optional) Description of what the function does

        :param parameters: (Optional) JSON schema defining the function''s parameters

        :param strict: (Optional) Whether to enforce strict parameter validation'
    OpenAIResponseInputToolMCP:
      properties:
        type:
          type: string
          const: mcp
          title: Type
          default: mcp
        server_label:
          type: string
          title: Server Label
        server_url:
          type: string
          title: Server Url
        headers:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Headers
        require_approval:
          anyOf:
          - type: string
            const: always
          - type: string
            const: never
          - $ref: '#/components/schemas/ApprovalFilter'
          title: Require Approval
          default: never
        allowed_tools:
          anyOf:
          - items:
              type: string
            type: array
          - $ref: '#/components/schemas/AllowedToolsFilter'
          - type: 'null'
          title: Allowed Tools
      type: object
      required:
      - server_label
      - server_url
      title: OpenAIResponseInputToolMCP
      description: 'Model Context Protocol (MCP) tool configuration for OpenAI response
        inputs.


        :param type: Tool type identifier, always "mcp"

        :param server_label: Label to identify this MCP server

        :param server_url: URL endpoint of the MCP server

        :param headers: (Optional) HTTP headers to include when connecting to the
        server

        :param require_approval: Approval requirement for tool calls ("always", "never",
        or filter)

        :param allowed_tools: (Optional) Restriction on which tools can be used from
        this server'
    OpenAIResponseInputToolWebSearch:
      properties:
        type:
          anyOf:
          - type: string
            const: web_search
          - type: string
            const: web_search_preview
          - type: string
            const: web_search_preview_2025_03_11
          title: Type
          default: web_search
        search_context_size:
          anyOf:
          - type: string
            pattern: ^low|medium|high$
          - type: 'null'
          title: Search Context Size
          default: medium
      type: object
      title: OpenAIResponseInputToolWebSearch
      description: 'Web search tool configuration for OpenAI response inputs.


        :param type: Web search tool type variant to use

        :param search_context_size: (Optional) Size of search context, must be "low",
        "medium", or "high"'
    OpenAIResponseMCPApprovalRequest:
      properties:
        arguments:
          type: string
          title: Arguments
        id:
          type: string
          title: Id
        name:
          type: string
          title: Name
        server_label:
          type: string
          title: Server Label
        type:
          type: string
          const: mcp_approval_request
          title: Type
          default: mcp_approval_request
      type: object
      required:
      - arguments
      - id
      - name
      - server_label
      title: OpenAIResponseMCPApprovalRequest
      description: A request for human approval of a tool invocation.
    OpenAIResponseMCPApprovalResponse:
      properties:
        approval_request_id:
          type: string
          title: Approval Request Id
        approve:
          type: boolean
          title: Approve
        type:
          type: string
          const: mcp_approval_response
          title: Type
          default: mcp_approval_response
        id:
          anyOf:
          - type: string
          - type: 'null'
          title: Id
        reason:
          anyOf:
          - type: string
          - type: 'null'
          title: Reason
      type: object
      required:
      - approval_request_id
      - approve
      title: OpenAIResponseMCPApprovalResponse
      description: A response to an MCP approval request.
    OpenAIResponseMessage:
      properties:
        content:
          anyOf:
          - type: string
          - items:
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentText'
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentImage'
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentFile'
              discriminator:
                propertyName: type
                mapping:
                  input_file: '#/components/schemas/OpenAIResponseInputMessageContentFile'
                  input_image: '#/components/schemas/OpenAIResponseInputMessageContentImage'
                  input_text: '#/components/schemas/OpenAIResponseInputMessageContentText'
            type: array
          - items:
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageContentOutputText'
              - $ref: '#/components/schemas/OpenAIResponseContentPartRefusal'
              discriminator:
                propertyName: type
                mapping:
                  output_text: '#/components/schemas/OpenAIResponseOutputMessageContentOutputText'
                  refusal: '#/components/schemas/OpenAIResponseContentPartRefusal'
            type: array
          title: Content
        role:
          anyOf:
          - type: string
            const: system
          - type: string
            const: developer
          - type: string
            const: user
          - type: string
            const: assistant
          title: Role
        type:
          type: string
          const: message
          title: Type
          default: message
        id:
          anyOf:
          - type: string
          - type: 'null'
          title: Id
        status:
          anyOf:
          - type: string
          - type: 'null'
          title: Status
      type: object
      required:
      - content
      - role
      title: OpenAIResponseMessage
      description: 'Corresponds to the various Message types in the Responses API.

        They are all under one type because the Responses API gives them all

        the same "type" value, and there is no way to tell them apart in certain

        scenarios.'
    OpenAIResponseOutputMessageContentOutputText:
      properties:
        text:
          type: string
          title: Text
        type:
          type: string
          const: output_text
          title: Type
          default: output_text
        annotations:
          items:
            oneOf:
            - $ref: '#/components/schemas/OpenAIResponseAnnotationFileCitation'
            - $ref: '#/components/schemas/OpenAIResponseAnnotationCitation'
            - $ref: '#/components/schemas/OpenAIResponseAnnotationContainerFileCitation'
            - $ref: '#/components/schemas/OpenAIResponseAnnotationFilePath'
            discriminator:
              propertyName: type
              mapping:
                container_file_citation: '#/components/schemas/OpenAIResponseAnnotationContainerFileCitation'
                file_citation: '#/components/schemas/OpenAIResponseAnnotationFileCitation'
                file_path: '#/components/schemas/OpenAIResponseAnnotationFilePath'
                url_citation: '#/components/schemas/OpenAIResponseAnnotationCitation'
          type: array
          title: Annotations
      type: object
      required:
      - text
      title: OpenAIResponseOutputMessageContentOutputText
    OpenAIResponseOutputMessageFileSearchToolCall:
      properties:
        id:
          type: string
          title: Id
        queries:
          items:
            type: string
          type: array
          title: Queries
        status:
          type: string
          title: Status
        type:
          type: string
          const: file_search_call
          title: Type
          default: file_search_call
        results:
          anyOf:
          - items:
              $ref: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCallResults'
            type: array
          - type: 'null'
          title: Results
      type: object
      required:
      - id
      - queries
      - status
      title: OpenAIResponseOutputMessageFileSearchToolCall
      description: 'File search tool call output message for OpenAI responses.


        :param id: Unique identifier for this tool call

        :param queries: List of search queries executed

        :param status: Current status of the file search operation

        :param type: Tool call type identifier, always "file_search_call"

        :param results: (Optional) Search results returned by the file search operation'
    OpenAIResponseOutputMessageFileSearchToolCallResults:
      properties:
        attributes:
          additionalProperties: true
          type: object
          title: Attributes
        file_id:
          type: string
          title: File Id
        filename:
          type: string
          title: Filename
        score:
          type: number
          title: Score
        text:
          type: string
          title: Text
      type: object
      required:
      - attributes
      - file_id
      - filename
      - score
      - text
      title: OpenAIResponseOutputMessageFileSearchToolCallResults
      description: 'Search results returned by the file search operation.


        :param attributes: (Optional) Key-value attributes associated with the file

        :param file_id: Unique identifier of the file containing the result

        :param filename: Name of the file containing the result

        :param score: Relevance score for this search result (between 0 and 1)

        :param text: Text content of the search result'
    OpenAIResponseOutputMessageFunctionToolCall:
      properties:
        call_id:
          type: string
          title: Call Id
        name:
          type: string
          title: Name
        arguments:
          type: string
          title: Arguments
        type:
          type: string
          const: function_call
          title: Type
          default: function_call
        id:
          anyOf:
          - type: string
          - type: 'null'
          title: Id
        status:
          anyOf:
          - type: string
          - type: 'null'
          title: Status
      type: object
      required:
      - call_id
      - name
      - arguments
      title: OpenAIResponseOutputMessageFunctionToolCall
      description: 'Function tool call output message for OpenAI responses.


        :param call_id: Unique identifier for the function call

        :param name: Name of the function being called

        :param arguments: JSON string containing the function arguments

        :param type: Tool call type identifier, always "function_call"

        :param id: (Optional) Additional identifier for the tool call

        :param status: (Optional) Current status of the function call execution'
    OpenAIResponseOutputMessageMCPCall:
      properties:
        id:
          type: string
          title: Id
        type:
          type: string
          const: mcp_call
          title: Type
          default: mcp_call
        arguments:
          type: string
          title: Arguments
        name:
          type: string
          title: Name
        server_label:
          type: string
          title: Server Label
        error:
          anyOf:
          - type: string
          - type: 'null'
          title: Error
        output:
          anyOf:
          - type: string
          - type: 'null'
          title: Output
      type: object
      required:
      - id
      - arguments
      - name
      - server_label
      title: OpenAIResponseOutputMessageMCPCall
      description: 'Model Context Protocol (MCP) call output message for OpenAI responses.


        :param id: Unique identifier for this MCP call

        :param type: Tool call type identifier, always "mcp_call"

        :param arguments: JSON string containing the MCP call arguments

        :param name: Name of the MCP method being called

        :param server_label: Label identifying the MCP server handling the call

        :param error: (Optional) Error message if the MCP call failed

        :param output: (Optional) Output result from the successful MCP call'
    OpenAIResponseOutputMessageMCPListTools:
      properties:
        id:
          type: string
          title: Id
        type:
          type: string
          const: mcp_list_tools
          title: Type
          default: mcp_list_tools
        server_label:
          type: string
          title: Server Label
        tools:
          items:
            $ref: '#/components/schemas/MCPListToolsTool'
          type: array
          title: Tools
      type: object
      required:
      - id
      - server_label
      - tools
      title: OpenAIResponseOutputMessageMCPListTools
      description: 'MCP list tools output message containing available tools from
        an MCP server.


        :param id: Unique identifier for this MCP list tools operation

        :param type: Tool call type identifier, always "mcp_list_tools"

        :param server_label: Label identifying the MCP server providing the tools

        :param tools: List of available tools provided by the MCP server'
    OpenAIResponseOutputMessageWebSearchToolCall:
      properties:
        id:
          type: string
          title: Id
        status:
          type: string
          title: Status
        type:
          type: string
          const: web_search_call
          title: Type
          default: web_search_call
      type: object
      required:
      - id
      - status
      title: OpenAIResponseOutputMessageWebSearchToolCall
      description: 'Web search tool call output message for OpenAI responses.


        :param id: Unique identifier for this tool call

        :param status: Current status of the web search operation

        :param type: Tool call type identifier, always "web_search_call"'
    OpenAIResponsePrompt:
      properties:
        id:
          type: string
          title: Id
        variables:
          anyOf:
          - additionalProperties:
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentText'
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentImage'
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentFile'
              discriminator:
                propertyName: type
                mapping:
                  input_file: '#/components/schemas/OpenAIResponseInputMessageContentFile'
                  input_image: '#/components/schemas/OpenAIResponseInputMessageContentImage'
                  input_text: '#/components/schemas/OpenAIResponseInputMessageContentText'
            type: object
          - type: 'null'
          title: Variables
        version:
          anyOf:
          - type: string
          - type: 'null'
          title: Version
      type: object
      required:
      - id
      title: OpenAIResponsePrompt
      description: 'OpenAI compatible Prompt object that is used in OpenAI responses.


        :param id: Unique identifier of the prompt template

        :param variables: Dictionary of variable names to OpenAIResponseInputMessageContent
        structure for template substitution. The substitution values can either be
        strings, or other Response input types

        like images or files.

        :param version: Version number of the prompt to use (defaults to latest if
        not specified)'
    OpenAIResponseText:
      properties:
        format:
          anyOf:
          - $ref: '#/components/schemas/OpenAIResponseTextFormat'
          - type: 'null'
      type: object
      title: OpenAIResponseText
      description: 'Text response configuration for OpenAI responses.


        :param format: (Optional) Text format configuration specifying output format
        requirements'
    OpenAIResponseTextFormat:
      properties:
        type:
          anyOf:
          - type: string
            const: text
          - type: string
            const: json_schema
          - type: string
            const: json_object
          title: Type
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
        schema:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Schema
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        strict:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Strict
      type: object
      title: OpenAIResponseTextFormat
      description: 'Configuration for Responses API text format.


        :param type: Must be "text", "json_schema", or "json_object" to identify the
        format type

        :param name: The name of the response format. Only used for json_schema.

        :param schema: The JSON schema the response should conform to. In a Python
        SDK, this is often a `pydantic` model. Only used for json_schema.

        :param description: (Optional) A description of the response format. Only
        used for json_schema.

        :param strict: (Optional) Whether to strictly enforce the JSON schema. If
        true, the response must match the schema exactly. Only used for json_schema.'
    OpenAISystemMessageParam:
      properties:
        role:
          type: string
          const: system
          title: Role
          default: system
        content:
          anyOf:
          - type: string
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
      type: object
      required:
      - content
      title: OpenAISystemMessageParam
      description: 'A system message providing instructions or context to the model.


        :param role: Must be "system" to identify this as a system message

        :param content: The content of the "system prompt". If multiple system messages
        are provided, they are concatenated. The underlying Llama Stack code may also
        add other system messages (for example, for formatting tool definitions).

        :param name: (Optional) The name of the system message participant.'
    OpenAITokenLogProb:
      properties:
        token:
          type: string
          title: Token
        bytes:
          anyOf:
          - items:
              type: integer
            type: array
          - type: 'null'
          title: Bytes
        logprob:
          type: number
          title: Logprob
        top_logprobs:
          items:
            $ref: '#/components/schemas/OpenAITopLogProb'
          type: array
          title: Top Logprobs
      type: object
      required:
      - token
      - logprob
      - top_logprobs
      title: OpenAITokenLogProb
      description: 'The log probability for a token from an OpenAI-compatible chat
        completion response.


        :token: The token

        :bytes: (Optional) The bytes for the token

        :logprob: The log probability of the token

        :top_logprobs: The top log probabilities for the token'
    OpenAIToolMessageParam:
      properties:
        role:
          type: string
          const: tool
          title: Role
          default: tool
        tool_call_id:
          type: string
          title: Tool Call Id
        content:
          anyOf:
          - type: string
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
      type: object
      required:
      - tool_call_id
      - content
      title: OpenAIToolMessageParam
      description: 'A message representing the result of a tool invocation in an OpenAI-compatible
        chat completion request.


        :param role: Must be "tool" to identify this as a tool response

        :param tool_call_id: Unique identifier for the tool call this response is
        for

        :param content: The response content from the tool'
    OpenAITopLogProb:
      properties:
        token:
          type: string
          title: Token
        bytes:
          anyOf:
          - items:
              type: integer
            type: array
          - type: 'null'
          title: Bytes
        logprob:
          type: number
          title: Logprob
      type: object
      required:
      - token
      - logprob
      title: OpenAITopLogProb
      description: 'The top log probability for a token from an OpenAI-compatible
        chat completion response.


        :token: The token

        :bytes: (Optional) The bytes for the token

        :logprob: The log probability of the token'
    OpenAIUserMessageParam-Input:
      properties:
        role:
          type: string
          const: user
          title: Role
          default: user
        content:
          anyOf:
          - type: string
          - items:
              oneOf:
              - $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
              - $ref: '#/components/schemas/OpenAIChatCompletionContentPartImageParam'
              - $ref: '#/components/schemas/OpenAIFile'
              discriminator:
                propertyName: type
                mapping:
                  file: '#/components/schemas/OpenAIFile'
                  image_url: '#/components/schemas/OpenAIChatCompletionContentPartImageParam'
                  text: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
      type: object
      required:
      - content
      title: OpenAIUserMessageParam
      description: 'A message from the user in an OpenAI-compatible chat completion
        request.


        :param role: Must be "user" to identify this as a user message

        :param content: The content of the message, which can include text and other
        media

        :param name: (Optional) The name of the user message participant.'
    OpenAIUserMessageParam-Output:
      properties:
        role:
          type: string
          const: user
          title: Role
          default: user
        content:
          anyOf:
          - type: string
          - items:
              oneOf:
              - $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
              - $ref: '#/components/schemas/OpenAIChatCompletionContentPartImageParam'
              - $ref: '#/components/schemas/OpenAIFile'
              discriminator:
                propertyName: type
                mapping:
                  file: '#/components/schemas/OpenAIFile'
                  image_url: '#/components/schemas/OpenAIChatCompletionContentPartImageParam'
                  text: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
      type: object
      required:
      - content
      title: OpenAIUserMessageParam
      description: 'A message from the user in an OpenAI-compatible chat completion
        request.


        :param role: Must be "user" to identify this as a user message

        :param content: The content of the message, which can include text and other
        media

        :param name: (Optional) The name of the user message participant.'
    Order:
      type: string
      enum:
      - asc
      - desc
      title: Order
      description: 'Sort order for paginated responses.

        :cvar asc: Ascending order

        :cvar desc: Descending order'
    Prompt:
      properties:
        prompt:
          anyOf:
          - type: string
          - type: 'null'
          title: Prompt
          description: The system prompt with variable placeholders
        version:
          type: integer
          minimum: 1.0
          title: Version
          description: Version (integer starting at 1, incremented on save)
        prompt_id:
          type: string
          title: Prompt Id
          description: Unique identifier in format 'pmpt_<48-digit-hash>'
        variables:
          items:
            type: string
          type: array
          title: Variables
          description: List of variable names that can be used in the prompt template
        is_default:
          type: boolean
          title: Is Default
          description: Boolean indicating whether this version is the default version
          default: false
      type: object
      required:
      - version
      - prompt_id
      title: Prompt
      description: 'A prompt resource representing a stored OpenAI Compatible prompt
        template in Llama Stack.


        :param prompt: The system prompt text with variable placeholders. Variables
        are only supported when using the Responses API.

        :param version: Version (integer starting at 1, incremented on save)

        :param prompt_id: Unique identifier formatted as ''pmpt_<48-digit-hash>''

        :param variables: List of prompt variable names that can be used in the prompt
        template

        :param is_default: Boolean indicating whether this version is the default
        version for this prompt'
    ProviderInfo:
      properties:
        api:
          type: string
          title: Api
        provider_id:
          type: string
          title: Provider Id
        provider_type:
          type: string
          title: Provider Type
        config:
          additionalProperties: true
          type: object
          title: Config
        health:
          additionalProperties: true
          type: object
          title: Health
      type: object
      required:
      - api
      - provider_id
      - provider_type
      - config
      - health
      title: ProviderInfo
      description: 'Information about a registered provider including its configuration
        and health status.


        :param api: The API name this provider implements

        :param provider_id: Unique identifier for the provider

        :param provider_type: The type of provider implementation

        :param config: Configuration parameters for the provider

        :param health: Current health status of the provider'
    RAGQueryConfig:
      properties:
        query_generator_config:
          oneOf:
          - $ref: '#/components/schemas/DefaultRAGQueryGeneratorConfig'
          - $ref: '#/components/schemas/LLMRAGQueryGeneratorConfig'
          title: Query Generator Config
          default:
            type: default
            separator: ' '
          discriminator:
            propertyName: type
            mapping:
              default: '#/components/schemas/DefaultRAGQueryGeneratorConfig'
              llm: '#/components/schemas/LLMRAGQueryGeneratorConfig'
        max_tokens_in_context:
          type: integer
          title: Max Tokens In Context
          default: 4096
        max_chunks:
          type: integer
          title: Max Chunks
          default: 5
        chunk_template:
          type: string
          title: Chunk Template
          default: 'Result {index}

            Content: {chunk.content}

            Metadata: {metadata}

            '
        mode:
          anyOf:
          - $ref: '#/components/schemas/RAGSearchMode'
          - type: 'null'
          default: vector
        ranker:
          anyOf:
          - oneOf:
            - $ref: '#/components/schemas/RRFRanker'
            - $ref: '#/components/schemas/WeightedRanker'
            discriminator:
              propertyName: type
              mapping:
                rrf: '#/components/schemas/RRFRanker'
                weighted: '#/components/schemas/WeightedRanker'
          - type: 'null'
          title: Ranker
      type: object
      title: RAGQueryConfig
      description: "Configuration for the RAG query generation.\n\n:param query_generator_config:\
        \ Configuration for the query generator.\n:param max_tokens_in_context: Maximum\
        \ number of tokens in the context.\n:param max_chunks: Maximum number of chunks\
        \ to retrieve.\n:param chunk_template: Template for formatting each retrieved\
        \ chunk in the context.\n    Available placeholders: {index} (1-based chunk\
        \ ordinal), {chunk.content} (chunk content string), {metadata} (chunk metadata\
        \ dict).\n    Default: \"Result {index}\\nContent: {chunk.content}\\nMetadata:\
        \ {metadata}\\n\"\n:param mode: Search mode for retrieval\u2014either \"vector\"\
        , \"keyword\", or \"hybrid\". Default \"vector\".\n:param ranker: Configuration\
        \ for the ranker to use in hybrid search. Defaults to RRF ranker."
    RAGSearchMode:
      type: string
      enum:
      - vector
      - keyword
      - hybrid
      title: RAGSearchMode
      description: 'Search modes for RAG query retrieval:

        - VECTOR: Uses vector similarity search for semantic matching

        - KEYWORD: Uses keyword-based search for exact matching

        - HYBRID: Combines both vector and keyword search for better results'
    RRFRanker:
      properties:
        type:
          type: string
          const: rrf
          title: Type
          default: rrf
        impact_factor:
          type: number
          title: Impact Factor
          default: 60.0
          minimum: 0.0
      type: object
      title: RRFRanker
      description: "Reciprocal Rank Fusion (RRF) ranker configuration.\n\n:param type:\
        \ The type of ranker, always \"rrf\"\n:param impact_factor: The impact factor\
        \ for RRF scoring. Higher values give more weight to higher-ranked results.\n\
        \                     Must be greater than 0"
    RegexParserScoringFnParams:
      properties:
        type:
          type: string
          const: regex_parser
          title: Type
          default: regex_parser
        parsing_regexes:
          items:
            type: string
          type: array
          title: Parsing Regexes
          description: Regex to extract the answer from generated response
        aggregation_functions:
          items:
            $ref: '#/components/schemas/AggregationFunctionType'
          type: array
          title: Aggregation Functions
          description: Aggregation functions to apply to the scores of each row
      type: object
      title: RegexParserScoringFnParams
      description: 'Parameters for regex parser scoring function configuration.

        :param type: The type of scoring function parameters, always regex_parser

        :param parsing_regexes: Regex to extract the answer from generated response

        :param aggregation_functions: Aggregation functions to apply to the scores
        of each row'
    RouteInfo:
      properties:
        route:
          type: string
          title: Route
        method:
          type: string
          title: Method
        provider_types:
          items:
            type: string
          type: array
          title: Provider Types
      type: object
      required:
      - route
      - method
      - provider_types
      title: RouteInfo
      description: 'Information about an API route including its path, method, and
        implementing providers.


        :param route: The API endpoint path

        :param method: HTTP method for the route

        :param provider_types: List of provider types that implement this route'
    ScoringFn-Output:
      properties:
        identifier:
          type: string
          title: Identifier
          description: Unique identifier for this resource in llama stack
        provider_resource_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Provider Resource Id
          description: Unique identifier for this resource in the provider
        provider_id:
          type: string
          title: Provider Id
          description: ID of the provider that owns this resource
        type:
          type: string
          const: scoring_function
          title: Type
          default: scoring_function
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
          description: Any additional metadata for this definition
        return_type:
          oneOf:
          - $ref: '#/components/schemas/StringType'
          - $ref: '#/components/schemas/NumberType'
          - $ref: '#/components/schemas/BooleanType'
          - $ref: '#/components/schemas/ArrayType'
          - $ref: '#/components/schemas/ObjectType'
          - $ref: '#/components/schemas/JsonType'
          - $ref: '#/components/schemas/UnionType'
          - $ref: '#/components/schemas/ChatCompletionInputType'
          - $ref: '#/components/schemas/CompletionInputType'
          - $ref: '#/components/schemas/AgentTurnInputType'
          title: Return Type
          description: The return type of the deterministic function
          discriminator:
            propertyName: type
            mapping:
              agent_turn_input: '#/components/schemas/AgentTurnInputType'
              array: '#/components/schemas/ArrayType'
              boolean: '#/components/schemas/BooleanType'
              chat_completion_input: '#/components/schemas/ChatCompletionInputType'
              completion_input: '#/components/schemas/CompletionInputType'
              json: '#/components/schemas/JsonType'
              number: '#/components/schemas/NumberType'
              object: '#/components/schemas/ObjectType'
              string: '#/components/schemas/StringType'
              union: '#/components/schemas/UnionType'
        params:
          anyOf:
          - oneOf:
            - $ref: '#/components/schemas/LLMAsJudgeScoringFnParams'
            - $ref: '#/components/schemas/RegexParserScoringFnParams'
            - $ref: '#/components/schemas/BasicScoringFnParams'
            discriminator:
              propertyName: type
              mapping:
                basic: '#/components/schemas/BasicScoringFnParams'
                llm_as_judge: '#/components/schemas/LLMAsJudgeScoringFnParams'
                regex_parser: '#/components/schemas/RegexParserScoringFnParams'
          - type: 'null'
          title: Params
          description: The parameters for the scoring function for benchmark eval,
            these can be overridden for app eval
      type: object
      required:
      - identifier
      - provider_id
      - return_type
      title: ScoringFn
      description: 'A scoring function resource for evaluating model outputs.

        :param type: The resource type, always scoring_function'
    SearchRankingOptions:
      properties:
        ranker:
          anyOf:
          - type: string
          - type: 'null'
          title: Ranker
        score_threshold:
          anyOf:
          - type: number
          - type: 'null'
          title: Score Threshold
          default: 0.0
      type: object
      title: SearchRankingOptions
      description: 'Options for ranking and filtering search results.


        :param ranker: (Optional) Name of the ranking algorithm to use

        :param score_threshold: (Optional) Minimum relevance score threshold for results'
    Shield:
      properties:
        identifier:
          type: string
          title: Identifier
          description: Unique identifier for this resource in llama stack
        provider_resource_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Provider Resource Id
          description: Unique identifier for this resource in the provider
        provider_id:
          type: string
          title: Provider Id
          description: ID of the provider that owns this resource
        type:
          type: string
          const: shield
          title: Type
          default: shield
        params:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Params
      type: object
      required:
      - identifier
      - provider_id
      title: Shield
      description: 'A safety shield resource that can be used to check content.


        :param params: (Optional) Configuration parameters for the shield

        :param type: The resource type, always shield'
    StringType:
      properties:
        type:
          type: string
          const: string
          title: Type
          default: string
      type: object
      title: StringType
      description: 'Parameter type for string values.


        :param type: Discriminator type. Always "string"'
    ToolDef:
      properties:
        toolgroup_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Toolgroup Id
        name:
          type: string
          title: Name
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        input_schema:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Input Schema
        output_schema:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Output Schema
        metadata:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Metadata
      type: object
      required:
      - name
      title: ToolDef
      description: 'Tool definition used in runtime contexts.


        :param name: Name of the tool

        :param description: (Optional) Human-readable description of what the tool
        does

        :param input_schema: (Optional) JSON Schema for tool inputs (MCP inputSchema)

        :param output_schema: (Optional) JSON Schema for tool outputs (MCP outputSchema)

        :param metadata: (Optional) Additional metadata about the tool

        :param toolgroup_id: (Optional) ID of the tool group this tool belongs to'
    ToolGroup:
      properties:
        identifier:
          type: string
          title: Identifier
          description: Unique identifier for this resource in llama stack
        provider_resource_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Provider Resource Id
          description: Unique identifier for this resource in the provider
        provider_id:
          type: string
          title: Provider Id
          description: ID of the provider that owns this resource
        type:
          type: string
          const: tool_group
          title: Type
          default: tool_group
        mcp_endpoint:
          anyOf:
          - $ref: '#/components/schemas/URL'
          - type: 'null'
        args:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Args
      type: object
      required:
      - identifier
      - provider_id
      title: ToolGroup
      description: 'A group of related tools managed together.


        :param type: Type of resource, always ''tool_group''

        :param mcp_endpoint: (Optional) Model Context Protocol endpoint for remote
        tools

        :param args: (Optional) Additional arguments for the tool group'
    URL:
      properties:
        uri:
          type: string
          title: Uri
      type: object
      required:
      - uri
      title: URL
      description: 'A URL reference to external content.


        :param uri: The URL string pointing to the resource'
    UnionType:
      properties:
        type:
          type: string
          const: union
          title: Type
          default: union
      type: object
      title: UnionType
      description: 'Parameter type for union values.


        :param type: Discriminator type. Always "union"'
    VectorStoreChunkingStrategyAuto:
      properties:
        type:
          type: string
          const: auto
          title: Type
          default: auto
      type: object
      title: VectorStoreChunkingStrategyAuto
      description: 'Automatic chunking strategy for vector store files.


        :param type: Strategy type, always "auto" for automatic chunking'
    VectorStoreChunkingStrategyStatic:
      properties:
        type:
          type: string
          const: static
          title: Type
          default: static
        static:
          $ref: '#/components/schemas/VectorStoreChunkingStrategyStaticConfig'
      type: object
      required:
      - static
      title: VectorStoreChunkingStrategyStatic
      description: 'Static chunking strategy with configurable parameters.


        :param type: Strategy type, always "static" for static chunking

        :param static: Configuration parameters for the static chunking strategy'
    VectorStoreChunkingStrategyStaticConfig:
      properties:
        chunk_overlap_tokens:
          type: integer
          title: Chunk Overlap Tokens
          default: 400
        max_chunk_size_tokens:
          type: integer
          maximum: 4096.0
          minimum: 100.0
          title: Max Chunk Size Tokens
          default: 800
      type: object
      title: VectorStoreChunkingStrategyStaticConfig
      description: 'Configuration for static chunking strategy.


        :param chunk_overlap_tokens: Number of tokens to overlap between adjacent
        chunks

        :param max_chunk_size_tokens: Maximum number of tokens per chunk, must be
        between 100 and 4096'
    VectorStoreFileBatchObject:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: vector_store.file_batch
        created_at:
          type: integer
          title: Created At
        vector_store_id:
          type: string
          title: Vector Store Id
        status:
          anyOf:
          - type: string
            const: completed
          - type: string
            const: in_progress
          - type: string
            const: cancelled
          - type: string
            const: failed
          title: Status
        file_counts:
          $ref: '#/components/schemas/VectorStoreFileCounts'
      type: object
      required:
      - id
      - created_at
      - vector_store_id
      - status
      - file_counts
      title: VectorStoreFileBatchObject
      description: 'OpenAI Vector Store File Batch object.


        :param id: Unique identifier for the file batch

        :param object: Object type identifier, always "vector_store.file_batch"

        :param created_at: Timestamp when the file batch was created

        :param vector_store_id: ID of the vector store containing the file batch

        :param status: Current processing status of the file batch

        :param file_counts: File processing status counts for the batch'
    VectorStoreFileCounts:
      properties:
        completed:
          type: integer
          title: Completed
        cancelled:
          type: integer
          title: Cancelled
        failed:
          type: integer
          title: Failed
        in_progress:
          type: integer
          title: In Progress
        total:
          type: integer
          title: Total
      type: object
      required:
      - completed
      - cancelled
      - failed
      - in_progress
      - total
      title: VectorStoreFileCounts
      description: 'File processing status counts for a vector store.


        :param completed: Number of files that have been successfully processed

        :param cancelled: Number of files that had their processing cancelled

        :param failed: Number of files that failed to process

        :param in_progress: Number of files currently being processed

        :param total: Total number of files in the vector store'
    VectorStoreObject:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: vector_store
        created_at:
          type: integer
          title: Created At
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
        usage_bytes:
          type: integer
          title: Usage Bytes
          default: 0
        file_counts:
          $ref: '#/components/schemas/VectorStoreFileCounts'
        status:
          type: string
          title: Status
          default: completed
        expires_after:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Expires After
        expires_at:
          anyOf:
          - type: integer
          - type: 'null'
          title: Expires At
        last_active_at:
          anyOf:
          - type: integer
          - type: 'null'
          title: Last Active At
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
      type: object
      required:
      - id
      - created_at
      - file_counts
      title: VectorStoreObject
      description: 'OpenAI Vector Store object.


        :param id: Unique identifier for the vector store

        :param object: Object type identifier, always "vector_store"

        :param created_at: Timestamp when the vector store was created

        :param name: (Optional) Name of the vector store

        :param usage_bytes: Storage space used by the vector store in bytes

        :param file_counts: File processing status counts for the vector store

        :param status: Current status of the vector store

        :param expires_after: (Optional) Expiration policy for the vector store

        :param expires_at: (Optional) Timestamp when the vector store will expire

        :param last_active_at: (Optional) Timestamp of last activity on the vector
        store

        :param metadata: Set of key-value pairs that can be attached to the vector
        store'
    VersionInfo:
      properties:
        version:
          type: string
          title: Version
      type: object
      required:
      - version
      title: VersionInfo
      description: 'Version information for the service.


        :param version: Version number of the service'
    WeightedRanker:
      properties:
        type:
          type: string
          const: weighted
          title: Type
          default: weighted
        alpha:
          type: number
          maximum: 1.0
          minimum: 0.0
          title: Alpha
          description: Weight factor between 0 and 1. 0 means only keyword scores,
            1 means only vector scores.
          default: 0.5
      type: object
      title: WeightedRanker
      description: "Weighted ranker configuration that combines vector and keyword\
        \ scores.\n\n:param type: The type of ranker, always \"weighted\"\n:param\
        \ alpha: Weight factor between 0 and 1.\n             0 means only use keyword\
        \ scores,\n             1 means only use vector scores,\n             values\
        \ in between blend both scores."
    Error:
      description: 'Error response from the API. Roughly follows RFC 7807.


        :param status: HTTP status code

        :param title: Error title, a short summary of the error which is invariant
        for an error type

        :param detail: Error detail, a longer human-readable description of the error

        :param instance: (Optional) A URL which can be used to retrieve more information
        about the specific occurrence of the error'
      properties:
        status:
          title: Status
          type: integer
        title:
          title: Title
          type: string
        detail:
          title: Detail
          type: string
        instance:
          anyOf:
          - type: string
          - type: 'null'
          default: null
          title: Instance
      required:
      - status
      - title
      - detail
      title: Error
      type: object
  responses:
    BadRequest400:
      description: The request was invalid or malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 400
            title: Bad Request
            detail: The request was invalid or malformed
    TooManyRequests429:
      description: The client has sent too many requests in a given amount of time
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 429
            title: Too Many Requests
            detail: You have exceeded the rate limit. Please try again later.
    InternalServerError500:
      description: The server encountered an unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 500
            title: Internal Server Error
            detail: An unexpected error occurred
    DefaultError:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
