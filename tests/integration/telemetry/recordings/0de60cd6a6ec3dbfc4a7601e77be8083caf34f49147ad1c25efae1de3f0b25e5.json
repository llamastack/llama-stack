{
  "test_id": "tests/integration/telemetry/test_openai_telemetry.py::test_openai_completion_creates_telemetry[txt=ollama/llama3.2:3b-instruct-fp16]",
  "request": {
    "method": "POST",
    "url": "http://0.0.0.0:11434/v1/v1/chat/completions",
    "headers": {},
    "body": {
      "model": "llama3.2:3b-instruct-fp16",
      "messages": [
        {
          "role": "user",
          "content": "Test OpenAI telemetry creation"
        }
      ],
      "stream": false
    },
    "endpoint": "/v1/chat/completions",
    "model": "llama3.2:3b-instruct-fp16"
  },
  "response": {
    "body": {
      "__type__": "openai.types.chat.chat_completion.ChatCompletion",
      "__data__": {
        "id": "rec-0de60cd6a6ec",
        "choices": [
          {
            "finish_reason": "stop",
            "index": 0,
            "logprobs": null,
            "message": {
              "content": "I'm happy to help you with setting up and testing OpenAI's telemetry creation.\n\nOpenAI provides a feature called \"Telemetry\" which allows developers to collect data about their users' interactions with the model. To test this feature, we need to create a simple application that uses the OpenAI API and sends telemetry data to their servers.\n\nHere's an example code in Python that demonstrates how to create a simple telemetry creator:\n\n```python\nimport os\nfrom openai.api import API\n\n# Initialize the OpenAI API client\napi = API(os.environ['OPENAI_API_KEY'])\n\ndef create_user():\n    # Create a new user entity\n    user_entity = {\n        'id': 'user-123',\n        'name': 'John Doe',\n        'email': 'john.doe@example.com'\n    }\n    \n    # Send the user creation request to OpenAI\n    response = api.users.create(user_entity)\n    print(f\"User created: {response}\")\n\ndef create_transaction():\n    # Create a new transaction entity\n    transaction_entity = {\n        'id': 'tran-123',\n        'user_id': 'user-123',\n        'transaction_type': 'query'\n    }\n    \n    # Send the transaction creation request to OpenAI\n    response = api.transactions.create(transaction_entity)\n    print(f\"Transaction created: {response}\")\n\ndef send_telemetry_data():\n    # Create a new telemetry event entity\n    telemetry_event_entity = {\n        'id': 'telem-123',\n        'transaction_id': 'tran-123',\n        'data': '{ \"event\": \"test\", \"user_id\": 1 }'\n    }\n    \n    # Send the telemetry data to OpenAI\n    response = api.telemetry.create(telemetry_event_entity)\n    print(f\"Telemetry event sent: {response}\")\n\n# Test the telemetry creation\ncreate_user()\ncreate_transaction()\nsend_telemetry_data()\n```\n\nMake sure you replace `OPENAI_API_KEY` with your actual API key. Also, ensure that you have the OpenAI API client library installed by running `pip install openai`.\n\nOnce you've created the test code, run it and observe the behavior of the telemetry creation process.\n\nPlease let me know if you need further modifications or assistance!",
              "refusal": null,
              "role": "assistant",
              "annotations": null,
              "audio": null,
              "function_call": null,
              "tool_calls": null
            }
          }
        ],
        "created": 0,
        "model": "llama3.2:3b-instruct-fp16",
        "object": "chat.completion",
        "service_tier": null,
        "system_fingerprint": "fp_ollama",
        "usage": {
          "completion_tokens": 460,
          "prompt_tokens": 30,
          "total_tokens": 490,
          "completion_tokens_details": null,
          "prompt_tokens_details": null
        }
      }
    },
    "is_streaming": false
  }
}
