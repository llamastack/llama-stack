openapi: 3.1.0
info:
  title: Llama Stack API - Stable & Experimental APIs
  description: "A comprehensive API for building and deploying AI applications\n\n**ðŸ”— COMBINED**: This specification includes both stable production-ready APIs and experimental pre-release APIs. Use stable APIs for production deployments and experimental APIs for testing new features."
  version: 1.0.0
servers:
- url: https://api.llamastack.com
  description: Production server
- url: https://staging-api.llamastack.com
  description: Staging server
paths:
  /v1beta/datasetio/append-rows/{dataset_id}:
    post:
      tags:
      - V1Beta
      summary: Append Rows
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: append_rows_v1beta_datasetio_append_rows__dataset_id__post
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: dataset_id'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1beta/datasetio/iterrows/{dataset_id}:
    get:
      tags:
      - V1Beta
      summary: Iterrows
      description: Query endpoint for proper schema generation.
      operationId: iterrows_v1beta_datasetio_iterrows__dataset_id__get
      parameters:
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
          title: Dataset Id
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          title: Limit
      - name: start_index
        in: query
        required: true
        schema:
          type: integer
          title: Start Index
      responses:
        '200':
          description: A PaginatedResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1beta/datasets:
    get:
      tags:
      - V1Beta
      summary: List Datasets
      description: Response-only endpoint for proper schema generation.
      operationId: list_datasets_v1beta_datasets_get
      responses:
        '200':
          description: A ListDatasetsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatasetsResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
      - V1Beta
      summary: Register Dataset
      description: Typed endpoint for proper schema generation.
      operationId: register_dataset_v1beta_datasets_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__main_____datasets_Request'
        required: true
      responses:
        '200':
          description: A Dataset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1beta/datasets/{dataset_id}:
    delete:
      tags:
      - V1Beta
      summary: Unregister Dataset
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: unregister_dataset_v1beta_datasets__dataset_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: dataset_id'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1Beta
      summary: Get Dataset
      description: Query endpoint for proper schema generation.
      operationId: get_dataset_v1beta_datasets__dataset_id__get
      parameters:
      - name: dataset_id
        in: path
        required: true
        schema:
          type: string
          title: Dataset Id
      responses:
        '200':
          description: A Dataset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/agents:
    get:
      tags:
      - V1Alpha
      summary: List Agents
      description: Query endpoint for proper schema generation.
      operationId: list_agents_v1alpha_agents_get
      parameters:
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          title: Limit
      - name: start_index
        in: query
        required: true
        schema:
          type: integer
          title: Start Index
      responses:
        '200':
          description: A PaginatedResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1Alpha
      summary: Create Agent
      description: Typed endpoint for proper schema generation.
      operationId: create_agent_v1alpha_agents_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentConfig'
      responses:
        '200':
          description: An AgentCreateResponse with the agent ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/agents/{agent_id}:
    delete:
      tags:
      - V1Alpha
      summary: Delete Agent
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: delete_agent_v1alpha_agents__agent_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: agent_id'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1Alpha
      summary: Get Agent
      description: Query endpoint for proper schema generation.
      operationId: get_agent_v1alpha_agents__agent_id__get
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
          title: Agent Id
      responses:
        '200':
          description: An Agent of the agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/agents/{agent_id}/session:
    post:
      tags:
      - V1Alpha
      summary: Create Agent Session
      description: Typed endpoint for proper schema generation.
      operationId: create_agent_session_v1alpha_agents__agent_id__session_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__main_____agents_agent_id_session_Request'
        required: true
      responses:
        '200':
          description: An AgentSessionCreateResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSessionCreateResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: agent_id'
  /v1alpha/agents/{agent_id}/session/{session_id}:
    delete:
      tags:
      - V1Alpha
      summary: Delete Agents Session
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: delete_agents_session_v1alpha_agents__agent_id__session__session_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: agent_id'
      - name: session_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: session_id'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1Alpha
      summary: Get Agents Session
      description: Query endpoint for proper schema generation.
      operationId: get_agents_session_v1alpha_agents__agent_id__session__session_id__get
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
          title: Agent Id
      - name: session_id
        in: path
        required: true
        schema:
          type: string
          title: Session Id
      - name: turn_ids
        in: query
        required: true
        schema:
          type: string
          title: Turn Ids
      responses:
        '200':
          description: A Session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/agents/{agent_id}/session/{session_id}/turn:
    post:
      tags:
      - V1Alpha
      summary: Create Agent Turn
      description: Typed endpoint for proper schema generation.
      operationId: create_agent_turn_v1alpha_agents__agent_id__session__session_id__turn_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__main_____agents_agent_id_session_session_id_turn_Request'
        required: true
      responses:
        '200':
          description: If stream=False, returns a Turn object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Turn'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: agent_id'
      - name: session_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: session_id'
  /v1alpha/agents/{agent_id}/session/{session_id}/turn/{turn_id}:
    get:
      tags:
      - V1Alpha
      summary: Get Agents Turn
      description: Query endpoint for proper schema generation.
      operationId: get_agents_turn_v1alpha_agents__agent_id__session__session_id__turn__turn_id__get
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
          title: Agent Id
      - name: session_id
        in: path
        required: true
        schema:
          type: string
          title: Session Id
      - name: turn_id
        in: path
        required: true
        schema:
          type: string
          title: Turn Id
      responses:
        '200':
          description: A Turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Turn'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/agents/{agent_id}/session/{session_id}/turn/{turn_id}/resume:
    post:
      tags:
      - V1Alpha
      summary: Resume Agent Turn
      description: Typed endpoint for proper schema generation.
      operationId: resume_agent_turn_v1alpha_agents__agent_id__session__session_id__turn__turn_id__resume_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__main_____agents_agent_id_session_session_id_turn_turn_id_resume_Request'
        required: true
      responses:
        '200':
          description: A Turn object if stream is False, otherwise an AsyncIterator of AgentTurnResponseStreamChunk objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Turn'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: agent_id'
      - name: session_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: session_id'
      - name: turn_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: turn_id'
  /v1alpha/agents/{agent_id}/session/{session_id}/turn/{turn_id}/step/{step_id}:
    get:
      tags:
      - V1Alpha
      summary: Get Agents Step
      description: Query endpoint for proper schema generation.
      operationId: get_agents_step_v1alpha_agents__agent_id__session__session_id__turn__turn_id__step__step_id__get
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
          title: Agent Id
      - name: session_id
        in: path
        required: true
        schema:
          type: string
          title: Session Id
      - name: step_id
        in: path
        required: true
        schema:
          type: string
          title: Step Id
      - name: turn_id
        in: path
        required: true
        schema:
          type: string
          title: Turn Id
      responses:
        '200':
          description: An AgentStepResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentStepResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/agents/{agent_id}/sessions:
    get:
      tags:
      - V1Alpha
      summary: List Agent Sessions
      description: Query endpoint for proper schema generation.
      operationId: list_agent_sessions_v1alpha_agents__agent_id__sessions_get
      parameters:
      - name: agent_id
        in: path
        required: true
        schema:
          type: string
          title: Agent Id
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          title: Limit
      - name: start_index
        in: query
        required: true
        schema:
          type: integer
          title: Start Index
      responses:
        '200':
          description: A PaginatedResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/eval/benchmarks:
    get:
      tags:
      - V1Alpha
      summary: List Benchmarks
      description: Response-only endpoint for proper schema generation.
      operationId: list_benchmarks_v1alpha_eval_benchmarks_get
      responses:
        '200':
          description: A ListBenchmarksResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBenchmarksResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1Alpha
      summary: Register Benchmark
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: register_benchmark_v1alpha_eval_benchmarks_post
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/eval/benchmarks/{benchmark_id}:
    delete:
      tags:
      - V1Alpha
      summary: Unregister Benchmark
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: unregister_benchmark_v1alpha_eval_benchmarks__benchmark_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - name: benchmark_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: benchmark_id'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1Alpha
      summary: Get Benchmark
      description: Query endpoint for proper schema generation.
      operationId: get_benchmark_v1alpha_eval_benchmarks__benchmark_id__get
      parameters:
      - name: benchmark_id
        in: path
        required: true
        schema:
          type: string
          title: Benchmark Id
      responses:
        '200':
          description: A Benchmark.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Benchmark'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/eval/benchmarks/{benchmark_id}/evaluations:
    post:
      tags:
      - V1Alpha
      summary: Evaluate Rows
      description: Typed endpoint for proper schema generation.
      operationId: evaluate_rows_v1alpha_eval_benchmarks__benchmark_id__evaluations_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenchmarkConfig'
        required: true
      responses:
        '200':
          description: EvaluateResponse object containing generations and scores.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
      parameters:
      - name: benchmark_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: benchmark_id'
  /v1alpha/eval/benchmarks/{benchmark_id}/jobs:
    post:
      tags:
      - V1Alpha
      summary: Run Eval
      description: Typed endpoint for proper schema generation.
      operationId: run_eval_v1alpha_eval_benchmarks__benchmark_id__jobs_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenchmarkConfig'
        required: true
      responses:
        '200':
          description: The job that was created to run the evaluation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
      parameters:
      - name: benchmark_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: benchmark_id'
  /v1alpha/eval/benchmarks/{benchmark_id}/jobs/{job_id}:
    delete:
      tags:
      - V1Alpha
      summary: Job Cancel
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: job_cancel_v1alpha_eval_benchmarks__benchmark_id__jobs__job_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - name: benchmark_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: benchmark_id'
      - name: job_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: job_id'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1Alpha
      summary: Job Status
      description: Query endpoint for proper schema generation.
      operationId: job_status_v1alpha_eval_benchmarks__benchmark_id__jobs__job_id__get
      parameters:
      - name: benchmark_id
        in: path
        required: true
        schema:
          type: string
          title: Benchmark Id
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: The status of the evaluation job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/eval/benchmarks/{benchmark_id}/jobs/{job_id}/result:
    get:
      tags:
      - V1Alpha
      summary: Job Result
      description: Query endpoint for proper schema generation.
      operationId: job_result_v1alpha_eval_benchmarks__benchmark_id__jobs__job_id__result_get
      parameters:
      - name: benchmark_id
        in: path
        required: true
        schema:
          type: string
          title: Benchmark Id
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: The result of the job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/inference/rerank:
    post:
      tags:
      - V1Alpha
      summary: Rerank
      description: Typed endpoint for proper schema generation.
      operationId: rerank_v1alpha_inference_rerank_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_inference_rerank_Request'
        required: true
      responses:
        '200':
          description: RerankResponse with indices sorted by relevance score (descending).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RerankResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1alpha/post-training/job/artifacts:
    get:
      tags:
      - V1Alpha
      summary: Get Training Job Artifacts
      description: Query endpoint for proper schema generation.
      operationId: get_training_job_artifacts_v1alpha_post_training_job_artifacts_get
      parameters:
      - name: job_uuid
        in: query
        required: true
        schema:
          type: string
          title: Job Uuid
      responses:
        '200':
          description: A PostTrainingJobArtifactsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTrainingJobArtifactsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/post-training/job/cancel:
    post:
      tags:
      - V1Alpha
      summary: Cancel Training Job
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: cancel_training_job_v1alpha_post_training_job_cancel_post
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/post-training/job/status:
    get:
      tags:
      - V1Alpha
      summary: Get Training Job Status
      description: Query endpoint for proper schema generation.
      operationId: get_training_job_status_v1alpha_post_training_job_status_get
      parameters:
      - name: job_uuid
        in: query
        required: true
        schema:
          type: string
          title: Job Uuid
      responses:
        '200':
          description: A PostTrainingJobStatusResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTrainingJobStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1alpha/post-training/jobs:
    get:
      tags:
      - V1Alpha
      summary: Get Training Jobs
      description: Response-only endpoint for proper schema generation.
      operationId: get_training_jobs_v1alpha_post_training_jobs_get
      responses:
        '200':
          description: A ListPostTrainingJobsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPostTrainingJobsResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1alpha/post-training/preference-optimize:
    post:
      tags:
      - V1Alpha
      summary: Preference Optimize
      description: Typed endpoint for proper schema generation.
      operationId: preference_optimize_v1alpha_post_training_preference_optimize_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DPOAlignmentConfig'
        required: true
      responses:
        '200':
          description: A PostTrainingJob.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTrainingJob'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1alpha/post-training/supervised-fine-tune:
    post:
      tags:
      - V1Alpha
      summary: Supervised Fine Tune
      description: Typed endpoint for proper schema generation.
      operationId: supervised_fine_tune_v1alpha_post_training_supervised_fine_tune_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingConfig'
        required: true
      responses:
        '200':
          description: A PostTrainingJob.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTrainingJob'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/batches:
    get:
      tags:
      - V1
      summary: List Batches
      description: Query endpoint for proper schema generation.
      operationId: list_batches_v1_batches_get
      parameters:
      - name: after
        in: query
        required: true
        schema:
          type: string
          title: After
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      responses:
        '200':
          description: A list of batch objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBatchesResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Create Batch
      description: Typed endpoint for proper schema generation.
      operationId: create_batch_v1_batches_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_batches_Request'
      responses:
        '200':
          description: The created batch object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/batches/{batch_id}:
    get:
      tags:
      - V1
      summary: Retrieve Batch
      description: Query endpoint for proper schema generation.
      operationId: retrieve_batch_v1_batches__batch_id__get
      parameters:
      - name: batch_id
        in: path
        required: true
        schema:
          type: string
          title: Batch Id
      responses:
        '200':
          description: The batch object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/batches/{batch_id}/cancel:
    post:
      tags:
      - V1
      summary: Cancel Batch
      description: Typed endpoint for proper schema generation.
      operationId: cancel_batch_v1_batches__batch_id__cancel_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_batches_batch_id_cancel_Request'
        required: true
      responses:
        '200':
          description: The updated batch object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
      parameters:
      - name: batch_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: batch_id'
  /v1/chat/completions:
    get:
      tags:
      - V1
      summary: List Chat Completions
      description: Query endpoint for proper schema generation.
      operationId: list_chat_completions_v1_chat_completions_get
      parameters:
      - name: after
        in: query
        required: true
        schema:
          type: string
          title: After
      - name: model
        in: query
        required: true
        schema:
          type: string
          title: Model
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Order'
          default: desc
      responses:
        '200':
          description: A ListOpenAIChatCompletionResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOpenAIChatCompletionResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Chat Completion
      description: Typed endpoint for proper schema generation.
      operationId: openai_chat_completion_v1_chat_completions_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAIChatCompletionRequestWithExtraBody'
      responses:
        '200':
          description: An OpenAIChatCompletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIChatCompletion'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/chat/completions/{completion_id}:
    get:
      tags:
      - V1
      summary: Get Chat Completion
      description: Query endpoint for proper schema generation.
      operationId: get_chat_completion_v1_chat_completions__completion_id__get
      parameters:
      - name: completion_id
        in: path
        required: true
        schema:
          type: string
          title: Completion Id
      responses:
        '200':
          description: A OpenAICompletionWithInputMessages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAICompletionWithInputMessages'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/completions:
    post:
      tags:
      - V1
      summary: Openai Completion
      description: Typed endpoint for proper schema generation.
      operationId: openai_completion_v1_completions_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAICompletionRequestWithExtraBody'
        required: true
      responses:
        '200':
          description: An OpenAICompletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAICompletion'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/conversations:
    post:
      tags:
      - V1
      summary: Create Conversation
      description: Typed endpoint for proper schema generation.
      operationId: create_conversation_v1_conversations_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_conversations_Request'
        required: true
      responses:
        '200':
          description: The created conversation object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/conversations/{conversation_id}:
    delete:
      tags:
      - V1
      summary: Openai Delete Conversation
      description: Query endpoint for proper schema generation.
      operationId: openai_delete_conversation_v1_conversations__conversation_id__delete
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
          title: Conversation Id
      responses:
        '200':
          description: The deleted conversation resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDeletedResource'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Conversation
      description: Query endpoint for proper schema generation.
      operationId: get_conversation_v1_conversations__conversation_id__get
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
          title: Conversation Id
      responses:
        '200':
          description: The conversation object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Update Conversation
      description: Typed endpoint for proper schema generation.
      operationId: update_conversation_v1_conversations__conversation_id__post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_conversations_conversation_id_Request'
      responses:
        '200':
          description: The updated conversation object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: conversation_id'
  /v1/conversations/{conversation_id}/items:
    get:
      tags:
      - V1
      summary: List Items
      description: Query endpoint for proper schema generation.
      operationId: list_items_v1_conversations__conversation_id__items_get
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
          title: Conversation Id
      - name: after
        in: query
        required: true
        schema:
          type: string
          title: After
      - name: include
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ConversationItemInclude'
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          title: Limit
      - name: order
        in: query
        required: true
        schema:
          type: string
          title: Order
      responses:
        '200':
          description: List of conversation items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationItemList'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Add Items
      description: Typed endpoint for proper schema generation.
      operationId: add_items_v1_conversations__conversation_id__items_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_conversations_conversation_id_items_Request'
      responses:
        '200':
          description: List of created items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationItemList'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: conversation_id'
  /v1/conversations/{conversation_id}/items/{item_id}:
    delete:
      tags:
      - V1
      summary: Openai Delete Conversation Item
      description: Query endpoint for proper schema generation.
      operationId: openai_delete_conversation_item_v1_conversations__conversation_id__items__item_id__delete
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
          title: Conversation Id
      - name: item_id
        in: path
        required: true
        schema:
          type: string
          title: Item Id
      responses:
        '200':
          description: The deleted item resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationItemDeletedResource'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Retrieve
      description: Query endpoint for proper schema generation.
      operationId: retrieve_v1_conversations__conversation_id__items__item_id__get
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
          title: Conversation Id
      - name: item_id
        in: path
        required: true
        schema:
          type: string
          title: Item Id
      responses:
        '200':
          description: The conversation item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIResponseMessage'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/embeddings:
    post:
      tags:
      - V1
      summary: Openai Embeddings
      description: Typed endpoint for proper schema generation.
      operationId: openai_embeddings_v1_embeddings_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAIEmbeddingsRequestWithExtraBody'
        required: true
      responses:
        '200':
          description: An OpenAIEmbeddingsResponse containing the embeddings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIEmbeddingsResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/files:
    get:
      tags:
      - V1
      summary: Openai List Files
      description: Query endpoint for proper schema generation.
      operationId: openai_list_files_v1_files_get
      parameters:
      - name: after
        in: query
        required: true
        schema:
          type: string
          title: After
      - name: purpose
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/OpenAIFilePurpose'
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 10000
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Order'
          default: desc
      responses:
        '200':
          description: An ListOpenAIFileResponse containing the list of files.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOpenAIFileResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Upload File
      description: Response-only endpoint for proper schema generation.
      operationId: openai_upload_file_v1_files_post
      responses:
        '200':
          description: An OpenAIFileObject representing the uploaded file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFileObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/files/{file_id}:
    delete:
      tags:
      - V1
      summary: Openai Delete File
      description: Query endpoint for proper schema generation.
      operationId: openai_delete_file_v1_files__file_id__delete
      parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          title: File Id
      responses:
        '200':
          description: An OpenAIFileDeleteResponse indicating successful deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFileDeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Openai Retrieve File
      description: Query endpoint for proper schema generation.
      operationId: openai_retrieve_file_v1_files__file_id__get
      parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          title: File Id
      responses:
        '200':
          description: An OpenAIFileObject containing file information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFileObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/files/{file_id}/content:
    get:
      tags:
      - V1
      summary: Openai Retrieve File Content
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: openai_retrieve_file_content_v1_files__file_id__content_get
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - name: file_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: file_id'
      responses:
        '200':
          description: The raw file content as a binary response.
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/health:
    get:
      tags:
      - V1
      summary: Health
      description: Response-only endpoint for proper schema generation.
      operationId: health_v1_health_get
      responses:
        '200':
          description: Health information indicating if the service is operational.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthInfo'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/inspect/routes:
    get:
      tags:
      - V1
      summary: List Routes
      description: Response-only endpoint for proper schema generation.
      operationId: list_routes_v1_inspect_routes_get
      responses:
        '200':
          description: Response containing information about all available routes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoutesResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/models:
    get:
      tags:
      - V1
      summary: List Models
      description: Response-only endpoint for proper schema generation.
      operationId: list_models_v1_models_get
      responses:
        '200':
          description: A ListModelsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
      - V1
      summary: Register Model
      description: Typed endpoint for proper schema generation.
      operationId: register_model_v1_models_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_models_Request'
        required: true
      responses:
        '200':
          description: A Model.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/models/{model_id}:
    delete:
      tags:
      - V1
      summary: Unregister Model
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: unregister_model_v1_models__model_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - name: model_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: model_id'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Model
      description: Query endpoint for proper schema generation.
      operationId: get_model_v1_models__model_id__get
      parameters:
      - name: model_id
        in: path
        required: true
        schema:
          type: string
          title: Model Id
      responses:
        '200':
          description: A Model.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/moderations:
    post:
      tags:
      - V1
      summary: Run Moderation
      description: Typed endpoint for proper schema generation.
      operationId: run_moderation_v1_moderations_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_moderations_Request'
        required: true
      responses:
        '200':
          description: A moderation object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerationObject'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/prompts:
    get:
      tags:
      - V1
      summary: List Prompts
      description: Response-only endpoint for proper schema generation.
      operationId: list_prompts_v1_prompts_get
      responses:
        '200':
          description: A ListPromptsResponse containing all prompts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPromptsResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
      - V1
      summary: Create Prompt
      description: Typed endpoint for proper schema generation.
      operationId: create_prompt_v1_prompts_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_prompts_Request'
        required: true
      responses:
        '200':
          description: The created Prompt resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/prompts/{prompt_id}:
    delete:
      tags:
      - V1
      summary: Delete Prompt
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: delete_prompt_v1_prompts__prompt_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - &id001
        name: prompt_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: prompt_id'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Prompt
      description: Query endpoint for proper schema generation.
      operationId: get_prompt_v1_prompts__prompt_id__get
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
          title: Prompt Id
      - name: version
        in: query
        required: true
        schema:
          type: integer
          title: Version
      responses:
        '200':
          description: A Prompt resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Update Prompt
      description: Typed endpoint for proper schema generation.
      operationId: update_prompt_v1_prompts__prompt_id__post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_prompts_prompt_id_Request'
      responses:
        '200':
          description: The updated Prompt resource with incremented version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
      parameters:
      - *id001
  /v1/prompts/{prompt_id}/set-default-version:
    post:
      tags:
      - V1
      summary: Set Default Version
      description: Typed endpoint for proper schema generation.
      operationId: set_default_version_v1_prompts__prompt_id__set_default_version_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_prompts_prompt_id_set_default_version_Request'
        required: true
      responses:
        '200':
          description: The prompt with the specified version now set as default.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: prompt_id'
  /v1/prompts/{prompt_id}/versions:
    get:
      tags:
      - V1
      summary: List Prompt Versions
      description: Query endpoint for proper schema generation.
      operationId: list_prompt_versions_v1_prompts__prompt_id__versions_get
      parameters:
      - name: prompt_id
        in: path
        required: true
        schema:
          type: string
          title: Prompt Id
      responses:
        '200':
          description: A ListPromptsResponse containing all versions of the prompt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPromptsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/providers:
    get:
      tags:
      - V1
      summary: List Providers
      description: Response-only endpoint for proper schema generation.
      operationId: list_providers_v1_providers_get
      responses:
        '200':
          description: A ListProvidersResponse containing information about all providers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProvidersResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/providers/{provider_id}:
    get:
      tags:
      - V1
      summary: Inspect Provider
      description: Query endpoint for proper schema generation.
      operationId: inspect_provider_v1_providers__provider_id__get
      parameters:
      - name: provider_id
        in: path
        required: true
        schema:
          type: string
          title: Provider Id
      responses:
        '200':
          description: A ProviderInfo object containing the provider's details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderInfo'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/responses:
    get:
      tags:
      - V1
      summary: List Openai Responses
      description: Query endpoint for proper schema generation.
      operationId: list_openai_responses_v1_responses_get
      parameters:
      - name: after
        in: query
        required: true
        schema:
          type: string
          title: After
      - name: model
        in: query
        required: true
        schema:
          type: string
          title: Model
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 50
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Order'
          default: desc
      responses:
        '200':
          description: A ListOpenAIResponseObject.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOpenAIResponseObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Create Openai Response
      description: Typed endpoint for proper schema generation.
      operationId: create_openai_response_v1_responses_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_responses_Request'
      responses:
        '200':
          description: An OpenAIResponseObject.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIResponseObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/responses/{response_id}:
    delete:
      tags:
      - V1
      summary: Delete Openai Response
      description: Query endpoint for proper schema generation.
      operationId: delete_openai_response_v1_responses__response_id__delete
      parameters:
      - name: response_id
        in: path
        required: true
        schema:
          type: string
          title: Response Id
      responses:
        '200':
          description: An OpenAIDeleteResponseObject
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIDeleteResponseObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Openai Response
      description: Query endpoint for proper schema generation.
      operationId: get_openai_response_v1_responses__response_id__get
      parameters:
      - name: response_id
        in: path
        required: true
        schema:
          type: string
          title: Response Id
      responses:
        '200':
          description: An OpenAIResponseObject.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIResponseObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/responses/{response_id}/input_items:
    get:
      tags:
      - V1
      summary: List Openai Response Input Items
      description: Query endpoint for proper schema generation.
      operationId: list_openai_response_input_items_v1_responses__response_id__input_items_get
      parameters:
      - name: response_id
        in: path
        required: true
        schema:
          type: string
          title: Response Id
      - name: after
        in: query
        required: true
        schema:
          type: string
          title: After
      - name: before
        in: query
        required: true
        schema:
          type: string
          title: Before
      - name: include
        in: query
        required: true
        schema:
          type: string
          title: Include
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Order'
          default: desc
      responses:
        '200':
          description: An ListOpenAIResponseInputItem.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOpenAIResponseInputItem'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/safety/run-shield:
    post:
      tags:
      - V1
      summary: Run Shield
      description: Typed endpoint for proper schema generation.
      operationId: run_shield_v1_safety_run_shield_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_safety_run_shield_Request'
        required: true
      responses:
        '200':
          description: A RunShieldResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunShieldResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/scoring-functions:
    get:
      tags:
      - V1
      summary: List Scoring Functions
      description: Response-only endpoint for proper schema generation.
      operationId: list_scoring_functions_v1_scoring_functions_get
      responses:
        '200':
          description: A ListScoringFunctionsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListScoringFunctionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Register Scoring Function
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: register_scoring_function_v1_scoring_functions_post
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/scoring-functions/{scoring_fn_id}:
    delete:
      tags:
      - V1
      summary: Unregister Scoring Function
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: unregister_scoring_function_v1_scoring_functions__scoring_fn_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - name: scoring_fn_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: scoring_fn_id'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Scoring Function
      description: Query endpoint for proper schema generation.
      operationId: get_scoring_function_v1_scoring_functions__scoring_fn_id__get
      parameters:
      - name: scoring_fn_id
        in: path
        required: true
        schema:
          type: string
          title: Scoring Fn Id
      responses:
        '200':
          description: A ScoringFn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoringFn'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/scoring/score:
    post:
      tags:
      - V1
      summary: Score
      description: Typed endpoint for proper schema generation.
      operationId: score_v1_scoring_score_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_scoring_score_Request'
        required: true
      responses:
        '200':
          description: A ScoreResponse object containing rows and aggregated results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/scoring/score-batch:
    post:
      tags:
      - V1
      summary: Score Batch
      description: Typed endpoint for proper schema generation.
      operationId: score_batch_v1_scoring_score_batch_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_scoring_score_batch_Request'
        required: true
      responses:
        '200':
          description: A ScoreBatchResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreBatchResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/shields:
    get:
      tags:
      - V1
      summary: List Shields
      description: Response-only endpoint for proper schema generation.
      operationId: list_shields_v1_shields_get
      responses:
        '200':
          description: A ListShieldsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListShieldsResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
      - V1
      summary: Register Shield
      description: Typed endpoint for proper schema generation.
      operationId: register_shield_v1_shields_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shields_Request'
        required: true
      responses:
        '200':
          description: A Shield.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shield'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/shields/{identifier}:
    delete:
      tags:
      - V1
      summary: Unregister Shield
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: unregister_shield_v1_shields__identifier__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - name: identifier
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: identifier'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Shield
      description: Query endpoint for proper schema generation.
      operationId: get_shield_v1_shields__identifier__get
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          type: string
          title: Identifier
      responses:
        '200':
          description: A Shield.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shield'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/tool-runtime/invoke:
    post:
      tags:
      - V1
      summary: Invoke Tool
      description: Typed endpoint for proper schema generation.
      operationId: invoke_tool_v1_tool_runtime_invoke_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_tool_runtime_invoke_Request'
        required: true
      responses:
        '200':
          description: A ToolInvocationResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolInvocationResult'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/tool-runtime/list-tools:
    get:
      tags:
      - V1
      summary: List Runtime Tools
      description: Query endpoint for proper schema generation.
      operationId: list_runtime_tools_v1_tool_runtime_list_tools_get
      parameters:
      - name: tool_group_id
        in: query
        required: true
        schema:
          type: string
          title: Tool Group Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/URL'
      responses:
        '200':
          description: A ListToolDefsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolDefsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/tool-runtime/rag-tool/insert:
    post:
      tags:
      - V1
      summary: Rag Tool.Insert
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: rag_tool_insert_v1_tool_runtime_rag_tool_insert_post
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/tool-runtime/rag-tool/query:
    post:
      tags:
      - V1
      summary: Rag Tool.Query
      description: Typed endpoint for proper schema generation.
      operationId: rag_tool_query_v1_tool_runtime_rag_tool_query_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_tool_runtime_rag_tool_query_Request'
        required: true
      responses:
        '200':
          description: RAGQueryResult containing the retrieved content and metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RAGQueryResult'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/toolgroups:
    get:
      tags:
      - V1
      summary: List Tool Groups
      description: Response-only endpoint for proper schema generation.
      operationId: list_tool_groups_v1_toolgroups_get
      responses:
        '200':
          description: A ListToolGroupsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolGroupsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Register Tool Group
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: register_tool_group_v1_toolgroups_post
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/toolgroups/{toolgroup_id}:
    delete:
      tags:
      - V1
      summary: Unregister Toolgroup
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: unregister_toolgroup_v1_toolgroups__toolgroup_id__delete
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      - name: toolgroup_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: toolgroup_id'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Get Tool Group
      description: Query endpoint for proper schema generation.
      operationId: get_tool_group_v1_toolgroups__toolgroup_id__get
      parameters:
      - name: toolgroup_id
        in: path
        required: true
        schema:
          type: string
          title: Toolgroup Id
      responses:
        '200':
          description: A ToolGroup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolGroup'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/tools:
    get:
      tags:
      - V1
      summary: List Tools
      description: Query endpoint for proper schema generation.
      operationId: list_tools_v1_tools_get
      parameters:
      - name: toolgroup_id
        in: query
        required: true
        schema:
          type: string
          title: Toolgroup Id
      responses:
        '200':
          description: A ListToolDefsResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolDefsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/tools/{tool_name}:
    get:
      tags:
      - V1
      summary: Get Tool
      description: Query endpoint for proper schema generation.
      operationId: get_tool_v1_tools__tool_name__get
      parameters:
      - name: tool_name
        in: path
        required: true
        schema:
          type: string
          title: Tool Name
      responses:
        '200':
          description: A ToolDef.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDef'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector-io/insert:
    post:
      tags:
      - V1
      summary: Insert Chunks
      description: Generic endpoint - this would be replaced with actual implementation.
      operationId: insert_chunks_v1_vector_io_insert_post
      parameters:
      - name: args
        in: query
        required: true
        schema:
          title: Args
      - name: kwargs
        in: query
        required: true
        schema:
          title: Kwargs
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector-io/query:
    post:
      tags:
      - V1
      summary: Query Chunks
      description: Typed endpoint for proper schema generation.
      operationId: query_chunks_v1_vector_io_query_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_vector_io_query_Request'
        required: true
      responses:
        '200':
          description: A QueryChunksResponse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryChunksResponse'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
  /v1/vector_stores:
    get:
      tags:
      - V1
      summary: Openai List Vector Stores
      description: Query endpoint for proper schema generation.
      operationId: openai_list_vector_stores_v1_vector_stores_get
      parameters:
      - name: after
        in: query
        required: true
        schema:
          type: string
          title: After
      - name: before
        in: query
        required: true
        schema:
          type: string
          title: Before
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          type: string
          default: desc
          title: Order
      responses:
        '200':
          description: A VectorStoreListResponse containing the list of vector stores.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreListResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Create Vector Store
      description: Typed endpoint for proper schema generation.
      operationId: openai_create_vector_store_v1_vector_stores_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAICreateVectorStoreRequestWithExtraBody'
      responses:
        '200':
          description: A VectorStoreObject representing the created vector store.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}:
    delete:
      tags:
      - V1
      summary: Openai Delete Vector Store
      description: Query endpoint for proper schema generation.
      operationId: openai_delete_vector_store_v1_vector_stores__vector_store_id__delete
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      responses:
        '200':
          description: A VectorStoreDeleteResponse indicating the deletion status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreDeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Openai Retrieve Vector Store
      description: Query endpoint for proper schema generation.
      operationId: openai_retrieve_vector_store_v1_vector_stores__vector_store_id__get
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      responses:
        '200':
          description: A VectorStoreObject representing the vector store.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Update Vector Store
      description: Typed endpoint for proper schema generation.
      operationId: openai_update_vector_store_v1_vector_stores__vector_store_id__post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_vector_stores_vector_store_id_Request'
      responses:
        '200':
          description: A VectorStoreObject representing the updated vector store.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: vector_store_id'
  /v1/vector_stores/{vector_store_id}/file_batches:
    post:
      tags:
      - V1
      summary: Openai Create Vector Store File Batch
      description: Typed endpoint for proper schema generation.
      operationId: openai_create_vector_store_file_batch_v1_vector_stores__vector_store_id__file_batches_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAICreateVectorStoreFileBatchRequestWithExtraBody'
        required: true
      responses:
        '200':
          description: A VectorStoreFileBatchObject representing the created file batch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileBatchObject'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: vector_store_id'
  /v1/vector_stores/{vector_store_id}/file_batches/{batch_id}:
    get:
      tags:
      - V1
      summary: Openai Retrieve Vector Store File Batch
      description: Query endpoint for proper schema generation.
      operationId: openai_retrieve_vector_store_file_batch_v1_vector_stores__vector_store_id__file_batches__batch_id__get
      parameters:
      - name: batch_id
        in: path
        required: true
        schema:
          type: string
          title: Batch Id
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      responses:
        '200':
          description: A VectorStoreFileBatchObject representing the file batch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileBatchObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel:
    post:
      tags:
      - V1
      summary: Openai Cancel Vector Store File Batch
      description: Typed endpoint for proper schema generation.
      operationId: openai_cancel_vector_store_file_batch_v1_vector_stores__vector_store_id__file_batches__batch_id__cancel_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_vector_stores_vector_store_id_file_batches_batch_id_cancel_Request'
        required: true
      responses:
        '200':
          description: A VectorStoreFileBatchObject representing the cancelled file batch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileBatchObject'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: vector_store_id'
      - name: batch_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: batch_id'
  /v1/vector_stores/{vector_store_id}/file_batches/{batch_id}/files:
    get:
      tags:
      - V1
      summary: Openai List Files In Vector Store File Batch
      description: Query endpoint for proper schema generation.
      operationId: openai_list_files_in_vector_store_file_batch_v1_vector_stores__vector_store_id__file_batches__batch_id__files_get
      parameters:
      - name: batch_id
        in: path
        required: true
        schema:
          type: string
          title: Batch Id
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      - name: after
        in: query
        required: true
        schema:
          type: string
          title: After
      - name: before
        in: query
        required: true
        schema:
          type: string
          title: Before
      - name: filter
        in: query
        required: true
        schema:
          type: string
          title: Filter
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          type: string
          default: desc
          title: Order
      responses:
        '200':
          description: A VectorStoreFilesListInBatchResponse containing the list of files in the batch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFilesListInBatchResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}/files:
    get:
      tags:
      - V1
      summary: Openai List Files In Vector Store
      description: Query endpoint for proper schema generation.
      operationId: openai_list_files_in_vector_store_v1_vector_stores__vector_store_id__files_get
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      - name: after
        in: query
        required: true
        schema:
          type: string
          title: After
      - name: before
        in: query
        required: true
        schema:
          type: string
          title: Before
      - name: filter
        in: query
        required: true
        schema:
          type: string
          title: Filter
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      - name: order
        in: query
        required: false
        schema:
          type: string
          default: desc
          title: Order
      responses:
        '200':
          description: A VectorStoreListFilesResponse containing the list of files.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreListFilesResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Attach File To Vector Store
      description: Typed endpoint for proper schema generation.
      operationId: openai_attach_file_to_vector_store_v1_vector_stores__vector_store_id__files_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_vector_stores_vector_store_id_files_Request'
      responses:
        '200':
          description: A VectorStoreFileObject representing the attached file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: vector_store_id'
  /v1/vector_stores/{vector_store_id}/files/{file_id}:
    delete:
      tags:
      - V1
      summary: Openai Delete Vector Store File
      description: Query endpoint for proper schema generation.
      operationId: openai_delete_vector_store_file_v1_vector_stores__vector_store_id__files__file_id__delete
      parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          title: File Id
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      responses:
        '200':
          description: A VectorStoreFileDeleteResponse indicating the deletion status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileDeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    get:
      tags:
      - V1
      summary: Openai Retrieve Vector Store File
      description: Query endpoint for proper schema generation.
      operationId: openai_retrieve_vector_store_file_v1_vector_stores__vector_store_id__files__file_id__get
      parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          title: File Id
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      responses:
        '200':
          description: A VectorStoreFileObject representing the file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
    post:
      tags:
      - V1
      summary: Openai Update Vector Store File
      description: Typed endpoint for proper schema generation.
      operationId: openai_update_vector_store_file_v1_vector_stores__vector_store_id__files__file_id__post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_vector_stores_vector_store_id_files_file_id_Request'
      responses:
        '200':
          description: A VectorStoreFileObject representing the updated file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileObject'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: vector_store_id'
      - name: file_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: file_id'
  /v1/vector_stores/{vector_store_id}/files/{file_id}/content:
    get:
      tags:
      - V1
      summary: Openai Retrieve Vector Store File Contents
      description: Query endpoint for proper schema generation.
      operationId: openai_retrieve_vector_store_file_contents_v1_vector_stores__vector_store_id__files__file_id__content_get
      parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          title: File Id
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
          title: Vector Store Id
      responses:
        '200':
          description: A list of InterleavedContent representing the file contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileContentsResponse'
        '400':
          $ref: '#/components/responses/BadRequest400'
          description: Bad Request
        '429':
          $ref: '#/components/responses/TooManyRequests429'
          description: Too Many Requests
        '500':
          $ref: '#/components/responses/InternalServerError500'
          description: Internal Server Error
        default:
          $ref: '#/components/responses/DefaultError'
          description: Default Response
  /v1/vector_stores/{vector_store_id}/search:
    post:
      tags:
      - V1
      summary: Openai Search Vector Store
      description: Typed endpoint for proper schema generation.
      operationId: openai_search_vector_store_v1_vector_stores__vector_store_id__search_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_vector_stores_vector_store_id_search_Request'
        required: true
      responses:
        '200':
          description: A VectorStoreSearchResponse containing the search results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreSearchResponsePage'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
      parameters:
      - name: vector_store_id
        in: path
        required: true
        schema:
          type: string
        description: 'Path parameter: vector_store_id'
  /v1/version:
    get:
      tags:
      - V1
      summary: Version
      description: Response-only endpoint for proper schema generation.
      operationId: version_v1_version_get
      responses:
        '200':
          description: Version information containing the service version number.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest400'
        '429':
          description: Too Many Requests
          $ref: '#/components/responses/TooManyRequests429'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/InternalServerError500'
        default:
          description: Default Response
          $ref: '#/components/responses/DefaultError'
components:
  schemas:
    AgentCandidate:
      properties:
        type:
          type: string
          const: agent
          title: Type
          default: agent
        config:
          $ref: '#/components/schemas/AgentConfig'
      type: object
      required:
      - config
      title: AgentCandidate
      description: "An agent candidate for evaluation.\n\n:param config: The configuration for the agent candidate."
    AgentConfig:
      properties:
        sampling_params:
          $ref: '#/components/schemas/SamplingParams'
        input_shields:
          title: Input Shields
          items:
            type: string
          type: array
        output_shields:
          title: Output Shields
          items:
            type: string
          type: array
        toolgroups:
          title: Toolgroups
          items:
            anyOf:
            - type: string
            - $ref: '#/components/schemas/AgentToolGroupWithArgs'
          type: array
        client_tools:
          title: Client Tools
          items:
            $ref: '#/components/schemas/ToolDef'
          type: array
        tool_choice:
          deprecated: true
          $ref: '#/components/schemas/ToolChoice'
        tool_prompt_format:
          deprecated: true
          $ref: '#/components/schemas/ToolPromptFormat'
        tool_config:
          $ref: '#/components/schemas/ToolConfig'
        max_infer_iters:
          title: Max Infer Iters
          default: 10
          type: integer
        model:
          type: string
          title: Model
        instructions:
          type: string
          title: Instructions
        name:
          title: Name
          type: string
        enable_session_persistence:
          title: Enable Session Persistence
          default: false
          type: boolean
        response_format:
          title: Response Format
          oneOf:
          - $ref: '#/components/schemas/JsonSchemaResponseFormat'
          - $ref: '#/components/schemas/GrammarResponseFormat'
          discriminator:
            propertyName: type
            mapping:
              grammar: '#/components/schemas/GrammarResponseFormat'
              json_schema: '#/components/schemas/JsonSchemaResponseFormat'
      type: object
      required:
      - model
      - instructions
      title: AgentConfig
      description: "Configuration for an agent.\n\n:param model: The model identifier to use for the agent\n:param instructions: The system instructions for the agent\n:param name: Optional name for the agent, used in telemetry and identification\n:param enable_session_persistence: Optional flag indicating whether session data has to be persisted\n:param response_format: Optional response format configuration"
    AgentCreateResponse:
      properties:
        agent_id:
          type: string
          title: Agent Id
      type: object
      required:
      - agent_id
      title: AgentCreateResponse
      description: "Response returned when creating a new agent.\n\n:param agent_id: Unique identifier for the created agent"
    AgentSessionCreateResponse:
      properties:
        session_id:
          type: string
          title: Session Id
      type: object
      required:
      - session_id
      title: AgentSessionCreateResponse
      description: "Response returned when creating a new agent session.\n\n:param session_id: Unique identifier for the created session"
    AgentToolGroupWithArgs:
      properties:
        name:
          type: string
          title: Name
        args:
          additionalProperties: true
          type: object
          title: Args
      type: object
      required:
      - name
      - args
      title: AgentToolGroupWithArgs
    AgentTurnInputType:
      properties:
        type:
          type: string
          const: agent_turn_input
          title: Type
          default: agent_turn_input
      type: object
      title: AgentTurnInputType
      description: "Parameter type for agent turn input.\n\n:param type: Discriminator type. Always \"agent_turn_input\""
    AggregationFunctionType:
      type: string
      enum:
      - average
      - weighted_average
      - median
      - categorical_count
      - accuracy
      title: AggregationFunctionType
      description: "Types of aggregation functions for scoring results.\n:cvar average: Calculate the arithmetic mean of scores\n:cvar weighted_average: Calculate a weighted average of scores\n:cvar median: Calculate the median value of scores\n:cvar categorical_count: Count occurrences of categorical values\n:cvar accuracy: Calculate accuracy as the proportion of correct answers"
    AllowedToolsFilter:
      properties:
        tool_names:
          title: Tool Names
          items:
            type: string
          type: array
      type: object
      title: AllowedToolsFilter
      description: "Filter configuration for restricting which MCP tools can be used.\n\n:param tool_names: (Optional) List of specific tool names that are allowed"
    ApprovalFilter:
      properties:
        always:
          title: Always
          items:
            type: string
          type: array
        never:
          title: Never
          items:
            type: string
          type: array
      type: object
      title: ApprovalFilter
      description: "Filter configuration for MCP tool approval requirements.\n\n:param always: (Optional) List of tool names that always require approval\n:param never: (Optional) List of tool names that never require approval"
    ArrayType:
      properties:
        type:
          type: string
          const: array
          title: Type
          default: array
      type: object
      title: ArrayType
      description: "Parameter type for array values.\n\n:param type: Discriminator type. Always \"array\""
    Attachment-Output:
      properties:
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Output'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Output'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Output'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Output'
                  text: '#/components/schemas/TextContentItem'
            type: array
          - $ref: '#/components/schemas/URL'
          title: Content
        mime_type:
          type: string
          title: Mime Type
      type: object
      required:
      - content
      - mime_type
      title: Attachment
      description: "An attachment to an agent turn.\n\n:param content: The content of the attachment.\n:param mime_type: The MIME type of the attachment."
    BasicScoringFnParams:
      properties:
        type:
          type: string
          const: basic
          title: Type
          default: basic
        aggregation_functions:
          items:
            $ref: '#/components/schemas/AggregationFunctionType'
          type: array
          title: Aggregation Functions
          description: Aggregation functions to apply to the scores of each row
      type: object
      title: BasicScoringFnParams
      description: "Parameters for basic scoring function configuration.\n:param type: The type of scoring function parameters, always basic\n:param aggregation_functions: Aggregation functions to apply to the scores of each row"
    Batch:
      properties:
        id:
          type: string
          title: Id
        completion_window:
          type: string
          title: Completion Window
        created_at:
          type: integer
          title: Created At
        endpoint:
          type: string
          title: Endpoint
        input_file_id:
          type: string
          title: Input File Id
        object:
          type: string
          const: batch
          title: Object
        status:
          type: string
          enum:
          - validating
          - failed
          - in_progress
          - finalizing
          - completed
          - expired
          - cancelling
          - cancelled
          title: Status
        cancelled_at:
          title: Cancelled At
          type: integer
        cancelling_at:
          title: Cancelling At
          type: integer
        completed_at:
          title: Completed At
          type: integer
        error_file_id:
          title: Error File Id
          type: string
        errors:
          $ref: '#/components/schemas/Errors'
        expired_at:
          title: Expired At
          type: integer
        expires_at:
          title: Expires At
          type: integer
        failed_at:
          title: Failed At
          type: integer
        finalizing_at:
          title: Finalizing At
          type: integer
        in_progress_at:
          title: In Progress At
          type: integer
        metadata:
          title: Metadata
          additionalProperties:
            type: string
          type: object
        model:
          title: Model
          type: string
        output_file_id:
          title: Output File Id
          type: string
        request_counts:
          $ref: '#/components/schemas/BatchRequestCounts'
        usage:
          $ref: '#/components/schemas/BatchUsage'
      additionalProperties: true
      type: object
      required:
      - id
      - completion_window
      - created_at
      - endpoint
      - input_file_id
      - object
      - status
      title: Batch
    BatchError:
      properties:
        code:
          title: Code
          type: string
        line:
          title: Line
          type: integer
        message:
          title: Message
          type: string
        param:
          title: Param
          type: string
      additionalProperties: true
      type: object
      title: BatchError
    BatchRequestCounts:
      properties:
        completed:
          type: integer
          title: Completed
        failed:
          type: integer
          title: Failed
        total:
          type: integer
          title: Total
      additionalProperties: true
      type: object
      required:
      - completed
      - failed
      - total
      title: BatchRequestCounts
    BatchUsage:
      properties:
        input_tokens:
          type: integer
          title: Input Tokens
        input_tokens_details:
          $ref: '#/components/schemas/InputTokensDetails'
        output_tokens:
          type: integer
          title: Output Tokens
        output_tokens_details:
          $ref: '#/components/schemas/OutputTokensDetails'
        total_tokens:
          type: integer
          title: Total Tokens
      additionalProperties: true
      type: object
      required:
      - input_tokens
      - input_tokens_details
      - output_tokens
      - output_tokens_details
      - total_tokens
      title: BatchUsage
    Benchmark:
      properties:
        identifier:
          type: string
          title: Identifier
          description: Unique identifier for this resource in llama stack
        provider_resource_id:
          title: Provider Resource Id
          description: Unique identifier for this resource in the provider
          type: string
        provider_id:
          type: string
          title: Provider Id
          description: ID of the provider that owns this resource
        type:
          type: string
          const: benchmark
          title: Type
          default: benchmark
        dataset_id:
          type: string
          title: Dataset Id
        scoring_functions:
          items:
            type: string
          type: array
          title: Scoring Functions
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
          description: Metadata for this evaluation task
      type: object
      required:
      - identifier
      - provider_id
      - dataset_id
      - scoring_functions
      title: Benchmark
      description: "A benchmark resource for evaluating model performance.\n\n:param dataset_id: Identifier of the dataset to use for the benchmark evaluation\n:param scoring_functions: List of scoring function identifiers to apply during evaluation\n:param metadata: Metadata for this evaluation task\n:param type: The resource type, always benchmark"
    BenchmarkConfig:
      properties:
        eval_candidate:
          oneOf:
          - $ref: '#/components/schemas/ModelCandidate'
          - $ref: '#/components/schemas/AgentCandidate'
          title: Eval Candidate
          discriminator:
            propertyName: type
            mapping:
              agent: '#/components/schemas/AgentCandidate'
              model: '#/components/schemas/ModelCandidate'
        scoring_params:
          additionalProperties:
            oneOf:
            - $ref: '#/components/schemas/LLMAsJudgeScoringFnParams'
            - $ref: '#/components/schemas/RegexParserScoringFnParams'
            - $ref: '#/components/schemas/BasicScoringFnParams'
            discriminator:
              propertyName: type
              mapping:
                basic: '#/components/schemas/BasicScoringFnParams'
                llm_as_judge: '#/components/schemas/LLMAsJudgeScoringFnParams'
                regex_parser: '#/components/schemas/RegexParserScoringFnParams'
          type: object
          title: Scoring Params
          description: Map between scoring function id and parameters for each scoring function you want to run
        num_examples:
          title: Num Examples
          description: Number of examples to evaluate (useful for testing), if not provided, all examples in the dataset will be evaluated
          type: integer
      type: object
      required:
      - eval_candidate
      title: BenchmarkConfig
      description: "A benchmark configuration for evaluation.\n\n:param eval_candidate: The candidate to evaluate.\n:param scoring_params: Map between scoring function id and parameters for each scoring function you want to run\n:param num_examples: (Optional) The number of examples to evaluate. If not provided, all examples in the dataset will be evaluated"
    BooleanType:
      properties:
        type:
          type: string
          const: boolean
          title: Type
          default: boolean
      type: object
      title: BooleanType
      description: "Parameter type for boolean values.\n\n:param type: Discriminator type. Always \"boolean\""
    BuiltinTool:
      type: string
      enum:
      - brave_search
      - wolfram_alpha
      - photogen
      - code_interpreter
      title: BuiltinTool
    ChatCompletionInputType:
      properties:
        type:
          type: string
          const: chat_completion_input
          title: Type
          default: chat_completion_input
      type: object
      title: ChatCompletionInputType
      description: "Parameter type for chat completion input.\n\n:param type: Discriminator type. Always \"chat_completion_input\""
    Chunk-Output:
      properties:
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Output'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Output'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Output'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Output'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Content
        chunk_id:
          type: string
          title: Chunk Id
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
        embedding:
          title: Embedding
          items:
            type: number
          type: array
        chunk_metadata:
          $ref: '#/components/schemas/ChunkMetadata'
      type: object
      required:
      - content
      - chunk_id
      title: Chunk
      description: "A chunk of content that can be inserted into a vector database.\n:param content: The content of the chunk, which can be interleaved text, images, or other types.\n:param chunk_id: Unique identifier for the chunk. Must be provided explicitly.\n:param metadata: Metadata associated with the chunk that will be used in the model context during inference.\n:param embedding: Optional embedding for the chunk. If not provided, it will be computed later.\n:param chunk_metadata: Metadata for the chunk that will NOT be used in the context during inference.\n    The `chunk_metadata` is required backend functionality."
    ChunkMetadata:
      properties:
        chunk_id:
          title: Chunk Id
          type: string
        document_id:
          title: Document Id
          type: string
        source:
          title: Source
          type: string
        created_timestamp:
          title: Created Timestamp
          type: integer
        updated_timestamp:
          title: Updated Timestamp
          type: integer
        chunk_window:
          title: Chunk Window
          type: string
        chunk_tokenizer:
          title: Chunk Tokenizer
          type: string
        chunk_embedding_model:
          title: Chunk Embedding Model
          type: string
        chunk_embedding_dimension:
          title: Chunk Embedding Dimension
          type: integer
        content_token_count:
          title: Content Token Count
          type: integer
        metadata_token_count:
          title: Metadata Token Count
          type: integer
      type: object
      title: ChunkMetadata
      description: "`ChunkMetadata` is backend metadata for a `Chunk` that is used to store additional information about the chunk that\n    will not be used in the context during inference, but is required for backend functionality. The `ChunkMetadata`\n    is set during chunk creation in `MemoryToolRuntimeImpl().insert()`and is not expected to change after.\n    Use `Chunk.metadata` for metadata that will be used in the context during inference.\n:param chunk_id: The ID of the chunk. If not set, it will be generated based on the document ID and content.\n:param document_id: The ID of the document this chunk belongs to.\n:param source: The source of the content, such as a URL, file path, or other identifier.\n:param created_timestamp: An optional timestamp indicating when the chunk was created.\n:param updated_timestamp: An optional timestamp indicating when the chunk was last updated.\n:param chunk_window: The window of the chunk, which can be used to group related chunks together.\n:param chunk_tokenizer: The tokenizer used to create the chunk. Default is Tiktoken.\n:param chunk_embedding_model: The embedding model used to create the chunk's embedding.\n:param chunk_embedding_dimension: The dimension of the embedding vector for the chunk.\n:param content_token_count: The number of tokens in the content of the chunk.\n:param metadata_token_count: The number of tokens in the metadata of the chunk."
    CompletionInputType:
      properties:
        type:
          type: string
          const: completion_input
          title: Type
          default: completion_input
      type: object
      title: CompletionInputType
      description: "Parameter type for completion input.\n\n:param type: Discriminator type. Always \"completion_input\""
    CompletionMessage-Output:
      properties:
        role:
          type: string
          const: assistant
          title: Role
          default: assistant
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Output'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Output'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Output'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Output'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Content
        stop_reason:
          $ref: '#/components/schemas/StopReason'
        tool_calls:
          title: Tool Calls
          items:
            $ref: '#/components/schemas/ToolCall'
          type: array
      type: object
      required:
      - content
      - stop_reason
      title: CompletionMessage
      description: "A message containing the model's (assistant) response in a chat conversation.\n\n:param role: Must be \"assistant\" to identify this as the model's response\n:param content: The content of the model's response\n:param stop_reason: Reason why the model stopped generating. Options are:\n    - `StopReason.end_of_turn`: The model finished generating the entire response.\n    - `StopReason.end_of_message`: The model finished generating but generated a partial response -- usually, a tool call. The user may call the tool and continue the conversation with the tool's response.\n    - `StopReason.out_of_tokens`: The model ran out of token budget.\n:param tool_calls: List of tool calls. Each tool call is a ToolCall object."
    Conversation:
      properties:
        id:
          type: string
          title: Id
          description: The unique ID of the conversation.
        object:
          type: string
          const: conversation
          title: Object
          description: The object type, which is always conversation.
          default: conversation
        created_at:
          type: integer
          title: Created At
          description: The time at which the conversation was created, measured in seconds since the Unix epoch.
        metadata:
          title: Metadata
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.
          additionalProperties:
            type: string
          type: object
        items:
          title: Items
          description: Initial items to include in the conversation context. You may add up to 20 items at a time.
          items:
            additionalProperties: true
            type: object
          type: array
      type: object
      required:
      - id
      - created_at
      title: Conversation
      description: OpenAI-compatible conversation object.
    ConversationItemInclude:
      type: string
      enum:
      - web_search_call.action.sources
      - code_interpreter_call.outputs
      - computer_call_output.output.image_url
      - file_search_call.results
      - message.input_image.image_url
      - message.output_text.logprobs
      - reasoning.encrypted_content
      title: ConversationItemInclude
      description: Specify additional output data to include in the model response.
    ConversationItemList:
      properties:
        object:
          type: string
          title: Object
          description: Object type
          default: list
        data:
          items:
            oneOf:
            - $ref: '#/components/schemas/OpenAIResponseMessage-Output'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
            - $ref: '#/components/schemas/OpenAIResponseInputFunctionToolCallOutput'
            - $ref: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
            - $ref: '#/components/schemas/OpenAIResponseMCPApprovalResponse'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
            discriminator:
              propertyName: type
              mapping:
                file_search_call: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
                function_call: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
                function_call_output: '#/components/schemas/OpenAIResponseInputFunctionToolCallOutput'
                mcp_approval_request: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
                mcp_approval_response: '#/components/schemas/OpenAIResponseMCPApprovalResponse'
                mcp_call: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
                mcp_list_tools: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
                message: '#/components/schemas/OpenAIResponseMessage-Output'
                web_search_call: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
          type: array
          title: Data
          description: List of conversation items
        first_id:
          title: First Id
          description: The ID of the first item in the list
          type: string
        last_id:
          title: Last Id
          description: The ID of the last item in the list
          type: string
        has_more:
          type: boolean
          title: Has More
          description: Whether there are more items available
          default: false
      type: object
      required:
      - data
      title: ConversationItemList
      description: List of conversation items with pagination.
    DPOAlignmentConfig:
      properties:
        beta:
          type: number
          title: Beta
        loss_type:
          $ref: '#/components/schemas/DPOLossType'
          default: sigmoid
      type: object
      required:
      - beta
      title: DPOAlignmentConfig
      description: "Configuration for Direct Preference Optimization (DPO) alignment.\n\n:param beta: Temperature parameter for the DPO loss\n:param loss_type: The type of loss function to use for DPO"
    DPOLossType:
      type: string
      enum:
      - sigmoid
      - hinge
      - ipo
      - kto_pair
      title: DPOLossType
    DataConfig:
      properties:
        dataset_id:
          type: string
          title: Dataset Id
        batch_size:
          type: integer
          title: Batch Size
        shuffle:
          type: boolean
          title: Shuffle
        data_format:
          $ref: '#/components/schemas/DatasetFormat'
        validation_dataset_id:
          title: Validation Dataset Id
          type: string
        packed:
          title: Packed
          default: false
          type: boolean
        train_on_input:
          title: Train On Input
          default: false
          type: boolean
      type: object
      required:
      - dataset_id
      - batch_size
      - shuffle
      - data_format
      title: DataConfig
      description: "Configuration for training data and data loading.\n\n:param dataset_id: Unique identifier for the training dataset\n:param batch_size: Number of samples per training batch\n:param shuffle: Whether to shuffle the dataset during training\n:param data_format: Format of the dataset (instruct or dialog)\n:param validation_dataset_id: (Optional) Unique identifier for the validation dataset\n:param packed: (Optional) Whether to pack multiple samples into a single sequence for efficiency\n:param train_on_input: (Optional) Whether to compute loss on input tokens as well as output tokens"
    Dataset:
      properties:
        identifier:
          type: string
          title: Identifier
          description: Unique identifier for this resource in llama stack
        provider_resource_id:
          title: Provider Resource Id
          description: Unique identifier for this resource in the provider
          type: string
        provider_id:
          type: string
          title: Provider Id
          description: ID of the provider that owns this resource
        type:
          type: string
          const: dataset
          title: Type
          default: dataset
        purpose:
          $ref: '#/components/schemas/DatasetPurpose'
        source:
          oneOf:
          - $ref: '#/components/schemas/URIDataSource'
          - $ref: '#/components/schemas/RowsDataSource'
          title: Source
          discriminator:
            propertyName: type
            mapping:
              rows: '#/components/schemas/RowsDataSource'
              uri: '#/components/schemas/URIDataSource'
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
          description: Any additional metadata for this dataset
      type: object
      required:
      - identifier
      - provider_id
      - purpose
      - source
      title: Dataset
      description: "Dataset resource for storing and accessing training or evaluation data.\n\n:param type: Type of resource, always 'dataset' for datasets"
    DatasetFormat:
      type: string
      enum:
      - instruct
      - dialog
      title: DatasetFormat
      description: "Format of the training dataset.\n:cvar instruct: Instruction-following format with prompt and completion\n:cvar dialog: Multi-turn conversation format with messages"
    DatasetPurpose:
      type: string
      enum:
      - post-training/messages
      - eval/question-answer
      - eval/messages-answer
      title: DatasetPurpose
      description: "Purpose of the dataset. Each purpose has a required input data schema.\n\n:cvar post-training/messages: The dataset contains messages used for post-training.\n    {\n        \"messages\": [\n            {\"role\": \"user\", \"content\": \"Hello, world!\"},\n            {\"role\": \"assistant\", \"content\": \"Hello, world!\"},\n        ]\n    }\n:cvar eval/question-answer: The dataset contains a question column and an answer column.\n    {\n        \"question\": \"What is the capital of France?\",\n        \"answer\": \"Paris\"\n    }\n:cvar eval/messages-answer: The dataset contains a messages column with list of messages and an answer column.\n    {\n        \"messages\": [\n            {\"role\": \"user\", \"content\": \"Hello, my name is John Doe.\"},\n            {\"role\": \"assistant\", \"content\": \"Hello, John Doe. How can I help you today?\"},\n            {\"role\": \"user\", \"content\": \"What's my name?\"},\n        ],\n        \"answer\": \"John Doe\"\n    }"
    DefaultRAGQueryGeneratorConfig:
      properties:
        type:
          type: string
          const: default
          title: Type
          default: default
        separator:
          type: string
          title: Separator
          default: ' '
      type: object
      title: DefaultRAGQueryGeneratorConfig
      description: "Configuration for the default RAG query generator.\n\n:param type: Type of query generator, always 'default'\n:param separator: String separator used to join query terms"
    Document:
      properties:
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Input'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Input'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Input'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Input'
                  text: '#/components/schemas/TextContentItem'
            type: array
          - $ref: '#/components/schemas/URL'
          title: Content
        mime_type:
          type: string
          title: Mime Type
      type: object
      required:
      - content
      - mime_type
      title: Document
      description: "A document to be used by an agent.\n\n:param content: The content of the document.\n:param mime_type: The MIME type of the document."
    EfficiencyConfig:
      properties:
        enable_activation_checkpointing:
          title: Enable Activation Checkpointing
          default: false
          type: boolean
        enable_activation_offloading:
          title: Enable Activation Offloading
          default: false
          type: boolean
        memory_efficient_fsdp_wrap:
          title: Memory Efficient Fsdp Wrap
          default: false
          type: boolean
        fsdp_cpu_offload:
          title: Fsdp Cpu Offload
          default: false
          type: boolean
      type: object
      title: EfficiencyConfig
      description: "Configuration for memory and compute efficiency optimizations.\n\n:param enable_activation_checkpointing: (Optional) Whether to use activation checkpointing to reduce memory usage\n:param enable_activation_offloading: (Optional) Whether to offload activations to CPU to save GPU memory\n:param memory_efficient_fsdp_wrap: (Optional) Whether to use memory-efficient FSDP wrapping\n:param fsdp_cpu_offload: (Optional) Whether to offload FSDP parameters to CPU"
    Errors:
      properties:
        data:
          title: Data
          items:
            $ref: '#/components/schemas/BatchError'
          type: array
        object:
          title: Object
          type: string
      additionalProperties: true
      type: object
      title: Errors
    EvaluateResponse:
      properties:
        generations:
          items:
            additionalProperties: true
            type: object
          type: array
          title: Generations
        scores:
          additionalProperties:
            $ref: '#/components/schemas/ScoringResult'
          type: object
          title: Scores
      type: object
      required:
      - generations
      - scores
      title: EvaluateResponse
      description: "The response from an evaluation.\n\n:param generations: The generations from the evaluation.\n:param scores: The scores from the evaluation."
    GrammarResponseFormat:
      properties:
        type:
          type: string
          const: grammar
          title: Type
          default: grammar
        bnf:
          additionalProperties: true
          type: object
          title: Bnf
      type: object
      required:
      - bnf
      title: GrammarResponseFormat
      description: "Configuration for grammar-guided response generation.\n\n:param type: Must be \"grammar\" to identify this format type\n:param bnf: The BNF grammar specification the response should conform to"
    GreedySamplingStrategy:
      properties:
        type:
          type: string
          const: greedy
          title: Type
          default: greedy
      type: object
      title: GreedySamplingStrategy
      description: "Greedy sampling strategy that selects the highest probability token at each step.\n\n:param type: Must be \"greedy\" to identify this sampling strategy"
    HealthInfo:
      properties:
        status:
          $ref: '#/components/schemas/HealthStatus'
      type: object
      required:
      - status
      title: HealthInfo
      description: "Health status information for the service.\n\n:param status: Current health status of the service"
    HealthStatus:
      type: string
      enum:
      - OK
      - Error
      - Not Implemented
      title: HealthStatus
    ImageContentItem-Input:
      properties:
        type:
          type: string
          const: image
          title: Type
          default: image
        image:
          $ref: '#/components/schemas/_URLOrData'
      type: object
      required:
      - image
      title: ImageContentItem
      description: "A image content item\n\n:param type: Discriminator type of the content item. Always \"image\"\n:param image: Image as a base64 encoded string or an URL"
    ImageContentItem-Output:
      properties:
        type:
          type: string
          const: image
          title: Type
          default: image
        image:
          $ref: '#/components/schemas/_URLOrData'
      type: object
      required:
      - image
      title: ImageContentItem
      description: "A image content item\n\n:param type: Discriminator type of the content item. Always \"image\"\n:param image: Image as a base64 encoded string or an URL"
    InferenceStep-Output:
      properties:
        turn_id:
          type: string
          title: Turn Id
        step_id:
          type: string
          title: Step Id
        started_at:
          title: Started At
          type: string
          format: date-time
        completed_at:
          title: Completed At
          type: string
          format: date-time
        step_type:
          type: string
          const: inference
          title: Step Type
          default: inference
        model_response:
          $ref: '#/components/schemas/CompletionMessage-Output'
      type: object
      required:
      - turn_id
      - step_id
      - model_response
      title: InferenceStep
      description: "An inference step in an agent turn.\n\n:param model_response: The response from the LLM."
    InputTokensDetails:
      properties:
        cached_tokens:
          type: integer
          title: Cached Tokens
      additionalProperties: true
      type: object
      required:
      - cached_tokens
      title: InputTokensDetails
    Job:
      properties:
        job_id:
          type: string
          title: Job Id
        status:
          $ref: '#/components/schemas/JobStatus'
      type: object
      required:
      - job_id
      - status
      title: Job
      description: "A job execution instance with status tracking.\n\n:param job_id: Unique identifier for the job\n:param status: Current execution status of the job"
    JobStatus:
      type: string
      enum:
      - completed
      - in_progress
      - failed
      - scheduled
      - cancelled
      title: JobStatus
      description: "Status of a job execution.\n:cvar completed: Job has finished successfully\n:cvar in_progress: Job is currently running\n:cvar failed: Job has failed during execution\n:cvar scheduled: Job is scheduled but not yet started\n:cvar cancelled: Job was cancelled before completion"
    JsonSchemaResponseFormat:
      properties:
        type:
          type: string
          const: json_schema
          title: Type
          default: json_schema
        json_schema:
          additionalProperties: true
          type: object
          title: Json Schema
      type: object
      required:
      - json_schema
      title: JsonSchemaResponseFormat
      description: "Configuration for JSON schema-guided response generation.\n\n:param type: Must be \"json_schema\" to identify this format type\n:param json_schema: The JSON schema the response should conform to. In a Python SDK, this is often a `pydantic` model."
    JsonType:
      properties:
        type:
          type: string
          const: json
          title: Type
          default: json
      type: object
      title: JsonType
      description: "Parameter type for JSON values.\n\n:param type: Discriminator type. Always \"json\""
    LLMAsJudgeScoringFnParams:
      properties:
        type:
          type: string
          const: llm_as_judge
          title: Type
          default: llm_as_judge
        judge_model:
          type: string
          title: Judge Model
        prompt_template:
          title: Prompt Template
          type: string
        judge_score_regexes:
          items:
            type: string
          type: array
          title: Judge Score Regexes
          description: Regexes to extract the answer from generated response
        aggregation_functions:
          items:
            $ref: '#/components/schemas/AggregationFunctionType'
          type: array
          title: Aggregation Functions
          description: Aggregation functions to apply to the scores of each row
      type: object
      required:
      - judge_model
      title: LLMAsJudgeScoringFnParams
      description: "Parameters for LLM-as-judge scoring function configuration.\n:param type: The type of scoring function parameters, always llm_as_judge\n:param judge_model: Identifier of the LLM model to use as a judge for scoring\n:param prompt_template: (Optional) Custom prompt template for the judge model\n:param judge_score_regexes: Regexes to extract the answer from generated response\n:param aggregation_functions: Aggregation functions to apply to the scores of each row"
    LLMRAGQueryGeneratorConfig:
      properties:
        type:
          type: string
          const: llm
          title: Type
          default: llm
        model:
          type: string
          title: Model
        template:
          type: string
          title: Template
      type: object
      required:
      - model
      - template
      title: LLMRAGQueryGeneratorConfig
      description: "Configuration for the LLM-based RAG query generator.\n\n:param type: Type of query generator, always 'llm'\n:param model: Name of the language model to use for query generation\n:param template: Template string for formatting the query generation prompt"
    ListBenchmarksResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Benchmark'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListBenchmarksResponse
    ListDatasetsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Dataset'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListDatasetsResponse
      description: "Response from listing datasets.\n\n:param data: List of datasets"
    ListModelsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Model'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListModelsResponse
    ListPostTrainingJobsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/PostTrainingJob'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListPostTrainingJobsResponse
    ListPromptsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Prompt'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListPromptsResponse
      description: Response model to list prompts.
    ListProvidersResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ProviderInfo'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListProvidersResponse
      description: "Response containing a list of all available providers.\n\n:param data: List of provider information objects"
    ListRoutesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/RouteInfo'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListRoutesResponse
      description: "Response containing a list of all available API routes.\n\n:param data: List of available route information objects"
    ListScoringFunctionsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ScoringFn-Output'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListScoringFunctionsResponse
    ListShieldsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Shield'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListShieldsResponse
    ListToolGroupsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ToolGroup'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ListToolGroupsResponse
      description: "Response containing a list of tool groups.\n\n:param data: List of tool groups"
    MCPListToolsTool:
      properties:
        input_schema:
          additionalProperties: true
          type: object
          title: Input Schema
        name:
          type: string
          title: Name
        description:
          title: Description
          type: string
      type: object
      required:
      - input_schema
      - name
      title: MCPListToolsTool
      description: "Tool definition returned by MCP list tools operation.\n\n:param input_schema: JSON schema defining the tool's input parameters\n:param name: Name of the tool\n:param description: (Optional) Description of what the tool does"
    MemoryRetrievalStep-Output:
      properties:
        turn_id:
          type: string
          title: Turn Id
        step_id:
          type: string
          title: Step Id
        started_at:
          title: Started At
          type: string
          format: date-time
        completed_at:
          title: Completed At
          type: string
          format: date-time
        step_type:
          type: string
          const: memory_retrieval
          title: Step Type
          default: memory_retrieval
        vector_store_ids:
          type: string
          title: Vector Store Ids
        inserted_context:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Output'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Output'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Output'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Output'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Inserted Context
      type: object
      required:
      - turn_id
      - step_id
      - vector_store_ids
      - inserted_context
      title: MemoryRetrievalStep
      description: "A memory retrieval step in an agent turn.\n\n:param vector_store_ids: The IDs of the vector databases to retrieve context from.\n:param inserted_context: The context retrieved from the vector databases."
    Model:
      properties:
        identifier:
          type: string
          title: Identifier
          description: Unique identifier for this resource in llama stack
        provider_resource_id:
          title: Provider Resource Id
          description: Unique identifier for this resource in the provider
          type: string
        provider_id:
          type: string
          title: Provider Id
          description: ID of the provider that owns this resource
        type:
          type: string
          const: model
          title: Type
          default: model
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
          description: Any additional metadata for this model
        model_type:
          $ref: '#/components/schemas/ModelType'
          default: llm
      type: object
      required:
      - identifier
      - provider_id
      title: Model
      description: "A model resource representing an AI model registered in Llama Stack.\n\n:param type: The resource type, always 'model' for model resources\n:param model_type: The type of model (LLM or embedding model)\n:param metadata: Any additional metadata for this model\n:param identifier: Unique identifier for this resource in llama stack\n:param provider_resource_id: Unique identifier for this resource in the provider\n:param provider_id: ID of the provider that owns this resource"
    ModelCandidate:
      properties:
        type:
          type: string
          const: model
          title: Type
          default: model
        model:
          type: string
          title: Model
        sampling_params:
          $ref: '#/components/schemas/SamplingParams'
        system_message:
          $ref: '#/components/schemas/SystemMessage'
      type: object
      required:
      - model
      - sampling_params
      title: ModelCandidate
      description: "A model candidate for evaluation.\n\n:param model: The model ID to evaluate.\n:param sampling_params: The sampling parameters for the model.\n:param system_message: (Optional) The system message providing instructions or context to the model."
    ModelType:
      type: string
      enum:
      - llm
      - embedding
      - rerank
      title: ModelType
      description: "Enumeration of supported model types in Llama Stack.\n:cvar llm: Large language model for text generation and completion\n:cvar embedding: Embedding model for converting text to vector representations\n:cvar rerank: Reranking model for reordering documents based on their relevance to a query"
    ModerationObject:
      properties:
        id:
          type: string
          title: Id
        model:
          type: string
          title: Model
        results:
          items:
            $ref: '#/components/schemas/ModerationObjectResults'
          type: array
          title: Results
      type: object
      required:
      - id
      - model
      - results
      title: ModerationObject
      description: "A moderation object.\n:param id: The unique identifier for the moderation request.\n:param model: The model used to generate the moderation results.\n:param results: A list of moderation objects"
    ModerationObjectResults:
      properties:
        flagged:
          type: boolean
          title: Flagged
        categories:
          title: Categories
          additionalProperties:
            type: boolean
          type: object
        category_applied_input_types:
          title: Category Applied Input Types
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        category_scores:
          title: Category Scores
          additionalProperties:
            type: number
          type: object
        user_message:
          title: User Message
          type: string
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
      type: object
      required:
      - flagged
      title: ModerationObjectResults
      description: "A moderation object.\n:param flagged: Whether any of the below categories are flagged.\n:param categories: A list of the categories, and whether they are flagged or not.\n:param category_applied_input_types: A list of the categories along with the input type(s) that the score applies to.\n:param category_scores: A list of the categories along with their scores as predicted by model."
    NumberType:
      properties:
        type:
          type: string
          const: number
          title: Type
          default: number
      type: object
      title: NumberType
      description: "Parameter type for numeric values.\n\n:param type: Discriminator type. Always \"number\""
    ObjectType:
      properties:
        type:
          type: string
          const: object
          title: Type
          default: object
      type: object
      title: ObjectType
      description: "Parameter type for object values.\n\n:param type: Discriminator type. Always \"object\""
    OpenAIAssistantMessageParam-Input:
      properties:
        role:
          type: string
          const: assistant
          title: Role
          default: assistant
        content:
          anyOf:
          - type: string
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
        name:
          title: Name
          type: string
        tool_calls:
          title: Tool Calls
          items:
            $ref: '#/components/schemas/OpenAIChatCompletionToolCall'
          type: array
      type: object
      title: OpenAIAssistantMessageParam
      description: "A message containing the model's (assistant) response in an OpenAI-compatible chat completion request.\n\n:param role: Must be \"assistant\" to identify this as the model's response\n:param content: The content of the model's response\n:param name: (Optional) The name of the assistant message participant.\n:param tool_calls: List of tool calls. Each tool call is an OpenAIChatCompletionToolCall object."
    OpenAIAssistantMessageParam-Output:
      properties:
        role:
          type: string
          const: assistant
          title: Role
          default: assistant
        content:
          anyOf:
          - type: string
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
        name:
          title: Name
          type: string
        tool_calls:
          title: Tool Calls
          items:
            $ref: '#/components/schemas/OpenAIChatCompletionToolCall'
          type: array
      type: object
      title: OpenAIAssistantMessageParam
      description: "A message containing the model's (assistant) response in an OpenAI-compatible chat completion request.\n\n:param role: Must be \"assistant\" to identify this as the model's response\n:param content: The content of the model's response\n:param name: (Optional) The name of the assistant message participant.\n:param tool_calls: List of tool calls. Each tool call is an OpenAIChatCompletionToolCall object."
    OpenAIChatCompletion:
      properties:
        id:
          type: string
          title: Id
        choices:
          items:
            $ref: '#/components/schemas/OpenAIChoice-Output'
          type: array
          title: Choices
        object:
          type: string
          const: chat.completion
          title: Object
          default: chat.completion
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        usage:
          $ref: '#/components/schemas/OpenAIChatCompletionUsage'
      type: object
      required:
      - id
      - choices
      - created
      - model
      title: OpenAIChatCompletion
      description: "Response from an OpenAI-compatible chat completion request.\n\n:param id: The ID of the chat completion\n:param choices: List of choices\n:param object: The object type, which will be \"chat.completion\"\n:param created: The Unix timestamp in seconds when the chat completion was created\n:param model: The model that was used to generate the chat completion\n:param usage: Token usage information for the completion"
    OpenAIChatCompletionContentPartImageParam:
      properties:
        type:
          type: string
          const: image_url
          title: Type
          default: image_url
        image_url:
          $ref: '#/components/schemas/OpenAIImageURL'
      type: object
      required:
      - image_url
      title: OpenAIChatCompletionContentPartImageParam
      description: "Image content part for OpenAI-compatible chat completion messages.\n\n:param type: Must be \"image_url\" to identify this as image content\n:param image_url: Image URL specification and processing details"
    OpenAIChatCompletionContentPartTextParam:
      properties:
        type:
          type: string
          const: text
          title: Type
          default: text
        text:
          type: string
          title: Text
      type: object
      required:
      - text
      title: OpenAIChatCompletionContentPartTextParam
      description: "Text content part for OpenAI-compatible chat completion messages.\n\n:param type: Must be \"text\" to identify this as text content\n:param text: The text content of the message"
    OpenAIChatCompletionRequestWithExtraBody:
      properties:
        model:
          type: string
          title: Model
        messages:
          items:
            oneOf:
            - $ref: '#/components/schemas/OpenAIUserMessageParam-Input'
            - $ref: '#/components/schemas/OpenAISystemMessageParam'
            - $ref: '#/components/schemas/OpenAIAssistantMessageParam-Input'
            - $ref: '#/components/schemas/OpenAIToolMessageParam'
            - $ref: '#/components/schemas/OpenAIDeveloperMessageParam'
            discriminator:
              propertyName: role
              mapping:
                assistant: '#/components/schemas/OpenAIAssistantMessageParam-Input'
                developer: '#/components/schemas/OpenAIDeveloperMessageParam'
                system: '#/components/schemas/OpenAISystemMessageParam'
                tool: '#/components/schemas/OpenAIToolMessageParam'
                user: '#/components/schemas/OpenAIUserMessageParam-Input'
          type: array
          minItems: 1
          title: Messages
        frequency_penalty:
          title: Frequency Penalty
          type: number
        function_call:
          anyOf:
          - type: string
          - additionalProperties: true
            type: object
          title: Function Call
        functions:
          title: Functions
          items:
            additionalProperties: true
            type: object
          type: array
        logit_bias:
          title: Logit Bias
          additionalProperties:
            type: number
          type: object
        logprobs:
          title: Logprobs
          type: boolean
        max_completion_tokens:
          title: Max Completion Tokens
          type: integer
        max_tokens:
          title: Max Tokens
          type: integer
        n:
          title: N
          type: integer
        parallel_tool_calls:
          title: Parallel Tool Calls
          type: boolean
        presence_penalty:
          title: Presence Penalty
          type: number
        response_format:
          title: Response Format
          oneOf:
          - $ref: '#/components/schemas/OpenAIResponseFormatText'
          - $ref: '#/components/schemas/OpenAIResponseFormatJSONSchema'
          - $ref: '#/components/schemas/OpenAIResponseFormatJSONObject'
          discriminator:
            propertyName: type
            mapping:
              json_object: '#/components/schemas/OpenAIResponseFormatJSONObject'
              json_schema: '#/components/schemas/OpenAIResponseFormatJSONSchema'
              text: '#/components/schemas/OpenAIResponseFormatText'
        seed:
          title: Seed
          type: integer
        stop:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          title: Stop
        stream:
          title: Stream
          type: boolean
        stream_options:
          title: Stream Options
          additionalProperties: true
          type: object
        temperature:
          title: Temperature
          type: number
        tool_choice:
          anyOf:
          - type: string
          - additionalProperties: true
            type: object
          title: Tool Choice
        tools:
          title: Tools
          items:
            additionalProperties: true
            type: object
          type: array
        top_logprobs:
          title: Top Logprobs
          type: integer
        top_p:
          title: Top P
          type: number
        user:
          title: User
          type: string
      additionalProperties: true
      type: object
      required:
      - model
      - messages
      title: OpenAIChatCompletionRequestWithExtraBody
      description: "Request parameters for OpenAI-compatible chat completion endpoint.\n\n:param model: The identifier of the model to use. The model must be registered with Llama Stack and available via the /models endpoint.\n:param messages: List of messages in the conversation.\n:param frequency_penalty: (Optional) The penalty for repeated tokens.\n:param function_call: (Optional) The function call to use.\n:param functions: (Optional) List of functions to use.\n:param logit_bias: (Optional) The logit bias to use.\n:param logprobs: (Optional) The log probabilities to use.\n:param max_completion_tokens: (Optional) The maximum number of tokens to generate.\n:param max_tokens: (Optional) The maximum number of tokens to generate.\n:param n: (Optional) The number of completions to generate.\n:param parallel_tool_calls: (Optional) Whether to parallelize tool calls.\n:param presence_penalty: (Optional) The penalty for repeated tokens.\n:param response_format: (Optional) The response format to use.\n:param seed: (Optional) The seed to use.\n:param stop: (Optional) The stop tokens to use.\n:param stream: (Optional) Whether to stream the response.\n:param stream_options: (Optional) The stream options to use.\n:param temperature: (Optional) The temperature to use.\n:param tool_choice: (Optional) The tool choice to use.\n:param tools: (Optional) The tools to use.\n:param top_logprobs: (Optional) The top log probabilities to use.\n:param top_p: (Optional) The top p to use.\n:param user: (Optional) The user to use."
    OpenAIChatCompletionToolCall:
      properties:
        index:
          title: Index
          type: integer
        id:
          title: Id
          type: string
        type:
          type: string
          const: function
          title: Type
          default: function
        function:
          $ref: '#/components/schemas/OpenAIChatCompletionToolCallFunction'
      type: object
      title: OpenAIChatCompletionToolCall
      description: "Tool call specification for OpenAI-compatible chat completion responses.\n\n:param index: (Optional) Index of the tool call in the list\n:param id: (Optional) Unique identifier for the tool call\n:param type: Must be \"function\" to identify this as a function call\n:param function: (Optional) Function call details"
    OpenAIChatCompletionToolCallFunction:
      properties:
        name:
          title: Name
          type: string
        arguments:
          title: Arguments
          type: string
      type: object
      title: OpenAIChatCompletionToolCallFunction
      description: "Function call details for OpenAI-compatible tool calls.\n\n:param name: (Optional) Name of the function to call\n:param arguments: (Optional) Arguments to pass to the function as a JSON string"
    OpenAIChatCompletionUsage:
      properties:
        prompt_tokens:
          type: integer
          title: Prompt Tokens
        completion_tokens:
          type: integer
          title: Completion Tokens
        total_tokens:
          type: integer
          title: Total Tokens
        prompt_tokens_details:
          $ref: '#/components/schemas/OpenAIChatCompletionUsagePromptTokensDetails'
        completion_tokens_details:
          $ref: '#/components/schemas/OpenAIChatCompletionUsageCompletionTokensDetails'
      type: object
      required:
      - prompt_tokens
      - completion_tokens
      - total_tokens
      title: OpenAIChatCompletionUsage
      description: "Usage information for OpenAI chat completion.\n\n:param prompt_tokens: Number of tokens in the prompt\n:param completion_tokens: Number of tokens in the completion\n:param total_tokens: Total tokens used (prompt + completion)\n:param input_tokens_details: Detailed breakdown of input token usage\n:param output_tokens_details: Detailed breakdown of output token usage"
    OpenAIChatCompletionUsageCompletionTokensDetails:
      properties:
        reasoning_tokens:
          title: Reasoning Tokens
          type: integer
      type: object
      title: OpenAIChatCompletionUsageCompletionTokensDetails
      description: "Token details for output tokens in OpenAI chat completion usage.\n\n:param reasoning_tokens: Number of tokens used for reasoning (o1/o3 models)"
    OpenAIChatCompletionUsagePromptTokensDetails:
      properties:
        cached_tokens:
          title: Cached Tokens
          type: integer
      type: object
      title: OpenAIChatCompletionUsagePromptTokensDetails
      description: "Token details for prompt tokens in OpenAI chat completion usage.\n\n:param cached_tokens: Number of tokens retrieved from cache"
    OpenAIChoice-Output:
      properties:
        message:
          oneOf:
          - $ref: '#/components/schemas/OpenAIUserMessageParam-Output'
          - $ref: '#/components/schemas/OpenAISystemMessageParam'
          - $ref: '#/components/schemas/OpenAIAssistantMessageParam-Output'
          - $ref: '#/components/schemas/OpenAIToolMessageParam'
          - $ref: '#/components/schemas/OpenAIDeveloperMessageParam'
          title: Message
          discriminator:
            propertyName: role
            mapping:
              assistant: '#/components/schemas/OpenAIAssistantMessageParam-Output'
              developer: '#/components/schemas/OpenAIDeveloperMessageParam'
              system: '#/components/schemas/OpenAISystemMessageParam'
              tool: '#/components/schemas/OpenAIToolMessageParam'
              user: '#/components/schemas/OpenAIUserMessageParam-Output'
        finish_reason:
          type: string
          title: Finish Reason
        index:
          type: integer
          title: Index
        logprobs:
          $ref: '#/components/schemas/OpenAIChoiceLogprobs-Output'
      type: object
      required:
      - message
      - finish_reason
      - index
      title: OpenAIChoice
      description: "A choice from an OpenAI-compatible chat completion response.\n\n:param message: The message from the model\n:param finish_reason: The reason the model stopped generating\n:param index: The index of the choice\n:param logprobs: (Optional) The log probabilities for the tokens in the message"
    OpenAIChoiceLogprobs-Output:
      properties:
        content:
          title: Content
          items:
            $ref: '#/components/schemas/OpenAITokenLogProb'
          type: array
        refusal:
          title: Refusal
          items:
            $ref: '#/components/schemas/OpenAITokenLogProb'
          type: array
      type: object
      title: OpenAIChoiceLogprobs
      description: "The log probabilities for the tokens in the message from an OpenAI-compatible chat completion response.\n\n:param content: (Optional) The log probabilities for the tokens in the message\n:param refusal: (Optional) The log probabilities for the tokens in the message"
    OpenAICompletion:
      properties:
        id:
          type: string
          title: Id
        choices:
          items:
            $ref: '#/components/schemas/OpenAICompletionChoice-Output'
          type: array
          title: Choices
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        object:
          type: string
          const: text_completion
          title: Object
          default: text_completion
      type: object
      required:
      - id
      - choices
      - created
      - model
      title: OpenAICompletion
      description: "Response from an OpenAI-compatible completion request.\n\n:id: The ID of the completion\n:choices: List of choices\n:created: The Unix timestamp in seconds when the completion was created\n:model: The model that was used to generate the completion\n:object: The object type, which will be \"text_completion\""
    OpenAICompletionChoice-Output:
      properties:
        finish_reason:
          type: string
          title: Finish Reason
        text:
          type: string
          title: Text
        index:
          type: integer
          title: Index
        logprobs:
          $ref: '#/components/schemas/OpenAIChoiceLogprobs-Output'
      type: object
      required:
      - finish_reason
      - text
      - index
      title: OpenAICompletionChoice
      description: "A choice from an OpenAI-compatible completion response.\n\n:finish_reason: The reason the model stopped generating\n:text: The text of the choice\n:index: The index of the choice\n:logprobs: (Optional) The log probabilities for the tokens in the choice"
    OpenAICompletionRequestWithExtraBody:
      properties:
        model:
          type: string
          title: Model
        prompt:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          - items:
              type: integer
            type: array
          - items:
              items:
                type: integer
              type: array
            type: array
          title: Prompt
        best_of:
          title: Best Of
          type: integer
        echo:
          title: Echo
          type: boolean
        frequency_penalty:
          title: Frequency Penalty
          type: number
        logit_bias:
          title: Logit Bias
          additionalProperties:
            type: number
          type: object
        logprobs:
          title: Logprobs
          type: boolean
        max_tokens:
          title: Max Tokens
          type: integer
        n:
          title: N
          type: integer
        presence_penalty:
          title: Presence Penalty
          type: number
        seed:
          title: Seed
          type: integer
        stop:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          title: Stop
        stream:
          title: Stream
          type: boolean
        stream_options:
          title: Stream Options
          additionalProperties: true
          type: object
        temperature:
          title: Temperature
          type: number
        top_p:
          title: Top P
          type: number
        user:
          title: User
          type: string
        suffix:
          title: Suffix
          type: string
      additionalProperties: true
      type: object
      required:
      - model
      - prompt
      title: OpenAICompletionRequestWithExtraBody
      description: "Request parameters for OpenAI-compatible completion endpoint.\n\n:param model: The identifier of the model to use. The model must be registered with Llama Stack and available via the /models endpoint.\n:param prompt: The prompt to generate a completion for.\n:param best_of: (Optional) The number of completions to generate.\n:param echo: (Optional) Whether to echo the prompt.\n:param frequency_penalty: (Optional) The penalty for repeated tokens.\n:param logit_bias: (Optional) The logit bias to use.\n:param logprobs: (Optional) The log probabilities to use.\n:param max_tokens: (Optional) The maximum number of tokens to generate.\n:param n: (Optional) The number of completions to generate.\n:param presence_penalty: (Optional) The penalty for repeated tokens.\n:param seed: (Optional) The seed to use.\n:param stop: (Optional) The stop tokens to use.\n:param stream: (Optional) Whether to stream the response.\n:param stream_options: (Optional) The stream options to use.\n:param temperature: (Optional) The temperature to use.\n:param top_p: (Optional) The top p to use.\n:param user: (Optional) The user to use.\n:param suffix: (Optional) The suffix that should be appended to the completion."
    OpenAICreateVectorStoreFileBatchRequestWithExtraBody:
      properties:
        file_ids:
          items:
            type: string
          type: array
          title: File Ids
        attributes:
          title: Attributes
          additionalProperties: true
          type: object
        chunking_strategy:
          title: Chunking Strategy
          oneOf:
          - $ref: '#/components/schemas/VectorStoreChunkingStrategyAuto'
          - $ref: '#/components/schemas/VectorStoreChunkingStrategyStatic'
          discriminator:
            propertyName: type
            mapping:
              auto: '#/components/schemas/VectorStoreChunkingStrategyAuto'
              static: '#/components/schemas/VectorStoreChunkingStrategyStatic'
      additionalProperties: true
      type: object
      required:
      - file_ids
      title: OpenAICreateVectorStoreFileBatchRequestWithExtraBody
      description: "Request to create a vector store file batch with extra_body support.\n\n:param file_ids: A list of File IDs that the vector store should use\n:param attributes: (Optional) Key-value attributes to store with the files\n:param chunking_strategy: (Optional) The chunking strategy used to chunk the file(s). Defaults to auto"
    OpenAICreateVectorStoreRequestWithExtraBody:
      properties:
        name:
          title: Name
          type: string
        file_ids:
          title: File Ids
          items:
            type: string
          type: array
        expires_after:
          title: Expires After
          additionalProperties: true
          type: object
        chunking_strategy:
          title: Chunking Strategy
          additionalProperties: true
          type: object
        metadata:
          title: Metadata
          additionalProperties: true
          type: object
      additionalProperties: true
      type: object
      title: OpenAICreateVectorStoreRequestWithExtraBody
      description: "Request to create a vector store with extra_body support.\n\n:param name: (Optional) A name for the vector store\n:param file_ids: List of file IDs to include in the vector store\n:param expires_after: (Optional) Expiration policy for the vector store\n:param chunking_strategy: (Optional) Strategy for splitting files into chunks\n:param metadata: Set of key-value pairs that can be attached to the vector store"
    OpenAIDeveloperMessageParam:
      properties:
        role:
          type: string
          const: developer
          title: Role
          default: developer
        content:
          anyOf:
          - type: string
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
        name:
          title: Name
          type: string
      type: object
      required:
      - content
      title: OpenAIDeveloperMessageParam
      description: "A message from the developer in an OpenAI-compatible chat completion request.\n\n:param role: Must be \"developer\" to identify this as a developer message\n:param content: The content of the developer message\n:param name: (Optional) The name of the developer message participant."
    OpenAIEmbeddingData:
      properties:
        object:
          type: string
          const: embedding
          title: Object
          default: embedding
        embedding:
          anyOf:
          - items:
              type: number
            type: array
          - type: string
          title: Embedding
        index:
          type: integer
          title: Index
      type: object
      required:
      - embedding
      - index
      title: OpenAIEmbeddingData
      description: "A single embedding data object from an OpenAI-compatible embeddings response.\n\n:param object: The object type, which will be \"embedding\"\n:param embedding: The embedding vector as a list of floats (when encoding_format=\"float\") or as a base64-encoded string (when encoding_format=\"base64\")\n:param index: The index of the embedding in the input list"
    OpenAIEmbeddingUsage:
      properties:
        prompt_tokens:
          type: integer
          title: Prompt Tokens
        total_tokens:
          type: integer
          title: Total Tokens
      type: object
      required:
      - prompt_tokens
      - total_tokens
      title: OpenAIEmbeddingUsage
      description: "Usage information for an OpenAI-compatible embeddings response.\n\n:param prompt_tokens: The number of tokens in the input\n:param total_tokens: The total number of tokens used"
    OpenAIEmbeddingsRequestWithExtraBody:
      properties:
        model:
          type: string
          title: Model
        input:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          title: Input
        encoding_format:
          title: Encoding Format
          default: float
          type: string
        dimensions:
          title: Dimensions
          type: integer
        user:
          title: User
          type: string
      additionalProperties: true
      type: object
      required:
      - model
      - input
      title: OpenAIEmbeddingsRequestWithExtraBody
      description: "Request parameters for OpenAI-compatible embeddings endpoint.\n\n:param model: The identifier of the model to use. The model must be an embedding model registered with Llama Stack and available via the /models endpoint.\n:param input: Input text to embed, encoded as a string or array of strings. To embed multiple inputs in a single request, pass an array of strings.\n:param encoding_format: (Optional) The format to return the embeddings in. Can be either \"float\" or \"base64\". Defaults to \"float\".\n:param dimensions: (Optional) The number of dimensions the resulting output embeddings should have. Only supported in text-embedding-3 and later models.\n:param user: (Optional) A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse."
    OpenAIEmbeddingsResponse:
      properties:
        object:
          type: string
          const: list
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/OpenAIEmbeddingData'
          type: array
          title: Data
        model:
          type: string
          title: Model
        usage:
          $ref: '#/components/schemas/OpenAIEmbeddingUsage'
      type: object
      required:
      - data
      - model
      - usage
      title: OpenAIEmbeddingsResponse
      description: "Response from an OpenAI-compatible embeddings request.\n\n:param object: The object type, which will be \"list\"\n:param data: List of embedding data objects\n:param model: The model that was used to generate the embeddings\n:param usage: Usage information"
    OpenAIFile:
      properties:
        type:
          type: string
          const: file
          title: Type
          default: file
        file:
          $ref: '#/components/schemas/OpenAIFileFile'
      type: object
      required:
      - file
      title: OpenAIFile
    OpenAIFileFile:
      properties:
        file_data:
          title: File Data
          type: string
        file_id:
          title: File Id
          type: string
        filename:
          title: Filename
          type: string
      type: object
      title: OpenAIFileFile
    OpenAIFileObject:
      properties:
        object:
          type: string
          const: file
          title: Object
          default: file
        id:
          type: string
          title: Id
        bytes:
          type: integer
          title: Bytes
        created_at:
          type: integer
          title: Created At
        expires_at:
          type: integer
          title: Expires At
        filename:
          type: string
          title: Filename
        purpose:
          $ref: '#/components/schemas/OpenAIFilePurpose'
      type: object
      required:
      - id
      - bytes
      - created_at
      - expires_at
      - filename
      - purpose
      title: OpenAIFileObject
      description: "OpenAI File object as defined in the OpenAI Files API.\n\n:param object: The object type, which is always \"file\"\n:param id: The file identifier, which can be referenced in the API endpoints\n:param bytes: The size of the file, in bytes\n:param created_at: The Unix timestamp (in seconds) for when the file was created\n:param expires_at: The Unix timestamp (in seconds) for when the file expires\n:param filename: The name of the file\n:param purpose: The intended purpose of the file"
    OpenAIFilePurpose:
      type: string
      enum:
      - assistants
      - batch
      title: OpenAIFilePurpose
      description: Valid purpose values for OpenAI Files API.
    OpenAIImageURL:
      properties:
        url:
          type: string
          title: Url
        detail:
          title: Detail
          type: string
      type: object
      required:
      - url
      title: OpenAIImageURL
      description: "Image URL specification for OpenAI-compatible chat completion messages.\n\n:param url: URL of the image to include in the message\n:param detail: (Optional) Level of detail for image processing. Can be \"low\", \"high\", or \"auto\""
    OpenAIJSONSchema:
      properties:
        name:
          type: string
          title: Name
        description:
          title: Description
          type: string
        strict:
          title: Strict
          type: boolean
        schema:
          title: Schema
          additionalProperties: true
          type: object
      type: object
      title: OpenAIJSONSchema
      description: "JSON schema specification for OpenAI-compatible structured response format.\n\n:param name: Name of the schema\n:param description: (Optional) Description of the schema\n:param strict: (Optional) Whether to enforce strict adherence to the schema\n:param schema: (Optional) The JSON schema definition"
    OpenAIResponseAnnotationCitation:
      properties:
        type:
          type: string
          const: url_citation
          title: Type
          default: url_citation
        end_index:
          type: integer
          title: End Index
        start_index:
          type: integer
          title: Start Index
        title:
          type: string
          title: Title
        url:
          type: string
          title: Url
      type: object
      required:
      - end_index
      - start_index
      - title
      - url
      title: OpenAIResponseAnnotationCitation
      description: "URL citation annotation for referencing external web resources.\n\n:param type: Annotation type identifier, always \"url_citation\"\n:param end_index: End position of the citation span in the content\n:param start_index: Start position of the citation span in the content\n:param title: Title of the referenced web resource\n:param url: URL of the referenced web resource"
    OpenAIResponseAnnotationContainerFileCitation:
      properties:
        type:
          type: string
          const: container_file_citation
          title: Type
          default: container_file_citation
        container_id:
          type: string
          title: Container Id
        end_index:
          type: integer
          title: End Index
        file_id:
          type: string
          title: File Id
        filename:
          type: string
          title: Filename
        start_index:
          type: integer
          title: Start Index
      type: object
      required:
      - container_id
      - end_index
      - file_id
      - filename
      - start_index
      title: OpenAIResponseAnnotationContainerFileCitation
    OpenAIResponseAnnotationFileCitation:
      properties:
        type:
          type: string
          const: file_citation
          title: Type
          default: file_citation
        file_id:
          type: string
          title: File Id
        filename:
          type: string
          title: Filename
        index:
          type: integer
          title: Index
      type: object
      required:
      - file_id
      - filename
      - index
      title: OpenAIResponseAnnotationFileCitation
      description: "File citation annotation for referencing specific files in response content.\n\n:param type: Annotation type identifier, always \"file_citation\"\n:param file_id: Unique identifier of the referenced file\n:param filename: Name of the referenced file\n:param index: Position index of the citation within the content"
    OpenAIResponseAnnotationFilePath:
      properties:
        type:
          type: string
          const: file_path
          title: Type
          default: file_path
        file_id:
          type: string
          title: File Id
        index:
          type: integer
          title: Index
      type: object
      required:
      - file_id
      - index
      title: OpenAIResponseAnnotationFilePath
    OpenAIResponseContentPartRefusal:
      properties:
        type:
          type: string
          const: refusal
          title: Type
          default: refusal
        refusal:
          type: string
          title: Refusal
      type: object
      required:
      - refusal
      title: OpenAIResponseContentPartRefusal
      description: "Refusal content within a streamed response part.\n\n:param type: Content part type identifier, always \"refusal\"\n:param refusal: Refusal text supplied by the model"
    OpenAIResponseError:
      properties:
        code:
          type: string
          title: Code
        message:
          type: string
          title: Message
      type: object
      required:
      - code
      - message
      title: OpenAIResponseError
      description: "Error details for failed OpenAI response requests.\n\n:param code: Error code identifying the type of failure\n:param message: Human-readable error message describing the failure"
    OpenAIResponseFormatJSONObject:
      properties:
        type:
          type: string
          const: json_object
          title: Type
          default: json_object
      type: object
      title: OpenAIResponseFormatJSONObject
      description: "JSON object response format for OpenAI-compatible chat completion requests.\n\n:param type: Must be \"json_object\" to indicate generic JSON object response format"
    OpenAIResponseFormatJSONSchema:
      properties:
        type:
          type: string
          const: json_schema
          title: Type
          default: json_schema
        json_schema:
          $ref: '#/components/schemas/OpenAIJSONSchema'
      type: object
      required:
      - json_schema
      title: OpenAIResponseFormatJSONSchema
      description: "JSON schema response format for OpenAI-compatible chat completion requests.\n\n:param type: Must be \"json_schema\" to indicate structured JSON response format\n:param json_schema: The JSON schema specification for the response"
    OpenAIResponseFormatText:
      properties:
        type:
          type: string
          const: text
          title: Type
          default: text
      type: object
      title: OpenAIResponseFormatText
      description: "Text response format for OpenAI-compatible chat completion requests.\n\n:param type: Must be \"text\" to indicate plain text response format"
    OpenAIResponseInputFunctionToolCallOutput:
      properties:
        call_id:
          type: string
          title: Call Id
        output:
          type: string
          title: Output
        type:
          type: string
          const: function_call_output
          title: Type
          default: function_call_output
        id:
          title: Id
          type: string
        status:
          title: Status
          type: string
      type: object
      required:
      - call_id
      - output
      title: OpenAIResponseInputFunctionToolCallOutput
      description: This represents the output of a function call that gets passed back to the model.
    OpenAIResponseInputMessageContentFile:
      properties:
        type:
          type: string
          const: input_file
          title: Type
          default: input_file
        file_data:
          title: File Data
          type: string
        file_id:
          title: File Id
          type: string
        file_url:
          title: File Url
          type: string
        filename:
          title: Filename
          type: string
      type: object
      title: OpenAIResponseInputMessageContentFile
      description: "File content for input messages in OpenAI response format.\n\n:param type: The type of the input item. Always `input_file`.\n:param file_data: The data of the file to be sent to the model.\n:param file_id: (Optional) The ID of the file to be sent to the model.\n:param file_url: The URL of the file to be sent to the model.\n:param filename: The name of the file to be sent to the model."
    OpenAIResponseInputMessageContentImage:
      properties:
        detail:
          anyOf:
          - type: string
            const: low
          - type: string
            const: high
          - type: string
            const: auto
          title: Detail
          default: auto
        type:
          type: string
          const: input_image
          title: Type
          default: input_image
        file_id:
          title: File Id
          type: string
        image_url:
          title: Image Url
          type: string
      type: object
      title: OpenAIResponseInputMessageContentImage
      description: "Image content for input messages in OpenAI response format.\n\n:param detail: Level of detail for image processing, can be \"low\", \"high\", or \"auto\"\n:param type: Content type identifier, always \"input_image\"\n:param file_id: (Optional) The ID of the file to be sent to the model.\n:param image_url: (Optional) URL of the image content"
    OpenAIResponseInputMessageContentText:
      properties:
        text:
          type: string
          title: Text
        type:
          type: string
          const: input_text
          title: Type
          default: input_text
      type: object
      required:
      - text
      title: OpenAIResponseInputMessageContentText
      description: "Text content for input messages in OpenAI response format.\n\n:param text: The text content of the input message\n:param type: Content type identifier, always \"input_text\""
    OpenAIResponseInputToolFileSearch:
      properties:
        type:
          type: string
          const: file_search
          title: Type
          default: file_search
        vector_store_ids:
          items:
            type: string
          type: array
          title: Vector Store Ids
        filters:
          title: Filters
          additionalProperties: true
          type: object
        max_num_results:
          title: Max Num Results
          default: 10
          type: integer
          maximum: 50.0
          minimum: 1.0
        ranking_options:
          $ref: '#/components/schemas/SearchRankingOptions'
      type: object
      required:
      - vector_store_ids
      title: OpenAIResponseInputToolFileSearch
      description: "File search tool configuration for OpenAI response inputs.\n\n:param type: Tool type identifier, always \"file_search\"\n:param vector_store_ids: List of vector store identifiers to search within\n:param filters: (Optional) Additional filters to apply to the search\n:param max_num_results: (Optional) Maximum number of search results to return (1-50)\n:param ranking_options: (Optional) Options for ranking and scoring search results"
    OpenAIResponseInputToolFunction:
      properties:
        type:
          type: string
          const: function
          title: Type
          default: function
        name:
          type: string
          title: Name
        description:
          title: Description
          type: string
        parameters:
          title: Parameters
          additionalProperties: true
          type: object
        strict:
          title: Strict
          type: boolean
      type: object
      required:
      - name
      - parameters
      title: OpenAIResponseInputToolFunction
      description: "Function tool configuration for OpenAI response inputs.\n\n:param type: Tool type identifier, always \"function\"\n:param name: Name of the function that can be called\n:param description: (Optional) Description of what the function does\n:param parameters: (Optional) JSON schema defining the function's parameters\n:param strict: (Optional) Whether to enforce strict parameter validation"
    OpenAIResponseInputToolMCP:
      properties:
        type:
          type: string
          const: mcp
          title: Type
          default: mcp
        server_label:
          type: string
          title: Server Label
        server_url:
          type: string
          title: Server Url
        headers:
          title: Headers
          additionalProperties: true
          type: object
        require_approval:
          anyOf:
          - type: string
            const: always
          - type: string
            const: never
          - $ref: '#/components/schemas/ApprovalFilter'
          title: Require Approval
          default: never
        allowed_tools:
          anyOf:
          - items:
              type: string
            type: array
          - $ref: '#/components/schemas/AllowedToolsFilter'
          title: Allowed Tools
      type: object
      required:
      - server_label
      - server_url
      title: OpenAIResponseInputToolMCP
      description: "Model Context Protocol (MCP) tool configuration for OpenAI response inputs.\n\n:param type: Tool type identifier, always \"mcp\"\n:param server_label: Label to identify this MCP server\n:param server_url: URL endpoint of the MCP server\n:param headers: (Optional) HTTP headers to include when connecting to the server\n:param require_approval: Approval requirement for tool calls (\"always\", \"never\", or filter)\n:param allowed_tools: (Optional) Restriction on which tools can be used from this server"
    OpenAIResponseInputToolWebSearch:
      properties:
        type:
          anyOf:
          - type: string
            const: web_search
          - type: string
            const: web_search_preview
          - type: string
            const: web_search_preview_2025_03_11
          title: Type
          default: web_search
        search_context_size:
          title: Search Context Size
          default: medium
          type: string
          pattern: ^low|medium|high$
      type: object
      title: OpenAIResponseInputToolWebSearch
      description: "Web search tool configuration for OpenAI response inputs.\n\n:param type: Web search tool type variant to use\n:param search_context_size: (Optional) Size of search context, must be \"low\", \"medium\", or \"high\""
    OpenAIResponseMCPApprovalRequest:
      properties:
        arguments:
          type: string
          title: Arguments
        id:
          type: string
          title: Id
        name:
          type: string
          title: Name
        server_label:
          type: string
          title: Server Label
        type:
          type: string
          const: mcp_approval_request
          title: Type
          default: mcp_approval_request
      type: object
      required:
      - arguments
      - id
      - name
      - server_label
      title: OpenAIResponseMCPApprovalRequest
      description: A request for human approval of a tool invocation.
    OpenAIResponseMCPApprovalResponse:
      properties:
        approval_request_id:
          type: string
          title: Approval Request Id
        approve:
          type: boolean
          title: Approve
        type:
          type: string
          const: mcp_approval_response
          title: Type
          default: mcp_approval_response
        id:
          title: Id
          type: string
        reason:
          title: Reason
          type: string
      type: object
      required:
      - approval_request_id
      - approve
      title: OpenAIResponseMCPApprovalResponse
      description: A response to an MCP approval request.
    OpenAIResponseMessage-Input:
      properties:
        content:
          anyOf:
          - type: string
          - items:
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentText'
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentImage'
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentFile'
              discriminator:
                propertyName: type
                mapping:
                  input_file: '#/components/schemas/OpenAIResponseInputMessageContentFile'
                  input_image: '#/components/schemas/OpenAIResponseInputMessageContentImage'
                  input_text: '#/components/schemas/OpenAIResponseInputMessageContentText'
            type: array
          - items:
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageContentOutputText'
              - $ref: '#/components/schemas/OpenAIResponseContentPartRefusal'
              discriminator:
                propertyName: type
                mapping:
                  output_text: '#/components/schemas/OpenAIResponseOutputMessageContentOutputText'
                  refusal: '#/components/schemas/OpenAIResponseContentPartRefusal'
            type: array
          title: Content
        role:
          anyOf:
          - type: string
            const: system
          - type: string
            const: developer
          - type: string
            const: user
          - type: string
            const: assistant
          title: Role
        type:
          type: string
          const: message
          title: Type
          default: message
        id:
          title: Id
          type: string
        status:
          title: Status
          type: string
      type: object
      required:
      - content
      - role
      title: OpenAIResponseMessage
      description: "Corresponds to the various Message types in the Responses API.\nThey are all under one type because the Responses API gives them all\nthe same \"type\" value, and there is no way to tell them apart in certain\nscenarios."
    OpenAIResponseMessage-Output:
      properties:
        content:
          anyOf:
          - type: string
          - items:
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentText'
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentImage'
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentFile'
              discriminator:
                propertyName: type
                mapping:
                  input_file: '#/components/schemas/OpenAIResponseInputMessageContentFile'
                  input_image: '#/components/schemas/OpenAIResponseInputMessageContentImage'
                  input_text: '#/components/schemas/OpenAIResponseInputMessageContentText'
            type: array
          - items:
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageContentOutputText'
              - $ref: '#/components/schemas/OpenAIResponseContentPartRefusal'
              discriminator:
                propertyName: type
                mapping:
                  output_text: '#/components/schemas/OpenAIResponseOutputMessageContentOutputText'
                  refusal: '#/components/schemas/OpenAIResponseContentPartRefusal'
            type: array
          title: Content
        role:
          anyOf:
          - type: string
            const: system
          - type: string
            const: developer
          - type: string
            const: user
          - type: string
            const: assistant
          title: Role
        type:
          type: string
          const: message
          title: Type
          default: message
        id:
          title: Id
          type: string
        status:
          title: Status
          type: string
      type: object
      required:
      - content
      - role
      title: OpenAIResponseMessage
      description: "Corresponds to the various Message types in the Responses API.\nThey are all under one type because the Responses API gives them all\nthe same \"type\" value, and there is no way to tell them apart in certain\nscenarios."
    OpenAIResponseObject:
      properties:
        created_at:
          type: integer
          title: Created At
        error:
          $ref: '#/components/schemas/OpenAIResponseError'
        id:
          type: string
          title: Id
        model:
          type: string
          title: Model
        object:
          type: string
          const: response
          title: Object
          default: response
        output:
          items:
            oneOf:
            - $ref: '#/components/schemas/OpenAIResponseMessage-Output'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
            - $ref: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
            discriminator:
              propertyName: type
              mapping:
                file_search_call: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
                function_call: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
                mcp_approval_request: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
                mcp_call: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
                mcp_list_tools: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
                message: '#/components/schemas/OpenAIResponseMessage-Output'
                web_search_call: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
          type: array
          title: Output
        parallel_tool_calls:
          type: boolean
          title: Parallel Tool Calls
          default: false
        previous_response_id:
          title: Previous Response Id
          type: string
        prompt:
          $ref: '#/components/schemas/OpenAIResponsePrompt'
        status:
          type: string
          title: Status
        temperature:
          title: Temperature
          type: number
        text:
          $ref: '#/components/schemas/OpenAIResponseText'
          default:
            format:
              type: text
        top_p:
          title: Top P
          type: number
        tools:
          title: Tools
          items:
            oneOf:
            - $ref: '#/components/schemas/OpenAIResponseInputToolWebSearch'
            - $ref: '#/components/schemas/OpenAIResponseInputToolFileSearch'
            - $ref: '#/components/schemas/OpenAIResponseInputToolFunction'
            - $ref: '#/components/schemas/OpenAIResponseToolMCP'
            discriminator:
              propertyName: type
              mapping:
                file_search: '#/components/schemas/OpenAIResponseInputToolFileSearch'
                function: '#/components/schemas/OpenAIResponseInputToolFunction'
                mcp: '#/components/schemas/OpenAIResponseToolMCP'
                web_search: '#/components/schemas/OpenAIResponseInputToolWebSearch'
                web_search_preview: '#/components/schemas/OpenAIResponseInputToolWebSearch'
                web_search_preview_2025_03_11: '#/components/schemas/OpenAIResponseInputToolWebSearch'
          type: array
        truncation:
          title: Truncation
          type: string
        usage:
          $ref: '#/components/schemas/OpenAIResponseUsage'
        instructions:
          title: Instructions
          type: string
      type: object
      required:
      - created_at
      - id
      - model
      - output
      - status
      title: OpenAIResponseObject
      description: "Complete OpenAI response object containing generation results and metadata.\n\n:param created_at: Unix timestamp when the response was created\n:param error: (Optional) Error details if the response generation failed\n:param id: Unique identifier for this response\n:param model: Model identifier used for generation\n:param object: Object type identifier, always \"response\"\n:param output: List of generated output items (messages, tool calls, etc.)\n:param parallel_tool_calls: Whether tool calls can be executed in parallel\n:param previous_response_id: (Optional) ID of the previous response in a conversation\n:param prompt: (Optional) Reference to a prompt template and its variables.\n:param status: Current status of the response generation\n:param temperature: (Optional) Sampling temperature used for generation\n:param text: Text formatting configuration for the response\n:param top_p: (Optional) Nucleus sampling parameter used for generation\n:param tools: (Optional) An array of tools the model may call while generating a response.\n:param truncation: (Optional) Truncation strategy applied to the response\n:param usage: (Optional) Token usage information for the response\n:param instructions: (Optional) System message inserted into the model's context"
    OpenAIResponseOutputMessageContentOutputText:
      properties:
        text:
          type: string
          title: Text
        type:
          type: string
          const: output_text
          title: Type
          default: output_text
        annotations:
          items:
            oneOf:
            - $ref: '#/components/schemas/OpenAIResponseAnnotationFileCitation'
            - $ref: '#/components/schemas/OpenAIResponseAnnotationCitation'
            - $ref: '#/components/schemas/OpenAIResponseAnnotationContainerFileCitation'
            - $ref: '#/components/schemas/OpenAIResponseAnnotationFilePath'
            discriminator:
              propertyName: type
              mapping:
                container_file_citation: '#/components/schemas/OpenAIResponseAnnotationContainerFileCitation'
                file_citation: '#/components/schemas/OpenAIResponseAnnotationFileCitation'
                file_path: '#/components/schemas/OpenAIResponseAnnotationFilePath'
                url_citation: '#/components/schemas/OpenAIResponseAnnotationCitation'
          type: array
          title: Annotations
      type: object
      required:
      - text
      title: OpenAIResponseOutputMessageContentOutputText
    OpenAIResponseOutputMessageFileSearchToolCall:
      properties:
        id:
          type: string
          title: Id
        queries:
          items:
            type: string
          type: array
          title: Queries
        status:
          type: string
          title: Status
        type:
          type: string
          const: file_search_call
          title: Type
          default: file_search_call
        results:
          title: Results
          items:
            $ref: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCallResults'
          type: array
      type: object
      required:
      - id
      - queries
      - status
      title: OpenAIResponseOutputMessageFileSearchToolCall
      description: "File search tool call output message for OpenAI responses.\n\n:param id: Unique identifier for this tool call\n:param queries: List of search queries executed\n:param status: Current status of the file search operation\n:param type: Tool call type identifier, always \"file_search_call\"\n:param results: (Optional) Search results returned by the file search operation"
    OpenAIResponseOutputMessageFileSearchToolCallResults:
      properties:
        attributes:
          additionalProperties: true
          type: object
          title: Attributes
        file_id:
          type: string
          title: File Id
        filename:
          type: string
          title: Filename
        score:
          type: number
          title: Score
        text:
          type: string
          title: Text
      type: object
      required:
      - attributes
      - file_id
      - filename
      - score
      - text
      title: OpenAIResponseOutputMessageFileSearchToolCallResults
      description: "Search results returned by the file search operation.\n\n:param attributes: (Optional) Key-value attributes associated with the file\n:param file_id: Unique identifier of the file containing the result\n:param filename: Name of the file containing the result\n:param score: Relevance score for this search result (between 0 and 1)\n:param text: Text content of the search result"
    OpenAIResponseOutputMessageFunctionToolCall:
      properties:
        call_id:
          type: string
          title: Call Id
        name:
          type: string
          title: Name
        arguments:
          type: string
          title: Arguments
        type:
          type: string
          const: function_call
          title: Type
          default: function_call
        id:
          title: Id
          type: string
        status:
          title: Status
          type: string
      type: object
      required:
      - call_id
      - name
      - arguments
      title: OpenAIResponseOutputMessageFunctionToolCall
      description: "Function tool call output message for OpenAI responses.\n\n:param call_id: Unique identifier for the function call\n:param name: Name of the function being called\n:param arguments: JSON string containing the function arguments\n:param type: Tool call type identifier, always \"function_call\"\n:param id: (Optional) Additional identifier for the tool call\n:param status: (Optional) Current status of the function call execution"
    OpenAIResponseOutputMessageMCPCall:
      properties:
        id:
          type: string
          title: Id
        type:
          type: string
          const: mcp_call
          title: Type
          default: mcp_call
        arguments:
          type: string
          title: Arguments
        name:
          type: string
          title: Name
        server_label:
          type: string
          title: Server Label
        error:
          title: Error
          type: string
        output:
          title: Output
          type: string
      type: object
      required:
      - id
      - arguments
      - name
      - server_label
      title: OpenAIResponseOutputMessageMCPCall
      description: "Model Context Protocol (MCP) call output message for OpenAI responses.\n\n:param id: Unique identifier for this MCP call\n:param type: Tool call type identifier, always \"mcp_call\"\n:param arguments: JSON string containing the MCP call arguments\n:param name: Name of the MCP method being called\n:param server_label: Label identifying the MCP server handling the call\n:param error: (Optional) Error message if the MCP call failed\n:param output: (Optional) Output result from the successful MCP call"
    OpenAIResponseOutputMessageMCPListTools:
      properties:
        id:
          type: string
          title: Id
        type:
          type: string
          const: mcp_list_tools
          title: Type
          default: mcp_list_tools
        server_label:
          type: string
          title: Server Label
        tools:
          items:
            $ref: '#/components/schemas/MCPListToolsTool'
          type: array
          title: Tools
      type: object
      required:
      - id
      - server_label
      - tools
      title: OpenAIResponseOutputMessageMCPListTools
      description: "MCP list tools output message containing available tools from an MCP server.\n\n:param id: Unique identifier for this MCP list tools operation\n:param type: Tool call type identifier, always \"mcp_list_tools\"\n:param server_label: Label identifying the MCP server providing the tools\n:param tools: List of available tools provided by the MCP server"
    OpenAIResponseOutputMessageWebSearchToolCall:
      properties:
        id:
          type: string
          title: Id
        status:
          type: string
          title: Status
        type:
          type: string
          const: web_search_call
          title: Type
          default: web_search_call
      type: object
      required:
      - id
      - status
      title: OpenAIResponseOutputMessageWebSearchToolCall
      description: "Web search tool call output message for OpenAI responses.\n\n:param id: Unique identifier for this tool call\n:param status: Current status of the web search operation\n:param type: Tool call type identifier, always \"web_search_call\""
    OpenAIResponsePrompt:
      properties:
        id:
          type: string
          title: Id
        variables:
          title: Variables
          additionalProperties:
            oneOf:
            - $ref: '#/components/schemas/OpenAIResponseInputMessageContentText'
            - $ref: '#/components/schemas/OpenAIResponseInputMessageContentImage'
            - $ref: '#/components/schemas/OpenAIResponseInputMessageContentFile'
            discriminator:
              propertyName: type
              mapping:
                input_file: '#/components/schemas/OpenAIResponseInputMessageContentFile'
                input_image: '#/components/schemas/OpenAIResponseInputMessageContentImage'
                input_text: '#/components/schemas/OpenAIResponseInputMessageContentText'
          type: object
        version:
          title: Version
          type: string
      type: object
      required:
      - id
      title: OpenAIResponsePrompt
      description: "OpenAI compatible Prompt object that is used in OpenAI responses.\n\n:param id: Unique identifier of the prompt template\n:param variables: Dictionary of variable names to OpenAIResponseInputMessageContent structure for template substitution. The substitution values can either be strings, or other Response input types\nlike images or files.\n:param version: Version number of the prompt to use (defaults to latest if not specified)"
    OpenAIResponseText:
      properties:
        format:
          $ref: '#/components/schemas/OpenAIResponseTextFormat'
      type: object
      title: OpenAIResponseText
      description: "Text response configuration for OpenAI responses.\n\n:param format: (Optional) Text format configuration specifying output format requirements"
    OpenAIResponseTextFormat:
      properties:
        type:
          anyOf:
          - type: string
            const: text
          - type: string
            const: json_schema
          - type: string
            const: json_object
          title: Type
        name:
          title: Name
          type: string
        schema:
          title: Schema
          additionalProperties: true
          type: object
        description:
          title: Description
          type: string
        strict:
          title: Strict
          type: boolean
      type: object
      title: OpenAIResponseTextFormat
      description: "Configuration for Responses API text format.\n\n:param type: Must be \"text\", \"json_schema\", or \"json_object\" to identify the format type\n:param name: The name of the response format. Only used for json_schema.\n:param schema: The JSON schema the response should conform to. In a Python SDK, this is often a `pydantic` model. Only used for json_schema.\n:param description: (Optional) A description of the response format. Only used for json_schema.\n:param strict: (Optional) Whether to strictly enforce the JSON schema. If true, the response must match the schema exactly. Only used for json_schema."
    OpenAIResponseToolMCP:
      properties:
        type:
          type: string
          const: mcp
          title: Type
          default: mcp
        server_label:
          type: string
          title: Server Label
        allowed_tools:
          anyOf:
          - items:
              type: string
            type: array
          - $ref: '#/components/schemas/AllowedToolsFilter'
          title: Allowed Tools
      type: object
      required:
      - server_label
      title: OpenAIResponseToolMCP
      description: "Model Context Protocol (MCP) tool configuration for OpenAI response object.\n\n:param type: Tool type identifier, always \"mcp\"\n:param server_label: Label to identify this MCP server\n:param allowed_tools: (Optional) Restriction on which tools can be used from this server"
    OpenAIResponseUsage:
      properties:
        input_tokens:
          type: integer
          title: Input Tokens
        output_tokens:
          type: integer
          title: Output Tokens
        total_tokens:
          type: integer
          title: Total Tokens
        input_tokens_details:
          $ref: '#/components/schemas/OpenAIResponseUsageInputTokensDetails'
        output_tokens_details:
          $ref: '#/components/schemas/OpenAIResponseUsageOutputTokensDetails'
      type: object
      required:
      - input_tokens
      - output_tokens
      - total_tokens
      title: OpenAIResponseUsage
      description: "Usage information for OpenAI response.\n\n:param input_tokens: Number of tokens in the input\n:param output_tokens: Number of tokens in the output\n:param total_tokens: Total tokens used (input + output)\n:param input_tokens_details: Detailed breakdown of input token usage\n:param output_tokens_details: Detailed breakdown of output token usage"
    OpenAIResponseUsageInputTokensDetails:
      properties:
        cached_tokens:
          title: Cached Tokens
          type: integer
      type: object
      title: OpenAIResponseUsageInputTokensDetails
      description: "Token details for input tokens in OpenAI response usage.\n\n:param cached_tokens: Number of tokens retrieved from cache"
    OpenAIResponseUsageOutputTokensDetails:
      properties:
        reasoning_tokens:
          title: Reasoning Tokens
          type: integer
      type: object
      title: OpenAIResponseUsageOutputTokensDetails
      description: "Token details for output tokens in OpenAI response usage.\n\n:param reasoning_tokens: Number of tokens used for reasoning (o1/o3 models)"
    OpenAISystemMessageParam:
      properties:
        role:
          type: string
          const: system
          title: Role
          default: system
        content:
          anyOf:
          - type: string
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
        name:
          title: Name
          type: string
      type: object
      required:
      - content
      title: OpenAISystemMessageParam
      description: "A system message providing instructions or context to the model.\n\n:param role: Must be \"system\" to identify this as a system message\n:param content: The content of the \"system prompt\". If multiple system messages are provided, they are concatenated. The underlying Llama Stack code may also add other system messages (for example, for formatting tool definitions).\n:param name: (Optional) The name of the system message participant."
    OpenAITokenLogProb:
      properties:
        token:
          type: string
          title: Token
        bytes:
          title: Bytes
          items:
            type: integer
          type: array
        logprob:
          type: number
          title: Logprob
        top_logprobs:
          items:
            $ref: '#/components/schemas/OpenAITopLogProb'
          type: array
          title: Top Logprobs
      type: object
      required:
      - token
      - logprob
      - top_logprobs
      title: OpenAITokenLogProb
      description: "The log probability for a token from an OpenAI-compatible chat completion response.\n\n:token: The token\n:bytes: (Optional) The bytes for the token\n:logprob: The log probability of the token\n:top_logprobs: The top log probabilities for the token"
    OpenAIToolMessageParam:
      properties:
        role:
          type: string
          const: tool
          title: Role
          default: tool
        tool_call_id:
          type: string
          title: Tool Call Id
        content:
          anyOf:
          - type: string
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
      type: object
      required:
      - tool_call_id
      - content
      title: OpenAIToolMessageParam
      description: "A message representing the result of a tool invocation in an OpenAI-compatible chat completion request.\n\n:param role: Must be \"tool\" to identify this as a tool response\n:param tool_call_id: Unique identifier for the tool call this response is for\n:param content: The response content from the tool"
    OpenAITopLogProb:
      properties:
        token:
          type: string
          title: Token
        bytes:
          title: Bytes
          items:
            type: integer
          type: array
        logprob:
          type: number
          title: Logprob
      type: object
      required:
      - token
      - logprob
      title: OpenAITopLogProb
      description: "The top log probability for a token from an OpenAI-compatible chat completion response.\n\n:token: The token\n:bytes: (Optional) The bytes for the token\n:logprob: The log probability of the token"
    OpenAIUserMessageParam-Input:
      properties:
        role:
          type: string
          const: user
          title: Role
          default: user
        content:
          anyOf:
          - type: string
          - items:
              oneOf:
              - $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
              - $ref: '#/components/schemas/OpenAIChatCompletionContentPartImageParam'
              - $ref: '#/components/schemas/OpenAIFile'
              discriminator:
                propertyName: type
                mapping:
                  file: '#/components/schemas/OpenAIFile'
                  image_url: '#/components/schemas/OpenAIChatCompletionContentPartImageParam'
                  text: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
        name:
          title: Name
          type: string
      type: object
      required:
      - content
      title: OpenAIUserMessageParam
      description: "A message from the user in an OpenAI-compatible chat completion request.\n\n:param role: Must be \"user\" to identify this as a user message\n:param content: The content of the message, which can include text and other media\n:param name: (Optional) The name of the user message participant."
    OpenAIUserMessageParam-Output:
      properties:
        role:
          type: string
          const: user
          title: Role
          default: user
        content:
          anyOf:
          - type: string
          - items:
              oneOf:
              - $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
              - $ref: '#/components/schemas/OpenAIChatCompletionContentPartImageParam'
              - $ref: '#/components/schemas/OpenAIFile'
              discriminator:
                propertyName: type
                mapping:
                  file: '#/components/schemas/OpenAIFile'
                  image_url: '#/components/schemas/OpenAIChatCompletionContentPartImageParam'
                  text: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
        name:
          title: Name
          type: string
      type: object
      required:
      - content
      title: OpenAIUserMessageParam
      description: "A message from the user in an OpenAI-compatible chat completion request.\n\n:param role: Must be \"user\" to identify this as a user message\n:param content: The content of the message, which can include text and other media\n:param name: (Optional) The name of the user message participant."
    OptimizerConfig:
      properties:
        optimizer_type:
          $ref: '#/components/schemas/OptimizerType'
        lr:
          type: number
          title: Lr
        weight_decay:
          type: number
          title: Weight Decay
        num_warmup_steps:
          type: integer
          title: Num Warmup Steps
      type: object
      required:
      - optimizer_type
      - lr
      - weight_decay
      - num_warmup_steps
      title: OptimizerConfig
      description: "Configuration parameters for the optimization algorithm.\n\n:param optimizer_type: Type of optimizer to use (adam, adamw, or sgd)\n:param lr: Learning rate for the optimizer\n:param weight_decay: Weight decay coefficient for regularization\n:param num_warmup_steps: Number of steps for learning rate warmup"
    OptimizerType:
      type: string
      enum:
      - adam
      - adamw
      - sgd
      title: OptimizerType
      description: "Available optimizer algorithms for training.\n:cvar adam: Adaptive Moment Estimation optimizer\n:cvar adamw: AdamW optimizer with weight decay\n:cvar sgd: Stochastic Gradient Descent optimizer"
    Order:
      type: string
      enum:
      - asc
      - desc
      title: Order
      description: "Sort order for paginated responses.\n:cvar asc: Ascending order\n:cvar desc: Descending order"
    OutputTokensDetails:
      properties:
        reasoning_tokens:
          type: integer
          title: Reasoning Tokens
      additionalProperties: true
      type: object
      required:
      - reasoning_tokens
      title: OutputTokensDetails
    PostTrainingJob:
      properties:
        job_uuid:
          type: string
          title: Job Uuid
      type: object
      required:
      - job_uuid
      title: PostTrainingJob
    Prompt:
      properties:
        prompt:
          title: Prompt
          description: The system prompt with variable placeholders
          type: string
        version:
          type: integer
          minimum: 1.0
          title: Version
          description: Version (integer starting at 1, incremented on save)
        prompt_id:
          type: string
          title: Prompt Id
          description: Unique identifier in format 'pmpt_<48-digit-hash>'
        variables:
          items:
            type: string
          type: array
          title: Variables
          description: List of variable names that can be used in the prompt template
        is_default:
          type: boolean
          title: Is Default
          description: Boolean indicating whether this version is the default version
          default: false
      type: object
      required:
      - version
      - prompt_id
      title: Prompt
      description: "A prompt resource representing a stored OpenAI Compatible prompt template in Llama Stack.\n\n:param prompt: The system prompt text with variable placeholders. Variables are only supported when using the Responses API.\n:param version: Version (integer starting at 1, incremented on save)\n:param prompt_id: Unique identifier formatted as 'pmpt_<48-digit-hash>'\n:param variables: List of prompt variable names that can be used in the prompt template\n:param is_default: Boolean indicating whether this version is the default version for this prompt"
    ProviderInfo:
      properties:
        api:
          type: string
          title: Api
        provider_id:
          type: string
          title: Provider Id
        provider_type:
          type: string
          title: Provider Type
        config:
          additionalProperties: true
          type: object
          title: Config
        health:
          additionalProperties: true
          type: object
          title: Health
      type: object
      required:
      - api
      - provider_id
      - provider_type
      - config
      - health
      title: ProviderInfo
      description: "Information about a registered provider including its configuration and health status.\n\n:param api: The API name this provider implements\n:param provider_id: Unique identifier for the provider\n:param provider_type: The type of provider implementation\n:param config: Configuration parameters for the provider\n:param health: Current health status of the provider"
    QueryChunksResponse:
      properties:
        chunks:
          items:
            $ref: '#/components/schemas/Chunk-Output'
          type: array
          title: Chunks
        scores:
          items:
            type: number
          type: array
          title: Scores
      type: object
      required:
      - chunks
      - scores
      title: QueryChunksResponse
      description: "Response from querying chunks in a vector database.\n\n:param chunks: List of content chunks returned from the query\n:param scores: Relevance scores corresponding to each returned chunk"
    RAGQueryConfig:
      properties:
        query_generator_config:
          oneOf:
          - $ref: '#/components/schemas/DefaultRAGQueryGeneratorConfig'
          - $ref: '#/components/schemas/LLMRAGQueryGeneratorConfig'
          title: Query Generator Config
          default:
            type: default
            separator: ' '
          discriminator:
            propertyName: type
            mapping:
              default: '#/components/schemas/DefaultRAGQueryGeneratorConfig'
              llm: '#/components/schemas/LLMRAGQueryGeneratorConfig'
        max_tokens_in_context:
          type: integer
          title: Max Tokens In Context
          default: 4096
        max_chunks:
          type: integer
          title: Max Chunks
          default: 5
        chunk_template:
          type: string
          title: Chunk Template
          default: "Result {index}\nContent: {chunk.content}\nMetadata: {metadata}\n"
        mode:
          default: vector
          $ref: '#/components/schemas/RAGSearchMode'
        ranker:
          title: Ranker
          oneOf:
          - $ref: '#/components/schemas/RRFRanker'
          - $ref: '#/components/schemas/WeightedRanker'
          discriminator:
            propertyName: type
            mapping:
              rrf: '#/components/schemas/RRFRanker'
              weighted: '#/components/schemas/WeightedRanker'
      type: object
      title: RAGQueryConfig
      description: "Configuration for the RAG query generation.\n\n:param query_generator_config: Configuration for the query generator.\n:param max_tokens_in_context: Maximum number of tokens in the context.\n:param max_chunks: Maximum number of chunks to retrieve.\n:param chunk_template: Template for formatting each retrieved chunk in the context.\n    Available placeholders: {index} (1-based chunk ordinal), {chunk.content} (chunk content string), {metadata} (chunk metadata dict).\n    Default: \"Result {index}\\nContent: {chunk.content}\\nMetadata: {metadata}\\n\"\n:param mode: Search mode for retrievalâ€”either \"vector\", \"keyword\", or \"hybrid\". Default \"vector\".\n:param ranker: Configuration for the ranker to use in hybrid search. Defaults to RRF ranker."
    RAGQueryResult:
      properties:
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Output'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Output'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Output'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Output'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Content
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
      type: object
      title: RAGQueryResult
      description: "Result of a RAG query containing retrieved content and metadata.\n\n:param content: (Optional) The retrieved content from the query\n:param metadata: Additional metadata about the query result"
    RAGSearchMode:
      type: string
      enum:
      - vector
      - keyword
      - hybrid
      title: RAGSearchMode
      description: "Search modes for RAG query retrieval:\n- VECTOR: Uses vector similarity search for semantic matching\n- KEYWORD: Uses keyword-based search for exact matching\n- HYBRID: Combines both vector and keyword search for better results"
    RRFRanker:
      properties:
        type:
          type: string
          const: rrf
          title: Type
          default: rrf
        impact_factor:
          type: number
          title: Impact Factor
          default: 60.0
          minimum: 0.0
      type: object
      title: RRFRanker
      description: "Reciprocal Rank Fusion (RRF) ranker configuration.\n\n:param type: The type of ranker, always \"rrf\"\n:param impact_factor: The impact factor for RRF scoring. Higher values give more weight to higher-ranked results.\n                     Must be greater than 0"
    RegexParserScoringFnParams:
      properties:
        type:
          type: string
          const: regex_parser
          title: Type
          default: regex_parser
        parsing_regexes:
          items:
            type: string
          type: array
          title: Parsing Regexes
          description: Regex to extract the answer from generated response
        aggregation_functions:
          items:
            $ref: '#/components/schemas/AggregationFunctionType'
          type: array
          title: Aggregation Functions
          description: Aggregation functions to apply to the scores of each row
      type: object
      title: RegexParserScoringFnParams
      description: "Parameters for regex parser scoring function configuration.\n:param type: The type of scoring function parameters, always regex_parser\n:param parsing_regexes: Regex to extract the answer from generated response\n:param aggregation_functions: Aggregation functions to apply to the scores of each row"
    RerankData:
      properties:
        index:
          type: integer
          title: Index
        relevance_score:
          type: number
          title: Relevance Score
      type: object
      required:
      - index
      - relevance_score
      title: RerankData
      description: "A single rerank result from a reranking response.\n\n:param index: The original index of the document in the input list\n:param relevance_score: The relevance score from the model output. Values are inverted when applicable so that higher scores indicate greater relevance."
    RerankResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/RerankData'
          type: array
          title: Data
      type: object
      required:
      - data
      title: RerankResponse
      description: "Response from a reranking request.\n\n:param data: List of rerank result objects, sorted by relevance score (descending)"
    RouteInfo:
      properties:
        route:
          type: string
          title: Route
        method:
          type: string
          title: Method
        provider_types:
          items:
            type: string
          type: array
          title: Provider Types
      type: object
      required:
      - route
      - method
      - provider_types
      title: RouteInfo
      description: "Information about an API route including its path, method, and implementing providers.\n\n:param route: The API endpoint path\n:param method: HTTP method for the route\n:param provider_types: List of provider types that implement this route"
    RowsDataSource:
      properties:
        type:
          type: string
          const: rows
          title: Type
          default: rows
        rows:
          items:
            additionalProperties: true
            type: object
          type: array
          title: Rows
      type: object
      required:
      - rows
      title: RowsDataSource
      description: "A dataset stored in rows.\n:param rows: The dataset is stored in rows. E.g.\n    - [\n        {\"messages\": [{\"role\": \"user\", \"content\": \"Hello, world!\"}, {\"role\": \"assistant\", \"content\": \"Hello, world!\"}]}\n    ]"
    RunShieldResponse:
      properties:
        violation:
          $ref: '#/components/schemas/SafetyViolation'
      type: object
      title: RunShieldResponse
      description: "Response from running a safety shield.\n\n:param violation: (Optional) Safety violation detected by the shield, if any"
    SafetyViolation:
      properties:
        violation_level:
          $ref: '#/components/schemas/ViolationLevel'
        user_message:
          title: User Message
          type: string
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
      type: object
      required:
      - violation_level
      title: SafetyViolation
      description: "Details of a safety violation detected by content moderation.\n\n:param violation_level: Severity level of the violation\n:param user_message: (Optional) Message to convey to the user about the violation\n:param metadata: Additional metadata including specific violation codes for debugging and telemetry"
    SamplingParams:
      properties:
        strategy:
          oneOf:
          - $ref: '#/components/schemas/GreedySamplingStrategy'
          - $ref: '#/components/schemas/TopPSamplingStrategy'
          - $ref: '#/components/schemas/TopKSamplingStrategy'
          title: Strategy
          discriminator:
            propertyName: type
            mapping:
              greedy: '#/components/schemas/GreedySamplingStrategy'
              top_k: '#/components/schemas/TopKSamplingStrategy'
              top_p: '#/components/schemas/TopPSamplingStrategy'
        max_tokens:
          title: Max Tokens
          type: integer
        repetition_penalty:
          title: Repetition Penalty
          default: 1.0
          type: number
        stop:
          title: Stop
          items:
            type: string
          type: array
      type: object
      title: SamplingParams
      description: "Sampling parameters.\n\n:param strategy: The sampling strategy.\n:param max_tokens: The maximum number of tokens that can be generated in the completion. The token count of\n    your prompt plus max_tokens cannot exceed the model's context length.\n:param repetition_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens\n    based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n:param stop: Up to 4 sequences where the API will stop generating further tokens.\n    The returned text will not contain the stop sequence."
    ScoreBatchResponse:
      properties:
        dataset_id:
          title: Dataset Id
          type: string
        results:
          additionalProperties:
            $ref: '#/components/schemas/ScoringResult'
          type: object
          title: Results
      type: object
      required:
      - results
      title: ScoreBatchResponse
      description: "Response from batch scoring operations on datasets.\n\n:param dataset_id: (Optional) The identifier of the dataset that was scored\n:param results: A map of scoring function name to ScoringResult"
    ScoreResponse:
      properties:
        results:
          additionalProperties:
            $ref: '#/components/schemas/ScoringResult'
          type: object
          title: Results
      type: object
      required:
      - results
      title: ScoreResponse
      description: "The response from scoring.\n\n:param results: A map of scoring function name to ScoringResult."
    ScoringFn-Output:
      properties:
        identifier:
          type: string
          title: Identifier
          description: Unique identifier for this resource in llama stack
        provider_resource_id:
          title: Provider Resource Id
          description: Unique identifier for this resource in the provider
          type: string
        provider_id:
          type: string
          title: Provider Id
          description: ID of the provider that owns this resource
        type:
          type: string
          const: scoring_function
          title: Type
          default: scoring_function
        description:
          title: Description
          type: string
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
          description: Any additional metadata for this definition
        return_type:
          oneOf:
          - $ref: '#/components/schemas/StringType'
          - $ref: '#/components/schemas/NumberType'
          - $ref: '#/components/schemas/BooleanType'
          - $ref: '#/components/schemas/ArrayType'
          - $ref: '#/components/schemas/ObjectType'
          - $ref: '#/components/schemas/JsonType'
          - $ref: '#/components/schemas/UnionType'
          - $ref: '#/components/schemas/ChatCompletionInputType'
          - $ref: '#/components/schemas/CompletionInputType'
          - $ref: '#/components/schemas/AgentTurnInputType'
          title: Return Type
          description: The return type of the deterministic function
          discriminator:
            propertyName: type
            mapping:
              agent_turn_input: '#/components/schemas/AgentTurnInputType'
              array: '#/components/schemas/ArrayType'
              boolean: '#/components/schemas/BooleanType'
              chat_completion_input: '#/components/schemas/ChatCompletionInputType'
              completion_input: '#/components/schemas/CompletionInputType'
              json: '#/components/schemas/JsonType'
              number: '#/components/schemas/NumberType'
              object: '#/components/schemas/ObjectType'
              string: '#/components/schemas/StringType'
              union: '#/components/schemas/UnionType'
        params:
          title: Params
          description: The parameters for the scoring function for benchmark eval, these can be overridden for app eval
          oneOf:
          - $ref: '#/components/schemas/LLMAsJudgeScoringFnParams'
          - $ref: '#/components/schemas/RegexParserScoringFnParams'
          - $ref: '#/components/schemas/BasicScoringFnParams'
          discriminator:
            propertyName: type
            mapping:
              basic: '#/components/schemas/BasicScoringFnParams'
              llm_as_judge: '#/components/schemas/LLMAsJudgeScoringFnParams'
              regex_parser: '#/components/schemas/RegexParserScoringFnParams'
      type: object
      required:
      - identifier
      - provider_id
      - return_type
      title: ScoringFn
      description: "A scoring function resource for evaluating model outputs.\n:param type: The resource type, always scoring_function"
    ScoringResult:
      properties:
        score_rows:
          items:
            additionalProperties: true
            type: object
          type: array
          title: Score Rows
        aggregated_results:
          additionalProperties: true
          type: object
          title: Aggregated Results
      type: object
      required:
      - score_rows
      - aggregated_results
      title: ScoringResult
      description: "A scoring result for a single row.\n\n:param score_rows: The scoring result for each row. Each row is a map of column name to value.\n:param aggregated_results: Map of metric name to aggregated value"
    SearchRankingOptions:
      properties:
        ranker:
          title: Ranker
          type: string
        score_threshold:
          title: Score Threshold
          default: 0.0
          type: number
      type: object
      title: SearchRankingOptions
      description: "Options for ranking and filtering search results.\n\n:param ranker: (Optional) Name of the ranking algorithm to use\n:param score_threshold: (Optional) Minimum relevance score threshold for results"
    Shield:
      properties:
        identifier:
          type: string
          title: Identifier
          description: Unique identifier for this resource in llama stack
        provider_resource_id:
          title: Provider Resource Id
          description: Unique identifier for this resource in the provider
          type: string
        provider_id:
          type: string
          title: Provider Id
          description: ID of the provider that owns this resource
        type:
          type: string
          const: shield
          title: Type
          default: shield
        params:
          title: Params
          additionalProperties: true
          type: object
      type: object
      required:
      - identifier
      - provider_id
      title: Shield
      description: "A safety shield resource that can be used to check content.\n\n:param params: (Optional) Configuration parameters for the shield\n:param type: The resource type, always shield"
    ShieldCallStep-Output:
      properties:
        turn_id:
          type: string
          title: Turn Id
        step_id:
          type: string
          title: Step Id
        started_at:
          title: Started At
          type: string
          format: date-time
        completed_at:
          title: Completed At
          type: string
          format: date-time
        step_type:
          type: string
          const: shield_call
          title: Step Type
          default: shield_call
        violation:
          $ref: '#/components/schemas/SafetyViolation'
      type: object
      required:
      - turn_id
      - step_id
      - violation
      title: ShieldCallStep
      description: "A shield call step in an agent turn.\n\n:param violation: The violation from the shield call."
    StopReason:
      type: string
      enum:
      - end_of_turn
      - end_of_message
      - out_of_tokens
      title: StopReason
    StringType:
      properties:
        type:
          type: string
          const: string
          title: Type
          default: string
      type: object
      title: StringType
      description: "Parameter type for string values.\n\n:param type: Discriminator type. Always \"string\""
    SystemMessage:
      properties:
        role:
          type: string
          const: system
          title: Role
          default: system
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Input'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Input'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Input'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Input'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Content
      type: object
      required:
      - content
      title: SystemMessage
      description: "A system message providing instructions or context to the model.\n\n:param role: Must be \"system\" to identify this as a system message\n:param content: The content of the \"system prompt\". If multiple system messages are provided, they are concatenated. The underlying Llama Stack code may also add other system messages (for example, for formatting tool definitions)."
    SystemMessageBehavior:
      type: string
      enum:
      - append
      - replace
      title: SystemMessageBehavior
      description: "Config for how to override the default system prompt.\n\n:cvar append: Appends the provided system message to the default system prompt:\n    https://www.llama.com/docs/model-cards-and-prompt-formats/llama3_2/#-function-definitions-in-the-system-prompt-\n:cvar replace: Replaces the default system prompt with the provided system message. The system message can include the string\n    '{{function_definitions}}' to indicate where the function definitions should be inserted."
    TextContentItem:
      properties:
        type:
          type: string
          const: text
          title: Type
          default: text
        text:
          type: string
          title: Text
      type: object
      required:
      - text
      title: TextContentItem
      description: "A text content item\n\n:param type: Discriminator type of the content item. Always \"text\"\n:param text: Text content"
    ToolCall:
      properties:
        call_id:
          type: string
          title: Call Id
        tool_name:
          anyOf:
          - $ref: '#/components/schemas/BuiltinTool'
          - type: string
          title: Tool Name
        arguments:
          type: string
          title: Arguments
      type: object
      required:
      - call_id
      - tool_name
      - arguments
      title: ToolCall
    ToolChoice:
      type: string
      enum:
      - auto
      - required
      - none
      title: ToolChoice
      description: "Whether tool use is required or automatic. This is a hint to the model which may not be followed. It depends on the Instruction Following capabilities of the model.\n\n:cvar auto: The model may use tools if it determines that is appropriate.\n:cvar required: The model must use tools.\n:cvar none: The model must not use tools."
    ToolConfig:
      properties:
        tool_choice:
          anyOf:
          - $ref: '#/components/schemas/ToolChoice'
          - type: string
          title: Tool Choice
          default: auto
        tool_prompt_format:
          $ref: '#/components/schemas/ToolPromptFormat'
        system_message_behavior:
          default: append
          $ref: '#/components/schemas/SystemMessageBehavior'
      type: object
      title: ToolConfig
      description: "Configuration for tool use.\n\n:param tool_choice: (Optional) Whether tool use is automatic, required, or none. Can also specify a tool name to use a specific tool. Defaults to ToolChoice.auto.\n:param tool_prompt_format: (Optional) Instructs the model how to format tool calls. By default, Llama Stack will attempt to use a format that is best adapted to the model.\n    - `ToolPromptFormat.json`: The tool calls are formatted as a JSON object.\n    - `ToolPromptFormat.function_tag`: The tool calls are enclosed in a <function=function_name> tag.\n    - `ToolPromptFormat.python_list`: The tool calls are output as Python syntax -- a list of function calls.\n:param system_message_behavior: (Optional) Config for how to override the default system prompt.\n    - `SystemMessageBehavior.append`: Appends the provided system message to the default system prompt.\n    - `SystemMessageBehavior.replace`: Replaces the default system prompt with the provided system message. The system message can include the string\n        '{{function_definitions}}' to indicate where the function definitions should be inserted."
    ToolDef:
      properties:
        toolgroup_id:
          title: Toolgroup Id
          type: string
        name:
          type: string
          title: Name
        description:
          title: Description
          type: string
        input_schema:
          title: Input Schema
          additionalProperties: true
          type: object
        output_schema:
          title: Output Schema
          additionalProperties: true
          type: object
        metadata:
          title: Metadata
          additionalProperties: true
          type: object
      type: object
      required:
      - name
      title: ToolDef
      description: "Tool definition used in runtime contexts.\n\n:param name: Name of the tool\n:param description: (Optional) Human-readable description of what the tool does\n:param input_schema: (Optional) JSON Schema for tool inputs (MCP inputSchema)\n:param output_schema: (Optional) JSON Schema for tool outputs (MCP outputSchema)\n:param metadata: (Optional) Additional metadata about the tool\n:param toolgroup_id: (Optional) ID of the tool group this tool belongs to"
    ToolExecutionStep-Output:
      properties:
        turn_id:
          type: string
          title: Turn Id
        step_id:
          type: string
          title: Step Id
        started_at:
          title: Started At
          type: string
          format: date-time
        completed_at:
          title: Completed At
          type: string
          format: date-time
        step_type:
          type: string
          const: tool_execution
          title: Step Type
          default: tool_execution
        tool_calls:
          items:
            $ref: '#/components/schemas/ToolCall'
          type: array
          title: Tool Calls
        tool_responses:
          items:
            $ref: '#/components/schemas/ToolResponse-Output'
          type: array
          title: Tool Responses
      type: object
      required:
      - turn_id
      - step_id
      - tool_calls
      - tool_responses
      title: ToolExecutionStep
      description: "A tool execution step in an agent turn.\n\n:param tool_calls: The tool calls to execute.\n:param tool_responses: The tool responses from the tool calls."
    ToolGroup:
      properties:
        identifier:
          type: string
          title: Identifier
          description: Unique identifier for this resource in llama stack
        provider_resource_id:
          title: Provider Resource Id
          description: Unique identifier for this resource in the provider
          type: string
        provider_id:
          type: string
          title: Provider Id
          description: ID of the provider that owns this resource
        type:
          type: string
          const: tool_group
          title: Type
          default: tool_group
        mcp_endpoint:
          $ref: '#/components/schemas/URL'
        args:
          title: Args
          additionalProperties: true
          type: object
      type: object
      required:
      - identifier
      - provider_id
      title: ToolGroup
      description: "A group of related tools managed together.\n\n:param type: Type of resource, always 'tool_group'\n:param mcp_endpoint: (Optional) Model Context Protocol endpoint for remote tools\n:param args: (Optional) Additional arguments for the tool group"
    ToolInvocationResult:
      properties:
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Output'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Output'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Output'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Output'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Content
        error_message:
          title: Error Message
          type: string
        error_code:
          title: Error Code
          type: integer
        metadata:
          title: Metadata
          additionalProperties: true
          type: object
      type: object
      title: ToolInvocationResult
      description: "Result of a tool invocation.\n\n:param content: (Optional) The output content from the tool execution\n:param error_message: (Optional) Error message if the tool execution failed\n:param error_code: (Optional) Numeric error code if the tool execution failed\n:param metadata: (Optional) Additional metadata about the tool execution"
    ToolPromptFormat:
      type: string
      enum:
      - json
      - function_tag
      - python_list
      title: ToolPromptFormat
      description: "Prompt format for calling custom / zero shot tools.\n\n:cvar json: JSON format for calling tools. It takes the form:\n    {\n        \"type\": \"function\",\n        \"function\" : {\n            \"name\": \"function_name\",\n            \"description\": \"function_description\",\n            \"parameters\": {...}\n        }\n    }\n:cvar function_tag: Function tag format, pseudo-XML. This looks like:\n    <function=function_name>(parameters)</function>\n\n:cvar python_list: Python list. The output is a valid Python expression that can be\n    evaluated to a list. Each element in the list is a function call. Example:\n    [\"function_name(param1, param2)\", \"function_name(param1, param2)\"]"
    ToolResponse-Input:
      properties:
        call_id:
          type: string
          title: Call Id
        tool_name:
          anyOf:
          - $ref: '#/components/schemas/BuiltinTool'
          - type: string
          title: Tool Name
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Input'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Input'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Input'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Input'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Content
        metadata:
          title: Metadata
          additionalProperties: true
          type: object
      type: object
      required:
      - call_id
      - tool_name
      - content
      title: ToolResponse
      description: "Response from a tool invocation.\n\n:param call_id: Unique identifier for the tool call this response is for\n:param tool_name: Name of the tool that was invoked\n:param content: The response content from the tool\n:param metadata: (Optional) Additional metadata about the tool response"
    ToolResponse-Output:
      properties:
        call_id:
          type: string
          title: Call Id
        tool_name:
          anyOf:
          - $ref: '#/components/schemas/BuiltinTool'
          - type: string
          title: Tool Name
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Output'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Output'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Output'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Output'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Content
        metadata:
          title: Metadata
          additionalProperties: true
          type: object
      type: object
      required:
      - call_id
      - tool_name
      - content
      title: ToolResponse
      description: "Response from a tool invocation.\n\n:param call_id: Unique identifier for the tool call this response is for\n:param tool_name: Name of the tool that was invoked\n:param content: The response content from the tool\n:param metadata: (Optional) Additional metadata about the tool response"
    ToolResponseMessage-Output:
      properties:
        role:
          type: string
          const: tool
          title: Role
          default: tool
        call_id:
          type: string
          title: Call Id
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Output'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Output'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Output'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Output'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Content
      type: object
      required:
      - call_id
      - content
      title: ToolResponseMessage
      description: "A message representing the result of a tool invocation.\n\n:param role: Must be \"tool\" to identify this as a tool response\n:param call_id: Unique identifier for the tool call this response is for\n:param content: The response content from the tool"
    TopKSamplingStrategy:
      properties:
        type:
          type: string
          const: top_k
          title: Type
          default: top_k
        top_k:
          type: integer
          minimum: 1.0
          title: Top K
      type: object
      required:
      - top_k
      title: TopKSamplingStrategy
      description: "Top-k sampling strategy that restricts sampling to the k most likely tokens.\n\n:param type: Must be \"top_k\" to identify this sampling strategy\n:param top_k: Number of top tokens to consider for sampling. Must be at least 1"
    TopPSamplingStrategy:
      properties:
        type:
          type: string
          const: top_p
          title: Type
          default: top_p
        temperature:
          title: Temperature
          type: number
          minimum: 0.0
        top_p:
          title: Top P
          default: 0.95
          type: number
      type: object
      required:
      - temperature
      title: TopPSamplingStrategy
      description: "Top-p (nucleus) sampling strategy that samples from the smallest set of tokens with cumulative probability >= p.\n\n:param type: Must be \"top_p\" to identify this sampling strategy\n:param temperature: Controls randomness in sampling. Higher values increase randomness\n:param top_p: Cumulative probability threshold for nucleus sampling. Defaults to 0.95"
    TrainingConfig:
      properties:
        n_epochs:
          type: integer
          title: N Epochs
        max_steps_per_epoch:
          type: integer
          title: Max Steps Per Epoch
          default: 1
        gradient_accumulation_steps:
          type: integer
          title: Gradient Accumulation Steps
          default: 1
        max_validation_steps:
          title: Max Validation Steps
          default: 1
          type: integer
        data_config:
          $ref: '#/components/schemas/DataConfig'
        optimizer_config:
          $ref: '#/components/schemas/OptimizerConfig'
        efficiency_config:
          $ref: '#/components/schemas/EfficiencyConfig'
        dtype:
          title: Dtype
          default: bf16
          type: string
      type: object
      required:
      - n_epochs
      title: TrainingConfig
      description: "Comprehensive configuration for the training process.\n\n:param n_epochs: Number of training epochs to run\n:param max_steps_per_epoch: Maximum number of steps to run per epoch\n:param gradient_accumulation_steps: Number of steps to accumulate gradients before updating\n:param max_validation_steps: (Optional) Maximum number of validation steps per epoch\n:param data_config: (Optional) Configuration for data loading and formatting\n:param optimizer_config: (Optional) Configuration for the optimization algorithm\n:param efficiency_config: (Optional) Configuration for memory and compute optimizations\n:param dtype: (Optional) Data type for model parameters (bf16, fp16, fp32)"
    Turn:
      properties:
        turn_id:
          type: string
          title: Turn Id
        session_id:
          type: string
          title: Session Id
        input_messages:
          items:
            anyOf:
            - $ref: '#/components/schemas/UserMessage-Output'
            - $ref: '#/components/schemas/ToolResponseMessage-Output'
          type: array
          title: Input Messages
        steps:
          items:
            oneOf:
            - $ref: '#/components/schemas/InferenceStep-Output'
            - $ref: '#/components/schemas/ToolExecutionStep-Output'
            - $ref: '#/components/schemas/ShieldCallStep-Output'
            - $ref: '#/components/schemas/MemoryRetrievalStep-Output'
            discriminator:
              propertyName: step_type
              mapping:
                inference: '#/components/schemas/InferenceStep-Output'
                memory_retrieval: '#/components/schemas/MemoryRetrievalStep-Output'
                shield_call: '#/components/schemas/ShieldCallStep-Output'
                tool_execution: '#/components/schemas/ToolExecutionStep-Output'
          type: array
          title: Steps
        output_message:
          $ref: '#/components/schemas/CompletionMessage-Output'
        output_attachments:
          title: Output Attachments
          items:
            $ref: '#/components/schemas/Attachment-Output'
          type: array
        started_at:
          type: string
          format: date-time
          title: Started At
        completed_at:
          title: Completed At
          type: string
          format: date-time
      type: object
      required:
      - turn_id
      - session_id
      - input_messages
      - steps
      - output_message
      - started_at
      title: Turn
      description: "A single turn in an interaction with an Agentic System.\n\n:param turn_id: Unique identifier for the turn within a session\n:param session_id: Unique identifier for the conversation session\n:param input_messages: List of messages that initiated this turn\n:param steps: Ordered list of processing steps executed during this turn\n:param output_message: The model's generated response containing content and metadata\n:param output_attachments: (Optional) Files or media attached to the agent's response\n:param started_at: Timestamp when the turn began\n:param completed_at: (Optional) Timestamp when the turn finished, if completed"
    URIDataSource:
      properties:
        type:
          type: string
          const: uri
          title: Type
          default: uri
        uri:
          type: string
          title: Uri
      type: object
      required:
      - uri
      title: URIDataSource
      description: "A dataset that can be obtained from a URI.\n:param uri: The dataset can be obtained from a URI. E.g.\n    - \"https://mywebsite.com/mydata.jsonl\"\n    - \"lsfs://mydata.jsonl\"\n    - \"data:csv;base64,{base64_content}\""
    URL:
      properties:
        uri:
          type: string
          title: Uri
      type: object
      required:
      - uri
      title: URL
      description: "A URL reference to external content.\n\n:param uri: The URL string pointing to the resource"
    UnionType:
      properties:
        type:
          type: string
          const: union
          title: Type
          default: union
      type: object
      title: UnionType
      description: "Parameter type for union values.\n\n:param type: Discriminator type. Always \"union\""
    UserMessage-Input:
      properties:
        role:
          type: string
          const: user
          title: Role
          default: user
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Input'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Input'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Input'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Input'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Content
        context:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Input'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Input'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Input'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Input'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Context
      type: object
      required:
      - content
      title: UserMessage
      description: "A message from the user in a chat conversation.\n\n:param role: Must be \"user\" to identify this as a user message\n:param content: The content of the message, which can include text and other media\n:param context: (Optional) This field is used internally by Llama Stack to pass RAG context. This field may be removed in the API in the future."
    UserMessage-Output:
      properties:
        role:
          type: string
          const: user
          title: Role
          default: user
        content:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Output'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Output'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Output'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Output'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Content
        context:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/ImageContentItem-Output'
            - $ref: '#/components/schemas/TextContentItem'
            discriminator:
              propertyName: type
              mapping:
                image: '#/components/schemas/ImageContentItem-Output'
                text: '#/components/schemas/TextContentItem'
          - items:
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem-Output'
              - $ref: '#/components/schemas/TextContentItem'
              discriminator:
                propertyName: type
                mapping:
                  image: '#/components/schemas/ImageContentItem-Output'
                  text: '#/components/schemas/TextContentItem'
            type: array
          title: Context
      type: object
      required:
      - content
      title: UserMessage
      description: "A message from the user in a chat conversation.\n\n:param role: Must be \"user\" to identify this as a user message\n:param content: The content of the message, which can include text and other media\n:param context: (Optional) This field is used internally by Llama Stack to pass RAG context. This field may be removed in the API in the future."
    VectorStoreChunkingStrategyAuto:
      properties:
        type:
          type: string
          const: auto
          title: Type
          default: auto
      type: object
      title: VectorStoreChunkingStrategyAuto
      description: "Automatic chunking strategy for vector store files.\n\n:param type: Strategy type, always \"auto\" for automatic chunking"
    VectorStoreChunkingStrategyStatic:
      properties:
        type:
          type: string
          const: static
          title: Type
          default: static
        static:
          $ref: '#/components/schemas/VectorStoreChunkingStrategyStaticConfig'
      type: object
      required:
      - static
      title: VectorStoreChunkingStrategyStatic
      description: "Static chunking strategy with configurable parameters.\n\n:param type: Strategy type, always \"static\" for static chunking\n:param static: Configuration parameters for the static chunking strategy"
    VectorStoreChunkingStrategyStaticConfig:
      properties:
        chunk_overlap_tokens:
          type: integer
          title: Chunk Overlap Tokens
          default: 400
        max_chunk_size_tokens:
          type: integer
          maximum: 4096.0
          minimum: 100.0
          title: Max Chunk Size Tokens
          default: 800
      type: object
      title: VectorStoreChunkingStrategyStaticConfig
      description: "Configuration for static chunking strategy.\n\n:param chunk_overlap_tokens: Number of tokens to overlap between adjacent chunks\n:param max_chunk_size_tokens: Maximum number of tokens per chunk, must be between 100 and 4096"
    VectorStoreContent:
      properties:
        type:
          type: string
          const: text
          title: Type
        text:
          type: string
          title: Text
      type: object
      required:
      - type
      - text
      title: VectorStoreContent
      description: "Content item from a vector store file or search result.\n\n:param type: Content type, currently only \"text\" is supported\n:param text: The actual text content"
    VectorStoreFileBatchObject:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: vector_store.file_batch
        created_at:
          type: integer
          title: Created At
        vector_store_id:
          type: string
          title: Vector Store Id
        status:
          anyOf:
          - type: string
            const: completed
          - type: string
            const: in_progress
          - type: string
            const: cancelled
          - type: string
            const: failed
          title: Status
        file_counts:
          $ref: '#/components/schemas/VectorStoreFileCounts'
      type: object
      required:
      - id
      - created_at
      - vector_store_id
      - status
      - file_counts
      title: VectorStoreFileBatchObject
      description: "OpenAI Vector Store File Batch object.\n\n:param id: Unique identifier for the file batch\n:param object: Object type identifier, always \"vector_store.file_batch\"\n:param created_at: Timestamp when the file batch was created\n:param vector_store_id: ID of the vector store containing the file batch\n:param status: Current processing status of the file batch\n:param file_counts: File processing status counts for the batch"
    VectorStoreFileCounts:
      properties:
        completed:
          type: integer
          title: Completed
        cancelled:
          type: integer
          title: Cancelled
        failed:
          type: integer
          title: Failed
        in_progress:
          type: integer
          title: In Progress
        total:
          type: integer
          title: Total
      type: object
      required:
      - completed
      - cancelled
      - failed
      - in_progress
      - total
      title: VectorStoreFileCounts
      description: "File processing status counts for a vector store.\n\n:param completed: Number of files that have been successfully processed\n:param cancelled: Number of files that had their processing cancelled\n:param failed: Number of files that failed to process\n:param in_progress: Number of files currently being processed\n:param total: Total number of files in the vector store"
    VectorStoreFileLastError:
      properties:
        code:
          anyOf:
          - type: string
            const: server_error
          - type: string
            const: rate_limit_exceeded
          title: Code
        message:
          type: string
          title: Message
      type: object
      required:
      - code
      - message
      title: VectorStoreFileLastError
      description: "Error information for failed vector store file processing.\n\n:param code: Error code indicating the type of failure\n:param message: Human-readable error message describing the failure"
    VectorStoreFileObject:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: vector_store.file
        attributes:
          additionalProperties: true
          type: object
          title: Attributes
        chunking_strategy:
          oneOf:
          - $ref: '#/components/schemas/VectorStoreChunkingStrategyAuto'
          - $ref: '#/components/schemas/VectorStoreChunkingStrategyStatic'
          title: Chunking Strategy
          discriminator:
            propertyName: type
            mapping:
              auto: '#/components/schemas/VectorStoreChunkingStrategyAuto'
              static: '#/components/schemas/VectorStoreChunkingStrategyStatic'
        created_at:
          type: integer
          title: Created At
        last_error:
          $ref: '#/components/schemas/VectorStoreFileLastError'
        status:
          anyOf:
          - type: string
            const: completed
          - type: string
            const: in_progress
          - type: string
            const: cancelled
          - type: string
            const: failed
          title: Status
        usage_bytes:
          type: integer
          title: Usage Bytes
          default: 0
        vector_store_id:
          type: string
          title: Vector Store Id
      type: object
      required:
      - id
      - chunking_strategy
      - created_at
      - status
      - vector_store_id
      title: VectorStoreFileObject
      description: "OpenAI Vector Store File object.\n\n:param id: Unique identifier for the file\n:param object: Object type identifier, always \"vector_store.file\"\n:param attributes: Key-value attributes associated with the file\n:param chunking_strategy: Strategy used for splitting the file into chunks\n:param created_at: Timestamp when the file was added to the vector store\n:param last_error: (Optional) Error information if file processing failed\n:param status: Current processing status of the file\n:param usage_bytes: Storage space used by this file in bytes\n:param vector_store_id: ID of the vector store containing this file"
    VectorStoreObject:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: vector_store
        created_at:
          type: integer
          title: Created At
        name:
          title: Name
          type: string
        usage_bytes:
          type: integer
          title: Usage Bytes
          default: 0
        file_counts:
          $ref: '#/components/schemas/VectorStoreFileCounts'
        status:
          type: string
          title: Status
          default: completed
        expires_after:
          title: Expires After
          additionalProperties: true
          type: object
        expires_at:
          title: Expires At
          type: integer
        last_active_at:
          title: Last Active At
          type: integer
        metadata:
          additionalProperties: true
          type: object
          title: Metadata
      type: object
      required:
      - id
      - created_at
      - file_counts
      title: VectorStoreObject
      description: "OpenAI Vector Store object.\n\n:param id: Unique identifier for the vector store\n:param object: Object type identifier, always \"vector_store\"\n:param created_at: Timestamp when the vector store was created\n:param name: (Optional) Name of the vector store\n:param usage_bytes: Storage space used by the vector store in bytes\n:param file_counts: File processing status counts for the vector store\n:param status: Current status of the vector store\n:param expires_after: (Optional) Expiration policy for the vector store\n:param expires_at: (Optional) Timestamp when the vector store will expire\n:param last_active_at: (Optional) Timestamp of last activity on the vector store\n:param metadata: Set of key-value pairs that can be attached to the vector store"
    VectorStoreSearchResponse:
      properties:
        file_id:
          type: string
          title: File Id
        filename:
          type: string
          title: Filename
        score:
          type: number
          title: Score
        attributes:
          title: Attributes
          additionalProperties:
            anyOf:
            - type: string
            - type: number
            - type: boolean
          type: object
        content:
          items:
            $ref: '#/components/schemas/VectorStoreContent'
          type: array
          title: Content
      type: object
      required:
      - file_id
      - filename
      - score
      - content
      title: VectorStoreSearchResponse
      description: "Response from searching a vector store.\n\n:param file_id: Unique identifier of the file containing the result\n:param filename: Name of the file containing the result\n:param score: Relevance score for this search result\n:param attributes: (Optional) Key-value attributes associated with the file\n:param content: List of content items matching the search query"
    VectorStoreSearchResponsePage:
      properties:
        object:
          type: string
          title: Object
          default: vector_store.search_results.page
        search_query:
          type: string
          title: Search Query
        data:
          items:
            $ref: '#/components/schemas/VectorStoreSearchResponse'
          type: array
          title: Data
        has_more:
          type: boolean
          title: Has More
          default: false
        next_page:
          title: Next Page
          type: string
      type: object
      required:
      - search_query
      - data
      title: VectorStoreSearchResponsePage
      description: "Paginated response from searching a vector store.\n\n:param object: Object type identifier for the search results page\n:param search_query: The original search query that was executed\n:param data: List of search result objects\n:param has_more: Whether there are more results available beyond this page\n:param next_page: (Optional) Token for retrieving the next page of results"
    VersionInfo:
      properties:
        version:
          type: string
          title: Version
      type: object
      required:
      - version
      title: VersionInfo
      description: "Version information for the service.\n\n:param version: Version number of the service"
    ViolationLevel:
      type: string
      enum:
      - info
      - warn
      - error
      title: ViolationLevel
      description: "Severity level of a safety violation.\n\n:cvar INFO: Informational level violation that does not require action\n:cvar WARN: Warning level violation that suggests caution but allows continuation\n:cvar ERROR: Error level violation that requires blocking or intervention"
    WeightedRanker:
      properties:
        type:
          type: string
          const: weighted
          title: Type
          default: weighted
        alpha:
          type: number
          maximum: 1.0
          minimum: 0.0
          title: Alpha
          description: Weight factor between 0 and 1. 0 means only keyword scores, 1 means only vector scores.
          default: 0.5
      type: object
      title: WeightedRanker
      description: "Weighted ranker configuration that combines vector and keyword scores.\n\n:param type: The type of ranker, always \"weighted\"\n:param alpha: Weight factor between 0 and 1.\n             0 means only use keyword scores,\n             1 means only use vector scores,\n             values in between blend both scores."
    _URLOrData:
      properties:
        url:
          $ref: '#/components/schemas/URL'
        data:
          contentEncoding: base64
          title: Data
          type: string
      type: object
      title: _URLOrData
      description: "A URL or a base64 encoded string\n\n:param url: A URL of the image or data URL in the format of data:image/{type};base64,{data}. Note that URL could have length limits.\n:param data: base64 encoded image data as string"
    __main_____agents_agent_id_session_Request:
      properties:
        agent_id:
          type: string
          title: Agent Id
        session_name:
          type: string
          title: Session Name
      type: object
      required:
      - agent_id
      - session_name
      title: _agents_agent_id_session_Request
    __main_____agents_agent_id_session_session_id_turn_Request:
      properties:
        agent_id:
          type: string
          title: Agent Id
        session_id:
          type: string
          title: Session Id
        messages:
          $ref: '#/components/schemas/UserMessage-Input'
        stream:
          type: boolean
          title: Stream
          default: false
        documents:
          $ref: '#/components/schemas/Document'
        toolgroups:
          anyOf:
          - type: string
          - $ref: '#/components/schemas/AgentToolGroupWithArgs'
          title: Toolgroups
        tool_config:
          $ref: '#/components/schemas/ToolConfig'
      type: object
      required:
      - agent_id
      - session_id
      - messages
      - documents
      - toolgroups
      - tool_config
      title: _agents_agent_id_session_session_id_turn_Request
    __main_____agents_agent_id_session_session_id_turn_turn_id_resume_Request:
      properties:
        agent_id:
          type: string
          title: Agent Id
        session_id:
          type: string
          title: Session Id
        turn_id:
          type: string
          title: Turn Id
        tool_responses:
          $ref: '#/components/schemas/ToolResponse-Input'
        stream:
          type: boolean
          title: Stream
          default: false
      type: object
      required:
      - agent_id
      - session_id
      - turn_id
      - tool_responses
      title: _agents_agent_id_session_session_id_turn_turn_id_resume_Request
    __main_____datasets_Request:
      properties:
        purpose:
          $ref: '#/components/schemas/DatasetPurpose'
        metadata:
          type: string
          title: Metadata
        dataset_id:
          type: string
          title: Dataset Id
      type: object
      required:
      - purpose
      - metadata
      - dataset_id
      title: _datasets_Request
    _batches_Request:
      properties:
        input_file_id:
          type: string
          title: Input File Id
        endpoint:
          type: string
          title: Endpoint
        completion_window:
          type: string
          title: Completion Window
        metadata:
          type: string
          title: Metadata
        idempotency_key:
          type: string
          title: Idempotency Key
      type: object
      required:
      - input_file_id
      - endpoint
      - completion_window
      - metadata
      - idempotency_key
      title: _batches_Request
    _batches_batch_id_cancel_Request:
      properties:
        batch_id:
          type: string
          title: Batch Id
      type: object
      required:
      - batch_id
      title: _batches_batch_id_cancel_Request
    _conversations_Request:
      properties:
        items:
          oneOf:
          - $ref: '#/components/schemas/OpenAIResponseMessage-Input'
          - $ref: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
          - $ref: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
          - $ref: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
          - $ref: '#/components/schemas/OpenAIResponseInputFunctionToolCallOutput'
          - $ref: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
          - $ref: '#/components/schemas/OpenAIResponseMCPApprovalResponse'
          - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
          - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
          title: Items
          discriminator:
            propertyName: type
            mapping:
              file_search_call: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
              function_call: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
              function_call_output: '#/components/schemas/OpenAIResponseInputFunctionToolCallOutput'
              mcp_approval_request: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
              mcp_approval_response: '#/components/schemas/OpenAIResponseMCPApprovalResponse'
              mcp_call: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
              mcp_list_tools: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
              message: '#/components/schemas/OpenAIResponseMessage-Input'
              web_search_call: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
        metadata:
          type: string
          title: Metadata
      type: object
      required:
      - items
      - metadata
      title: _conversations_Request
    _conversations_conversation_id_Request:
      properties:
        conversation_id:
          type: string
          title: Conversation Id
        metadata:
          type: string
          title: Metadata
      type: object
      required:
      - conversation_id
      - metadata
      title: _conversations_conversation_id_Request
    _conversations_conversation_id_items_Request:
      properties:
        conversation_id:
          type: string
          title: Conversation Id
        items:
          anyOf:
          - $ref: '#/components/schemas/OpenAIResponseMessage-Input'
          - $ref: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
          - $ref: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
          - $ref: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
          - $ref: '#/components/schemas/OpenAIResponseInputFunctionToolCallOutput'
          - $ref: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
          - $ref: '#/components/schemas/OpenAIResponseMCPApprovalResponse'
          - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
          - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
          title: Items
      type: object
      required:
      - conversation_id
      - items
      title: _conversations_conversation_id_items_Request
    _inference_rerank_Request:
      properties:
        model:
          type: string
          title: Model
        query:
          type: string
          title: Query
        items:
          type: string
          title: Items
        max_num_results:
          type: integer
          title: Max Num Results
      type: object
      required:
      - model
      - query
      - items
      - max_num_results
      title: _inference_rerank_Request
    _models_Request:
      properties:
        model_id:
          type: string
          title: Model Id
        provider_model_id:
          type: string
          title: Provider Model Id
        provider_id:
          type: string
          title: Provider Id
        metadata:
          type: string
          title: Metadata
        model_type:
          $ref: '#/components/schemas/ModelType'
      type: object
      required:
      - model_id
      - provider_model_id
      - provider_id
      - metadata
      - model_type
      title: _models_Request
    _moderations_Request:
      properties:
        input:
          type: string
          title: Input
        model:
          type: string
          title: Model
      type: object
      required:
      - input
      - model
      title: _moderations_Request
    _prompts_Request:
      properties:
        prompt:
          type: string
          title: Prompt
        variables:
          type: string
          title: Variables
      type: object
      required:
      - prompt
      - variables
      title: _prompts_Request
    _prompts_prompt_id_Request:
      properties:
        prompt_id:
          type: string
          title: Prompt Id
        prompt:
          type: string
          title: Prompt
        version:
          type: integer
          title: Version
        variables:
          type: string
          title: Variables
        set_as_default:
          type: boolean
          title: Set As Default
          default: true
      type: object
      required:
      - prompt_id
      - prompt
      - version
      - variables
      title: _prompts_prompt_id_Request
    _prompts_prompt_id_set_default_version_Request:
      properties:
        prompt_id:
          type: string
          title: Prompt Id
        version:
          type: integer
          title: Version
      type: object
      required:
      - prompt_id
      - version
      title: _prompts_prompt_id_set_default_version_Request
    _responses_Request:
      properties:
        input:
          type: string
          title: Input
        model:
          type: string
          title: Model
        prompt:
          $ref: '#/components/schemas/OpenAIResponsePrompt'
        instructions:
          type: string
          title: Instructions
        previous_response_id:
          type: string
          title: Previous Response Id
        conversation:
          type: string
          title: Conversation
        store:
          type: boolean
          title: Store
          default: true
        stream:
          type: boolean
          title: Stream
          default: false
        temperature:
          type: number
          title: Temperature
        text:
          $ref: '#/components/schemas/OpenAIResponseText'
        tools:
          oneOf:
          - $ref: '#/components/schemas/OpenAIResponseInputToolWebSearch'
          - $ref: '#/components/schemas/OpenAIResponseInputToolFileSearch'
          - $ref: '#/components/schemas/OpenAIResponseInputToolFunction'
          - $ref: '#/components/schemas/OpenAIResponseInputToolMCP'
          title: Tools
          discriminator:
            propertyName: type
            mapping:
              file_search: '#/components/schemas/OpenAIResponseInputToolFileSearch'
              function: '#/components/schemas/OpenAIResponseInputToolFunction'
              mcp: '#/components/schemas/OpenAIResponseInputToolMCP'
              web_search: '#/components/schemas/OpenAIResponseInputToolWebSearch'
              web_search_preview: '#/components/schemas/OpenAIResponseInputToolWebSearch'
              web_search_preview_2025_03_11: '#/components/schemas/OpenAIResponseInputToolWebSearch'
        include:
          type: string
          title: Include
        max_infer_iters:
          type: integer
          title: Max Infer Iters
          default: 10
      type: object
      required:
      - input
      - model
      - prompt
      - instructions
      - previous_response_id
      - conversation
      - temperature
      - text
      - tools
      - include
      title: _responses_Request
    _scoring_score_Request:
      properties:
        input_rows:
          type: string
          title: Input Rows
        scoring_functions:
          type: string
          title: Scoring Functions
      type: object
      required:
      - input_rows
      - scoring_functions
      title: _scoring_score_Request
    _scoring_score_batch_Request:
      properties:
        dataset_id:
          type: string
          title: Dataset Id
        scoring_functions:
          type: string
          title: Scoring Functions
        save_results_dataset:
          type: boolean
          title: Save Results Dataset
          default: false
      type: object
      required:
      - dataset_id
      - scoring_functions
      title: _scoring_score_batch_Request
    _shields_Request:
      properties:
        shield_id:
          type: string
          title: Shield Id
        provider_shield_id:
          type: string
          title: Provider Shield Id
        provider_id:
          type: string
          title: Provider Id
        params:
          type: string
          title: Params
      type: object
      required:
      - shield_id
      - provider_shield_id
      - provider_id
      - params
      title: _shields_Request
    _tool_runtime_invoke_Request:
      properties:
        tool_name:
          type: string
          title: Tool Name
        kwargs:
          type: string
          title: Kwargs
      type: object
      required:
      - tool_name
      - kwargs
      title: _tool_runtime_invoke_Request
    _tool_runtime_rag_tool_query_Request:
      properties:
        content:
          type: string
          title: Content
        vector_store_ids:
          type: string
          title: Vector Store Ids
        query_config:
          $ref: '#/components/schemas/RAGQueryConfig'
      type: object
      required:
      - content
      - vector_store_ids
      - query_config
      title: _tool_runtime_rag_tool_query_Request
    _vector_io_query_Request:
      properties:
        vector_store_id:
          type: string
          title: Vector Store Id
        query:
          type: string
          title: Query
        params:
          type: string
          title: Params
      type: object
      required:
      - vector_store_id
      - query
      - params
      title: _vector_io_query_Request
    _vector_stores_vector_store_id_Request:
      properties:
        vector_store_id:
          type: string
          title: Vector Store Id
        name:
          type: string
          title: Name
        expires_after:
          type: string
          title: Expires After
        metadata:
          type: string
          title: Metadata
      type: object
      required:
      - vector_store_id
      - name
      - expires_after
      - metadata
      title: _vector_stores_vector_store_id_Request
    _vector_stores_vector_store_id_file_batches_batch_id_cancel_Request:
      properties:
        batch_id:
          type: string
          title: Batch Id
        vector_store_id:
          type: string
          title: Vector Store Id
      type: object
      required:
      - batch_id
      - vector_store_id
      title: _vector_stores_vector_store_id_file_batches_batch_id_cancel_Request
    _vector_stores_vector_store_id_files_Request:
      properties:
        vector_store_id:
          type: string
          title: Vector Store Id
        file_id:
          type: string
          title: File Id
        attributes:
          type: string
          title: Attributes
        chunking_strategy:
          anyOf:
          - $ref: '#/components/schemas/VectorStoreChunkingStrategyAuto'
          - $ref: '#/components/schemas/VectorStoreChunkingStrategyStatic'
          title: Chunking Strategy
      type: object
      required:
      - vector_store_id
      - file_id
      - attributes
      - chunking_strategy
      title: _vector_stores_vector_store_id_files_Request
    _vector_stores_vector_store_id_files_file_id_Request:
      properties:
        vector_store_id:
          type: string
          title: Vector Store Id
        file_id:
          type: string
          title: File Id
        attributes:
          type: string
          title: Attributes
      type: object
      required:
      - vector_store_id
      - file_id
      - attributes
      title: _vector_stores_vector_store_id_files_file_id_Request
    _vector_stores_vector_store_id_search_Request:
      properties:
        vector_store_id:
          type: string
          title: Vector Store Id
        query:
          type: string
          title: Query
        filters:
          type: string
          title: Filters
        max_num_results:
          type: integer
          title: Max Num Results
          default: 10
        ranking_options:
          $ref: '#/components/schemas/SearchRankingOptions'
        rewrite_query:
          type: boolean
          title: Rewrite Query
          default: false
        search_mode:
          type: string
          title: Search Mode
          default: vector
      type: object
      required:
      - vector_store_id
      - query
      - filters
      - ranking_options
      title: _vector_stores_vector_store_id_search_Request
    Error:
      description: "Error response from the API. Roughly follows RFC 7807.\n\n:param status: HTTP status code\n:param title: Error title, a short summary of the error which is invariant for an error type\n:param detail: Error detail, a longer human-readable description of the error\n:param instance: (Optional) A URL which can be used to retrieve more information about the specific occurrence of the error"
      properties:
        status:
          title: Status
          type: integer
        title:
          title: Title
          type: string
        detail:
          title: Detail
          type: string
        instance:
          title: Instance
          type: string
          nullable: true
      required:
      - status
      - title
      - detail
      title: Error
      type: object
    Agent:
      description: "An agent instance with configuration and metadata.\n\n:param agent_id: Unique identifier for the agent\n:param agent_config: Configuration settings for the agent\n:param created_at: Timestamp when the agent was created"
      properties:
        agent_id:
          title: Agent Id
          type: string
        agent_config:
          $ref: '#/components/schemas/AgentConfig'
        created_at:
          format: date-time
          title: Created At
          type: string
      required:
      - agent_id
      - agent_config
      - created_at
      title: Agent
      type: object
    AgentStepResponse:
      description: "Response containing details of a specific agent step.\n\n:param step: The complete step data and execution details"
      properties:
        step:
          discriminator:
            mapping:
              inference: '#/$defs/InferenceStep'
              memory_retrieval: '#/$defs/MemoryRetrievalStep'
              shield_call: '#/$defs/ShieldCallStep'
              tool_execution: '#/$defs/ToolExecutionStep'
            propertyName: step_type
          oneOf:
          - $ref: '#/components/schemas/InferenceStep'
          - $ref: '#/components/schemas/ToolExecutionStep'
          - $ref: '#/components/schemas/ShieldCallStep'
          - $ref: '#/components/schemas/MemoryRetrievalStep'
          title: Step
      required:
      - step
      title: AgentStepResponse
      type: object
    CompletionMessage:
      description: "A message containing the model's (assistant) response in a chat conversation.\n\n:param role: Must be \"assistant\" to identify this as the model's response\n:param content: The content of the model's response\n:param stop_reason: Reason why the model stopped generating. Options are:\n    - `StopReason.end_of_turn`: The model finished generating the entire response.\n    - `StopReason.end_of_message`: The model finished generating but generated a partial response -- usually, a tool call. The user may call the tool and continue the conversation with the tool's response.\n    - `StopReason.out_of_tokens`: The model ran out of token budget.\n:param tool_calls: List of tool calls. Each tool call is a ToolCall object."
      properties:
        role:
          const: assistant
          default: assistant
          title: Role
          type: string
        content:
          anyOf:
          - type: string
          - discriminator:
              mapping:
                image: '#/$defs/ImageContentItem'
                text: '#/$defs/TextContentItem'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/ImageContentItem'
            - $ref: '#/components/schemas/TextContentItem'
          - items:
              discriminator:
                mapping:
                  image: '#/$defs/ImageContentItem'
                  text: '#/$defs/TextContentItem'
                propertyName: type
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem'
              - $ref: '#/components/schemas/TextContentItem'
            type: array
          title: Content
        stop_reason:
          $ref: '#/components/schemas/StopReason'
        tool_calls:
          title: Tool Calls
          items:
            $ref: '#/components/schemas/ToolCall'
          type: array
      required:
      - content
      - stop_reason
      title: CompletionMessage
      type: object
    InferenceStep:
      description: "An inference step in an agent turn.\n\n:param model_response: The response from the LLM."
      properties:
        turn_id:
          title: Turn Id
          type: string
        step_id:
          title: Step Id
          type: string
        started_at:
          title: Started At
          format: date-time
          type: string
          nullable: true
        completed_at:
          title: Completed At
          format: date-time
          type: string
          nullable: true
        step_type:
          const: inference
          default: inference
          title: Step Type
          type: string
        model_response:
          $ref: '#/components/schemas/CompletionMessage'
      required:
      - turn_id
      - step_id
      - model_response
      title: InferenceStep
      type: object
    ListOpenAIResponseInputItem:
      description: "List container for OpenAI response input items.\n\n:param data: List of input items\n:param object: Object type identifier, always \"list\""
      properties:
        data:
          items:
            anyOf:
            - discriminator:
                mapping:
                  file_search_call: '#/$defs/OpenAIResponseOutputMessageFileSearchToolCall'
                  function_call: '#/$defs/OpenAIResponseOutputMessageFunctionToolCall'
                  mcp_approval_request: '#/$defs/OpenAIResponseMCPApprovalRequest'
                  mcp_call: '#/$defs/OpenAIResponseOutputMessageMCPCall'
                  mcp_list_tools: '#/$defs/OpenAIResponseOutputMessageMCPListTools'
                  message: '#/$defs/OpenAIResponseMessage'
                  web_search_call: '#/$defs/OpenAIResponseOutputMessageWebSearchToolCall'
                propertyName: type
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseMessage'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
              - $ref: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
            - $ref: '#/components/schemas/OpenAIResponseInputFunctionToolCallOutput'
            - $ref: '#/components/schemas/OpenAIResponseMCPApprovalResponse'
            - $ref: '#/components/schemas/OpenAIResponseMessage'
          title: Data
          type: array
        object:
          const: list
          default: list
          title: Object
          type: string
      required:
      - data
      title: ListOpenAIResponseInputItem
      type: object
    ListOpenAIResponseObject:
      description: "Paginated list of OpenAI response objects with navigation metadata.\n\n:param data: List of response objects with their input context\n:param has_more: Whether there are more results available beyond this page\n:param first_id: Identifier of the first item in this page\n:param last_id: Identifier of the last item in this page\n:param object: Object type identifier, always \"list\""
      properties:
        data:
          items:
            $ref: '#/components/schemas/OpenAIResponseObjectWithInput'
          title: Data
          type: array
        has_more:
          title: Has More
          type: boolean
        first_id:
          title: First Id
          type: string
        last_id:
          title: Last Id
          type: string
        object:
          const: list
          default: list
          title: Object
          type: string
      required:
      - data
      - has_more
      - first_id
      - last_id
      title: ListOpenAIResponseObject
      type: object
    MemoryRetrievalStep:
      description: "A memory retrieval step in an agent turn.\n\n:param vector_store_ids: The IDs of the vector databases to retrieve context from.\n:param inserted_context: The context retrieved from the vector databases."
      properties:
        turn_id:
          title: Turn Id
          type: string
        step_id:
          title: Step Id
          type: string
        started_at:
          title: Started At
          format: date-time
          type: string
          nullable: true
        completed_at:
          title: Completed At
          format: date-time
          type: string
          nullable: true
        step_type:
          const: memory_retrieval
          default: memory_retrieval
          title: Step Type
          type: string
        vector_store_ids:
          title: Vector Store Ids
          type: string
        inserted_context:
          anyOf:
          - type: string
          - discriminator:
              mapping:
                image: '#/$defs/ImageContentItem'
                text: '#/$defs/TextContentItem'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/ImageContentItem'
            - $ref: '#/components/schemas/TextContentItem'
          - items:
              discriminator:
                mapping:
                  image: '#/$defs/ImageContentItem'
                  text: '#/$defs/TextContentItem'
                propertyName: type
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem'
              - $ref: '#/components/schemas/TextContentItem'
            type: array
          title: Inserted Context
      required:
      - turn_id
      - step_id
      - vector_store_ids
      - inserted_context
      title: MemoryRetrievalStep
      type: object
    OpenAIDeleteResponseObject:
      description: "Response object confirming deletion of an OpenAI response.\n\n:param id: Unique identifier of the deleted response\n:param object: Object type identifier, always \"response\"\n:param deleted: Deletion confirmation flag, always True"
      properties:
        id:
          title: Id
          type: string
        object:
          const: response
          default: response
          title: Object
          type: string
        deleted:
          default: true
          title: Deleted
          type: boolean
      required:
      - id
      title: OpenAIDeleteResponseObject
      type: object
    PaginatedResponse:
      description: "A generic paginated response that follows a simple format.\n\n:param data: The list of items for the current page\n:param has_more: Whether there are more items available after this set\n:param url: The URL for accessing this list"
      properties:
        data:
          items:
            additionalProperties: true
            type: object
          title: Data
          type: array
        has_more:
          title: Has More
          type: boolean
        url:
          title: Url
          type: string
          nullable: true
      required:
      - data
      - has_more
      title: PaginatedResponse
      type: object
    Session:
      description: "A single session of an interaction with an Agentic System.\n\n:param session_id: Unique identifier for the conversation session\n:param session_name: Human-readable name for the session\n:param turns: List of all turns that have occurred in this session\n:param started_at: Timestamp when the session was created"
      properties:
        session_id:
          title: Session Id
          type: string
        session_name:
          title: Session Name
          type: string
        turns:
          items:
            $ref: '#/components/schemas/Turn'
          title: Turns
          type: array
        started_at:
          format: date-time
          title: Started At
          type: string
      required:
      - session_id
      - session_name
      - turns
      - started_at
      title: Session
      type: object
    ShieldCallStep:
      description: "A shield call step in an agent turn.\n\n:param violation: The violation from the shield call."
      properties:
        turn_id:
          title: Turn Id
          type: string
        step_id:
          title: Step Id
          type: string
        started_at:
          title: Started At
          format: date-time
          type: string
          nullable: true
        completed_at:
          title: Completed At
          format: date-time
          type: string
          nullable: true
        step_type:
          const: shield_call
          default: shield_call
          title: Step Type
          type: string
        violation:
          $ref: '#/components/schemas/SafetyViolation'
      required:
      - turn_id
      - step_id
      - violation
      title: ShieldCallStep
      type: object
    ToolExecutionStep:
      description: "A tool execution step in an agent turn.\n\n:param tool_calls: The tool calls to execute.\n:param tool_responses: The tool responses from the tool calls."
      properties:
        turn_id:
          title: Turn Id
          type: string
        step_id:
          title: Step Id
          type: string
        started_at:
          title: Started At
          format: date-time
          type: string
          nullable: true
        completed_at:
          title: Completed At
          format: date-time
          type: string
          nullable: true
        step_type:
          const: tool_execution
          default: tool_execution
          title: Step Type
          type: string
        tool_calls:
          items:
            $ref: '#/components/schemas/ToolCall'
          title: Tool Calls
          type: array
        tool_responses:
          items:
            $ref: '#/components/schemas/ToolResponse'
          title: Tool Responses
          type: array
      required:
      - turn_id
      - step_id
      - tool_calls
      - tool_responses
      title: ToolExecutionStep
      type: object
    ToolResponse:
      description: "Response from a tool invocation.\n\n:param call_id: Unique identifier for the tool call this response is for\n:param tool_name: Name of the tool that was invoked\n:param content: The response content from the tool\n:param metadata: (Optional) Additional metadata about the tool response"
      properties:
        call_id:
          title: Call Id
          type: string
        tool_name:
          anyOf:
          - $ref: '#/components/schemas/BuiltinTool'
          - type: string
          title: Tool Name
        content:
          anyOf:
          - type: string
          - discriminator:
              mapping:
                image: '#/$defs/ImageContentItem'
                text: '#/$defs/TextContentItem'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/ImageContentItem'
            - $ref: '#/components/schemas/TextContentItem'
          - items:
              discriminator:
                mapping:
                  image: '#/$defs/ImageContentItem'
                  text: '#/$defs/TextContentItem'
                propertyName: type
              oneOf:
              - $ref: '#/components/schemas/ImageContentItem'
              - $ref: '#/components/schemas/TextContentItem'
            type: array
          title: Content
        metadata:
          title: Metadata
          additionalProperties: true
          type: object
          nullable: true
      required:
      - call_id
      - tool_name
      - content
      title: ToolResponse
      type: object
    ListBatchesResponse:
      description: Response containing a list of batch objects.
      properties:
        object:
          const: list
          default: list
          title: Object
          type: string
        data:
          description: List of batch objects
          items:
            $ref: '#/components/schemas/Batch'
          title: Data
          type: array
        first_id:
          description: ID of the first batch in the list
          title: First Id
          type: string
          nullable: true
        last_id:
          description: ID of the last batch in the list
          title: Last Id
          type: string
          nullable: true
        has_more:
          default: false
          description: Whether there are more batches available
          title: Has More
          type: boolean
      required:
      - data
      title: ListBatchesResponse
      type: object
    ConversationDeletedResource:
      description: Response for deleted conversation.
      properties:
        id:
          description: The deleted conversation identifier
          title: Id
          type: string
        object:
          default: conversation.deleted
          description: Object type
          title: Object
          type: string
        deleted:
          default: true
          description: Whether the object was deleted
          title: Deleted
          type: boolean
      required:
      - id
      title: ConversationDeletedResource
      type: object
    ConversationItemDeletedResource:
      description: Response for deleted conversation item.
      properties:
        id:
          description: The deleted item identifier
          title: Id
          type: string
        object:
          default: conversation.item.deleted
          description: Object type
          title: Object
          type: string
        deleted:
          default: true
          description: Whether the object was deleted
          title: Deleted
          type: boolean
      required:
      - id
      title: ConversationItemDeletedResource
      type: object
    ListOpenAIFileResponse:
      description: "Response for listing files in OpenAI Files API.\n\n:param data: List of file objects\n:param has_more: Whether there are more files available beyond this page\n:param first_id: ID of the first file in the list for pagination\n:param last_id: ID of the last file in the list for pagination\n:param object: The object type, which is always \"list\""
      properties:
        data:
          items:
            $ref: '#/components/schemas/OpenAIFileObject'
          title: Data
          type: array
        has_more:
          title: Has More
          type: boolean
        first_id:
          title: First Id
          type: string
        last_id:
          title: Last Id
          type: string
        object:
          const: list
          default: list
          title: Object
          type: string
      required:
      - data
      - has_more
      - first_id
      - last_id
      title: ListOpenAIFileResponse
      type: object
    OpenAIFileDeleteResponse:
      description: "Response for deleting a file in OpenAI Files API.\n\n:param id: The file identifier that was deleted\n:param object: The object type, which is always \"file\"\n:param deleted: Whether the file was successfully deleted"
      properties:
        id:
          title: Id
          type: string
        object:
          const: file
          default: file
          title: Object
          type: string
        deleted:
          title: Deleted
          type: boolean
      required:
      - id
      - deleted
      title: OpenAIFileDeleteResponse
      type: object
    ListOpenAIChatCompletionResponse:
      description: "Response from listing OpenAI-compatible chat completions.\n\n:param data: List of chat completion objects with their input messages\n:param has_more: Whether there are more completions available beyond this list\n:param first_id: ID of the first completion in this list\n:param last_id: ID of the last completion in this list\n:param object: Must be \"list\" to identify this as a list response"
      properties:
        data:
          items:
            $ref: '#/components/schemas/OpenAICompletionWithInputMessages'
          title: Data
          type: array
        has_more:
          title: Has More
          type: boolean
        first_id:
          title: First Id
          type: string
        last_id:
          title: Last Id
          type: string
        object:
          const: list
          default: list
          title: Object
          type: string
      required:
      - data
      - has_more
      - first_id
      - last_id
      title: ListOpenAIChatCompletionResponse
      type: object
    OpenAIAssistantMessageParam:
      description: "A message containing the model's (assistant) response in an OpenAI-compatible chat completion request.\n\n:param role: Must be \"assistant\" to identify this as the model's response\n:param content: The content of the model's response\n:param name: (Optional) The name of the assistant message participant.\n:param tool_calls: List of tool calls. Each tool call is an OpenAIChatCompletionToolCall object."
      properties:
        role:
          const: assistant
          default: assistant
          title: Role
          type: string
        content:
          anyOf:
          - type: string
          - items:
              $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
            type: array
          title: Content
          nullable: true
        name:
          title: Name
          type: string
          nullable: true
        tool_calls:
          title: Tool Calls
          items:
            $ref: '#/components/schemas/OpenAIChatCompletionToolCall'
          type: array
          nullable: true
      title: OpenAIAssistantMessageParam
      type: object
    OpenAIChoice:
      description: "A choice from an OpenAI-compatible chat completion response.\n\n:param message: The message from the model\n:param finish_reason: The reason the model stopped generating\n:param index: The index of the choice\n:param logprobs: (Optional) The log probabilities for the tokens in the message"
      properties:
        message:
          discriminator:
            mapping:
              assistant: '#/$defs/OpenAIAssistantMessageParam'
              developer: '#/$defs/OpenAIDeveloperMessageParam'
              system: '#/$defs/OpenAISystemMessageParam'
              tool: '#/$defs/OpenAIToolMessageParam'
              user: '#/$defs/OpenAIUserMessageParam'
            propertyName: role
          oneOf:
          - $ref: '#/components/schemas/OpenAIUserMessageParam'
          - $ref: '#/components/schemas/OpenAISystemMessageParam'
          - $ref: '#/components/schemas/OpenAIAssistantMessageParam'
          - $ref: '#/components/schemas/OpenAIToolMessageParam'
          - $ref: '#/components/schemas/OpenAIDeveloperMessageParam'
          title: Message
        finish_reason:
          title: Finish Reason
          type: string
        index:
          title: Index
          type: integer
        logprobs:
          $ref: '#/components/schemas/OpenAIChoiceLogprobs'
          nullable: true
      required:
      - message
      - finish_reason
      - index
      title: OpenAIChoice
      type: object
    OpenAIChoiceLogprobs:
      description: "The log probabilities for the tokens in the message from an OpenAI-compatible chat completion response.\n\n:param content: (Optional) The log probabilities for the tokens in the message\n:param refusal: (Optional) The log probabilities for the tokens in the message"
      properties:
        content:
          title: Content
          items:
            $ref: '#/components/schemas/OpenAITokenLogProb'
          type: array
          nullable: true
        refusal:
          title: Refusal
          items:
            $ref: '#/components/schemas/OpenAITokenLogProb'
          type: array
          nullable: true
      title: OpenAIChoiceLogprobs
      type: object
    OpenAICompletionWithInputMessages:
      properties:
        id:
          title: Id
          type: string
        choices:
          items:
            $ref: '#/components/schemas/OpenAIChoice'
          title: Choices
          type: array
        object:
          const: chat.completion
          default: chat.completion
          title: Object
          type: string
        created:
          title: Created
          type: integer
        model:
          title: Model
          type: string
        usage:
          $ref: '#/components/schemas/OpenAIChatCompletionUsage'
          nullable: true
        input_messages:
          items:
            discriminator:
              mapping:
                assistant: '#/$defs/OpenAIAssistantMessageParam'
                developer: '#/$defs/OpenAIDeveloperMessageParam'
                system: '#/$defs/OpenAISystemMessageParam'
                tool: '#/$defs/OpenAIToolMessageParam'
                user: '#/$defs/OpenAIUserMessageParam'
              propertyName: role
            oneOf:
            - $ref: '#/components/schemas/OpenAIUserMessageParam'
            - $ref: '#/components/schemas/OpenAISystemMessageParam'
            - $ref: '#/components/schemas/OpenAIAssistantMessageParam'
            - $ref: '#/components/schemas/OpenAIToolMessageParam'
            - $ref: '#/components/schemas/OpenAIDeveloperMessageParam'
          title: Input Messages
          type: array
      required:
      - id
      - choices
      - created
      - model
      - input_messages
      title: OpenAICompletionWithInputMessages
      type: object
    OpenAIUserMessageParam:
      description: "A message from the user in an OpenAI-compatible chat completion request.\n\n:param role: Must be \"user\" to identify this as a user message\n:param content: The content of the message, which can include text and other media\n:param name: (Optional) The name of the user message participant."
      properties:
        role:
          const: user
          default: user
          title: Role
          type: string
        content:
          anyOf:
          - type: string
          - items:
              discriminator:
                mapping:
                  file: '#/$defs/OpenAIFile'
                  image_url: '#/$defs/OpenAIChatCompletionContentPartImageParam'
                  text: '#/$defs/OpenAIChatCompletionContentPartTextParam'
                propertyName: type
              oneOf:
              - $ref: '#/components/schemas/OpenAIChatCompletionContentPartTextParam'
              - $ref: '#/components/schemas/OpenAIChatCompletionContentPartImageParam'
              - $ref: '#/components/schemas/OpenAIFile'
            type: array
          title: Content
        name:
          title: Name
          type: string
          nullable: true
      required:
      - content
      title: OpenAIUserMessageParam
      type: object
    Checkpoint:
      description: "Checkpoint created during training runs.\n\n:param identifier: Unique identifier for the checkpoint\n:param created_at: Timestamp when the checkpoint was created\n:param epoch: Training epoch when the checkpoint was saved\n:param post_training_job_id: Identifier of the training job that created this checkpoint\n:param path: File system path where the checkpoint is stored\n:param training_metrics: (Optional) Training metrics associated with this checkpoint"
      properties:
        identifier:
          title: Identifier
          type: string
        created_at:
          format: date-time
          title: Created At
          type: string
        epoch:
          title: Epoch
          type: integer
        post_training_job_id:
          title: Post Training Job Id
          type: string
        path:
          title: Path
          type: string
        training_metrics:
          $ref: '#/components/schemas/PostTrainingMetric'
          nullable: true
      required:
      - identifier
      - created_at
      - epoch
      - post_training_job_id
      - path
      title: Checkpoint
      type: object
    PostTrainingJobArtifactsResponse:
      description: "Artifacts of a finetuning job.\n\n:param job_uuid: Unique identifier for the training job\n:param checkpoints: List of model checkpoints created during training"
      properties:
        job_uuid:
          title: Job Uuid
          type: string
        checkpoints:
          items:
            $ref: '#/components/schemas/Checkpoint'
          title: Checkpoints
          type: array
      required:
      - job_uuid
      title: PostTrainingJobArtifactsResponse
      type: object
    PostTrainingJobStatusResponse:
      description: "Status of a finetuning job.\n\n:param job_uuid: Unique identifier for the training job\n:param status: Current status of the training job\n:param scheduled_at: (Optional) Timestamp when the job was scheduled\n:param started_at: (Optional) Timestamp when the job execution began\n:param completed_at: (Optional) Timestamp when the job finished, if completed\n:param resources_allocated: (Optional) Information about computational resources allocated to the job\n:param checkpoints: List of model checkpoints created during training"
      properties:
        job_uuid:
          title: Job Uuid
          type: string
        status:
          $ref: '#/components/schemas/JobStatus'
        scheduled_at:
          title: Scheduled At
          format: date-time
          type: string
          nullable: true
        started_at:
          title: Started At
          format: date-time
          type: string
          nullable: true
        completed_at:
          title: Completed At
          format: date-time
          type: string
          nullable: true
        resources_allocated:
          title: Resources Allocated
          additionalProperties: true
          type: object
          nullable: true
        checkpoints:
          items:
            $ref: '#/components/schemas/Checkpoint'
          title: Checkpoints
          type: array
      required:
      - job_uuid
      - status
      title: PostTrainingJobStatusResponse
      type: object
    ScoringFn:
      description: "A scoring function resource for evaluating model outputs.\n:param type: The resource type, always scoring_function"
      properties:
        identifier:
          description: Unique identifier for this resource in llama stack
          title: Identifier
          type: string
        provider_resource_id:
          description: Unique identifier for this resource in the provider
          title: Provider Resource Id
          type: string
          nullable: true
        provider_id:
          description: ID of the provider that owns this resource
          title: Provider Id
          type: string
        type:
          const: scoring_function
          default: scoring_function
          title: Type
          type: string
        description:
          title: Description
          type: string
          nullable: true
        metadata:
          additionalProperties: true
          description: Any additional metadata for this definition
          title: Metadata
          type: object
        return_type:
          description: The return type of the deterministic function
          discriminator:
            mapping:
              agent_turn_input: '#/$defs/AgentTurnInputType'
              array: '#/$defs/ArrayType'
              boolean: '#/$defs/BooleanType'
              chat_completion_input: '#/$defs/ChatCompletionInputType'
              completion_input: '#/$defs/CompletionInputType'
              json: '#/$defs/JsonType'
              number: '#/$defs/NumberType'
              object: '#/$defs/ObjectType'
              string: '#/$defs/StringType'
              union: '#/$defs/UnionType'
            propertyName: type
          oneOf:
          - $ref: '#/components/schemas/StringType'
          - $ref: '#/components/schemas/NumberType'
          - $ref: '#/components/schemas/BooleanType'
          - $ref: '#/components/schemas/ArrayType'
          - $ref: '#/components/schemas/ObjectType'
          - $ref: '#/components/schemas/JsonType'
          - $ref: '#/components/schemas/UnionType'
          - $ref: '#/components/schemas/ChatCompletionInputType'
          - $ref: '#/components/schemas/CompletionInputType'
          - $ref: '#/components/schemas/AgentTurnInputType'
          title: Return Type
        params:
          description: The parameters for the scoring function for benchmark eval, these can be overridden for app eval
          title: Params
          discriminator:
            mapping:
              basic: '#/$defs/BasicScoringFnParams'
              llm_as_judge: '#/$defs/LLMAsJudgeScoringFnParams'
              regex_parser: '#/$defs/RegexParserScoringFnParams'
            propertyName: type
          oneOf:
          - $ref: '#/components/schemas/LLMAsJudgeScoringFnParams'
          - $ref: '#/components/schemas/RegexParserScoringFnParams'
          - $ref: '#/components/schemas/BasicScoringFnParams'
          nullable: true
      required:
      - identifier
      - provider_id
      - return_type
      title: ScoringFn
      type: object
    ListToolDefsResponse:
      description: "Response containing a list of tool definitions.\n\n:param data: List of tool definitions"
      properties:
        data:
          items:
            $ref: '#/components/schemas/ToolDef'
          title: Data
          type: array
      required:
      - data
      title: ListToolDefsResponse
      type: object
    VectorStoreDeleteResponse:
      description: "Response from deleting a vector store.\n\n:param id: Unique identifier of the deleted vector store\n:param object: Object type identifier for the deletion response\n:param deleted: Whether the deletion operation was successful"
      properties:
        id:
          title: Id
          type: string
        object:
          default: vector_store.deleted
          title: Object
          type: string
        deleted:
          default: true
          title: Deleted
          type: boolean
      required:
      - id
      title: VectorStoreDeleteResponse
      type: object
    VectorStoreFileContentsResponse:
      description: "Response from retrieving the contents of a vector store file.\n\n:param file_id: Unique identifier for the file\n:param filename: Name of the file\n:param attributes: Key-value attributes associated with the file\n:param content: List of content items from the file"
      properties:
        file_id:
          title: File Id
          type: string
        filename:
          title: Filename
          type: string
        attributes:
          additionalProperties: true
          title: Attributes
          type: object
        content:
          items:
            $ref: '#/components/schemas/VectorStoreContent'
          title: Content
          type: array
      required:
      - file_id
      - filename
      - attributes
      - content
      title: VectorStoreFileContentsResponse
      type: object
    VectorStoreFileDeleteResponse:
      description: "Response from deleting a vector store file.\n\n:param id: Unique identifier of the deleted file\n:param object: Object type identifier for the deletion response\n:param deleted: Whether the deletion operation was successful"
      properties:
        id:
          title: Id
          type: string
        object:
          default: vector_store.file.deleted
          title: Object
          type: string
        deleted:
          default: true
          title: Deleted
          type: boolean
      required:
      - id
      title: VectorStoreFileDeleteResponse
      type: object
    VectorStoreFilesListInBatchResponse:
      description: "Response from listing files in a vector store file batch.\n\n:param object: Object type identifier, always \"list\"\n:param data: List of vector store file objects in the batch\n:param first_id: (Optional) ID of the first file in the list for pagination\n:param last_id: (Optional) ID of the last file in the list for pagination\n:param has_more: Whether there are more files available beyond this page"
      properties:
        object:
          default: list
          title: Object
          type: string
        data:
          items:
            $ref: '#/components/schemas/VectorStoreFileObject'
          title: Data
          type: array
        first_id:
          title: First Id
          type: string
          nullable: true
        last_id:
          title: Last Id
          type: string
          nullable: true
        has_more:
          default: false
          title: Has More
          type: boolean
      required:
      - data
      title: VectorStoreFilesListInBatchResponse
      type: object
    VectorStoreListFilesResponse:
      description: "Response from listing files in a vector store.\n\n:param object: Object type identifier, always \"list\"\n:param data: List of vector store file objects\n:param first_id: (Optional) ID of the first file in the list for pagination\n:param last_id: (Optional) ID of the last file in the list for pagination\n:param has_more: Whether there are more files available beyond this page"
      properties:
        object:
          default: list
          title: Object
          type: string
        data:
          items:
            $ref: '#/components/schemas/VectorStoreFileObject'
          title: Data
          type: array
        first_id:
          title: First Id
          type: string
          nullable: true
        last_id:
          title: Last Id
          type: string
          nullable: true
        has_more:
          default: false
          title: Has More
          type: boolean
      required:
      - data
      title: VectorStoreListFilesResponse
      type: object
    VectorStoreListResponse:
      description: "Response from listing vector stores.\n\n:param object: Object type identifier, always \"list\"\n:param data: List of vector store objects\n:param first_id: (Optional) ID of the first vector store in the list for pagination\n:param last_id: (Optional) ID of the last vector store in the list for pagination\n:param has_more: Whether there are more vector stores available beyond this page"
      properties:
        object:
          default: list
          title: Object
          type: string
        data:
          items:
            $ref: '#/components/schemas/VectorStoreObject'
          title: Data
          type: array
        first_id:
          title: First Id
          type: string
          nullable: true
        last_id:
          title: Last Id
          type: string
          nullable: true
        has_more:
          default: false
          title: Has More
          type: boolean
      required:
      - data
      title: VectorStoreListResponse
      type: object
    OpenAIResponseMessage:
      description: "Corresponds to the various Message types in the Responses API.\nThey are all under one type because the Responses API gives them all\nthe same \"type\" value, and there is no way to tell them apart in certain\nscenarios."
      properties:
        content:
          anyOf:
          - type: string
          - items:
              discriminator:
                mapping:
                  input_file: '#/$defs/OpenAIResponseInputMessageContentFile'
                  input_image: '#/$defs/OpenAIResponseInputMessageContentImage'
                  input_text: '#/$defs/OpenAIResponseInputMessageContentText'
                propertyName: type
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentText'
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentImage'
              - $ref: '#/components/schemas/OpenAIResponseInputMessageContentFile'
            type: array
          - items:
              discriminator:
                mapping:
                  output_text: '#/$defs/OpenAIResponseOutputMessageContentOutputText'
                  refusal: '#/$defs/OpenAIResponseContentPartRefusal'
                propertyName: type
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageContentOutputText'
              - $ref: '#/components/schemas/OpenAIResponseContentPartRefusal'
            type: array
          title: Content
        role:
          anyOf:
          - const: system
            type: string
          - const: developer
            type: string
          - const: user
            type: string
          - const: assistant
            type: string
          title: Role
        type:
          const: message
          default: message
          title: Type
          type: string
        id:
          title: Id
          type: string
          nullable: true
        status:
          title: Status
          type: string
          nullable: true
      required:
      - content
      - role
      title: OpenAIResponseMessage
      type: object
    OpenAIResponseObjectWithInput:
      description: "OpenAI response object extended with input context information.\n\n:param input: List of input items that led to this response"
      properties:
        created_at:
          title: Created At
          type: integer
        error:
          $ref: '#/components/schemas/OpenAIResponseError'
          nullable: true
        id:
          title: Id
          type: string
        model:
          title: Model
          type: string
        object:
          const: response
          default: response
          title: Object
          type: string
        output:
          items:
            discriminator:
              mapping:
                file_search_call: '#/$defs/OpenAIResponseOutputMessageFileSearchToolCall'
                function_call: '#/$defs/OpenAIResponseOutputMessageFunctionToolCall'
                mcp_approval_request: '#/$defs/OpenAIResponseMCPApprovalRequest'
                mcp_call: '#/$defs/OpenAIResponseOutputMessageMCPCall'
                mcp_list_tools: '#/$defs/OpenAIResponseOutputMessageMCPListTools'
                message: '#/$defs/OpenAIResponseMessage'
                web_search_call: '#/$defs/OpenAIResponseOutputMessageWebSearchToolCall'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/OpenAIResponseMessage'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
            - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
            - $ref: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
          title: Output
          type: array
        parallel_tool_calls:
          default: false
          title: Parallel Tool Calls
          type: boolean
        previous_response_id:
          title: Previous Response Id
          type: string
          nullable: true
        prompt:
          $ref: '#/components/schemas/OpenAIResponsePrompt'
          nullable: true
        status:
          title: Status
          type: string
        temperature:
          title: Temperature
          type: number
          nullable: true
        text:
          $ref: '#/components/schemas/OpenAIResponseText'
          default:
            format:
              type: text
        top_p:
          title: Top P
          type: number
          nullable: true
        tools:
          title: Tools
          items:
            discriminator:
              mapping:
                file_search: '#/$defs/OpenAIResponseInputToolFileSearch'
                function: '#/$defs/OpenAIResponseInputToolFunction'
                mcp: '#/$defs/OpenAIResponseToolMCP'
                web_search: '#/$defs/OpenAIResponseInputToolWebSearch'
                web_search_preview: '#/$defs/OpenAIResponseInputToolWebSearch'
                web_search_preview_2025_03_11: '#/$defs/OpenAIResponseInputToolWebSearch'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/OpenAIResponseInputToolWebSearch'
            - $ref: '#/components/schemas/OpenAIResponseInputToolFileSearch'
            - $ref: '#/components/schemas/OpenAIResponseInputToolFunction'
            - $ref: '#/components/schemas/OpenAIResponseToolMCP'
          type: array
          nullable: true
        truncation:
          title: Truncation
          type: string
          nullable: true
        usage:
          $ref: '#/components/schemas/OpenAIResponseUsage'
          nullable: true
        instructions:
          title: Instructions
          type: string
          nullable: true
        input:
          items:
            anyOf:
            - discriminator:
                mapping:
                  file_search_call: '#/$defs/OpenAIResponseOutputMessageFileSearchToolCall'
                  function_call: '#/$defs/OpenAIResponseOutputMessageFunctionToolCall'
                  mcp_approval_request: '#/$defs/OpenAIResponseMCPApprovalRequest'
                  mcp_call: '#/$defs/OpenAIResponseOutputMessageMCPCall'
                  mcp_list_tools: '#/$defs/OpenAIResponseOutputMessageMCPListTools'
                  message: '#/$defs/OpenAIResponseMessage'
                  web_search_call: '#/$defs/OpenAIResponseOutputMessageWebSearchToolCall'
                propertyName: type
              oneOf:
              - $ref: '#/components/schemas/OpenAIResponseMessage'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageWebSearchToolCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageFileSearchToolCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageFunctionToolCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPCall'
              - $ref: '#/components/schemas/OpenAIResponseOutputMessageMCPListTools'
              - $ref: '#/components/schemas/OpenAIResponseMCPApprovalRequest'
            - $ref: '#/components/schemas/OpenAIResponseInputFunctionToolCallOutput'
            - $ref: '#/components/schemas/OpenAIResponseMCPApprovalResponse'
            - $ref: '#/components/schemas/OpenAIResponseMessage'
          title: Input
          type: array
      required:
      - created_at
      - id
      - model
      - output
      - status
      - input
      title: OpenAIResponseObjectWithInput
      type: object
    ImageContentItem:
      description: "A image content item\n\n:param type: Discriminator type of the content item. Always \"image\"\n:param image: Image as a base64 encoded string or an URL"
      properties:
        type:
          const: image
          default: image
          title: Type
          type: string
        image:
          $ref: '#/components/schemas/_URLOrData'
      required:
      - image
      title: ImageContentItem
      type: object
    PostTrainingMetric:
      description: "Training metrics captured during post-training jobs.\n\n:param epoch: Training epoch number\n:param train_loss: Loss value on the training dataset\n:param validation_loss: Loss value on the validation dataset\n:param perplexity: Perplexity metric indicating model confidence"
      properties:
        epoch:
          title: Epoch
          type: integer
        train_loss:
          title: Train Loss
          type: number
        validation_loss:
          title: Validation Loss
          type: number
        perplexity:
          title: Perplexity
          type: number
      required:
      - epoch
      - train_loss
      - validation_loss
      - perplexity
      title: PostTrainingMetric
      type: object
    _safety_run_shield_Request:
      properties:
        shield_id:
          title: Shield Id
          type: string
        messages:
          anyOf:
          - $ref: '#/components/schemas/OpenAIUserMessageParam'
          - $ref: '#/components/schemas/OpenAISystemMessageParam'
          - $ref: '#/components/schemas/OpenAIAssistantMessageParam'
          - $ref: '#/components/schemas/OpenAIToolMessageParam'
          - $ref: '#/components/schemas/OpenAIDeveloperMessageParam'
          title: Messages
        params:
          title: Params
          type: string
      required:
      - shield_id
      - messages
      - params
      title: _safety_run_shield_Request
      type: object
  responses:
    BadRequest400:
      description: The request was invalid or malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 400
            title: Bad Request
            detail: The request was invalid or malformed
    TooManyRequests429:
      description: The client has sent too many requests in a given amount of time
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 429
            title: Too Many Requests
            detail: You have exceeded the rate limit. Please try again later.
    InternalServerError500:
      description: The server encountered an unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 500
            title: Internal Server Error
            detail: An unexpected error occurred
    DefaultError:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
